Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
90351378;30208478;3540044;2;3decb744-baf9-4e64-969a-adf765797b30;2015-05-13 07:35:29.0;"Singletone must have private constructor and you do not have to attach this script to any object.&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }";;
90351799;30208478;3540044;5;7439733c-59de-4029-a5bc-78b03bf65d7c;2015-05-13 07:41:06.0;"Singleton must have private constructor and you do not have to attach this script to any object.&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And if you need to attach the script to object, you should to create another script that controls singleton";;added 112 characters in body
90352250;30208478;3540044;5;b1e95fe0-bfe5-44fb-8028-a72a33de6fa4;2015-05-13 07:46:53.0;"Singleton must have private constructor and you do not have to attach this script to any object.&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And if you need to attach the script to object, you should create another script that controls singleton";;deleted 3 characters in body
90352681;30208478;3540044;5;dded5a0d-cce6-4e6b-9d33-8ec3dadd21dc;2015-05-13 07:53:35.0;"Deriving from `MonoBehaviour` means that you can attach your script to many objects coursing many instances.&#xD;&#xA;Singleton must have private constructor, no `MonoBehaviour` derivation and you do not have to attach this script to any object. If you need to attach the script to object, you should create another script that derive from `MonoBehaviour` and controls singleton&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }";;deleted 3 characters in body
90353643;30208478;3540044;5;86cda46f-ebdb-46b8-88ac-e45d43d2f22d;2015-05-13 08:05:48.0;"In your example the instance of `BlobManager` instantiation occur many times, but only first instance saved in property `Instance`.&#xD;&#xA;&#xD;&#xA;Deriving from `MonoBehaviour` means that you can attach your script to many objects coursing many instances.&#xD;&#xA;Singleton must have private constructor, no `MonoBehaviour` derivation and you do not have to attach this script to any object. If you need to attach the script to object, you should create another script that derive from `MonoBehaviour` and controls singleton&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }";;added 135 characters in body
90354051;30208478;3540044;5;f7294e45-3937-4cab-b0f0-f2459a4249c0;2015-05-13 08:10:59.0;"In your example the instance of `BlobManager` instantiation occur many times, but only first instance saved in property `Instance`.&#xD;&#xA;&#xD;&#xA;Deriving from `MonoBehaviour` means that you can attach your script to many objects coursing many instances.&#xD;&#xA;Singleton must have private constructor, no `MonoBehaviour` derivation and you have to not attach this script to any object. If you need to attach the script to object, you should create another script that derive from `MonoBehaviour` and controls singleton&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }";;added 135 characters in body
90363089;30208478;3540044;5;1658d945-4e1e-4738-a128-31baf97cf3fe;2015-05-13 10:01:53.0;"In your example the `BlobManager` instantiation occur many times, but only first instance saved in property `Instance`.&#xD;&#xA;&#xD;&#xA;Deriving from `MonoBehaviour` means that you can attach your script to many objects coursing many instances.&#xD;&#xA;Singleton must have private constructor, no `MonoBehaviour` derivation and you have to not attach this script to any object. If you need to attach the script to object, you should create another script that derive from `MonoBehaviour` and controls singleton&#xD;&#xA;&#xD;&#xA;Example (not tested):&#xD;&#xA;&#xD;&#xA;    public class BlobManager&#xD;&#xA;    {&#xD;&#xA;        static BlobManager _inst;&#xD;&#xA;        public static BlobManager Instance {&#xD;&#xA;        get&#xD;&#xA;        {&#xD;&#xA;            if (_inst == null)&#xD;&#xA;                _inst = new BlobManager();&#xD;&#xA;            return _inst;&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private BlobManager() &#xD;&#xA;        {&#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;    }";;deleted 12 characters in body

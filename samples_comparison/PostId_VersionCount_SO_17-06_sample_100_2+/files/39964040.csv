Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
128982326;39964040;4468078;2;259b89da-1008-4cde-bb2d-5c4f297da2cf;2016-10-10 17:54:33.0;"I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the offending R command. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback) and recover from the error...&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      print(traceback())  # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;  > NULL&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is document in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;
128983408;39964040;4468078;5;8e4b6573-4243-4c7c-8c3c-865c8a188f01;2016-10-10 18:13:11.0;"I have many unattended batch jobs in R running on a server.&#xD;&#xA;&#xD;&#xA;I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the offending R command. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback) and recover from the error...&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      print(traceback())  # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;  > NULL&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is document in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;Added use case
128985032;39964040;4468078;5;6ce3ef83-1823-42e0-abc5-118b93333bc2;2016-10-10 18:39:55.0;"I have many unattended batch jobs in R running on a server.&#xD;&#xA;&#xD;&#xA;I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the offending R command. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback)&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      print(traceback())  # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;  > NULL&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is document in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;shortened
128996039;39964040;4468078;5;68ba576a-8028-4a1d-9fe6-3db9913d377b;2016-10-10 22:10:38.0;"I have many unattended batch jobs in R running on a server.&#xD;&#xA;&#xD;&#xA;I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the offending R command. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback)&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      print(traceback())  # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is document in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;leaner output
129093792;39964040;4468078;5;2574451e-bc8a-4e51-adce-e31b1ccdd859;2016-10-12 07:15:39.0;"I have many unattended batch jobs in R running on a server.&#xD;&#xA;&#xD;&#xA;I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the offending R command. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback)&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      print(traceback())  # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is document in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - [optionally] without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;on goal is optional
129128654;39964040;4468078;5;6b9680e5-58fd-4de6-b5ff-333037ee97f2;2016-10-12 14:43:05.0;"I have many unattended batch jobs in R running on a server.&#xD;&#xA;&#xD;&#xA;I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the offending R command. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback)&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      print(traceback())  # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is documented in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - [optionally] without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;m: typo
129398875;39964040;4468078;5;54f9d3a7-c431-4425-aef2-8733f88926d1;2016-10-16 09:01:44.0;"I have many unattended batch jobs in R running on a server and I have to analyse job failures after they have run.&#xD;&#xA;&#xD;&#xA;I am trying to catch errors to log them and recover from the error gracefully but I am not able to get a stack trace (`traceback`) to log the code file name and line number of the R command that caused the error. A (stupid) reproducible example:&#xD;&#xA;&#xD;&#xA;    f <- function() {&#xD;&#xA;      1 + variable.not.found    # stupid error&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    tryCatch( f(), error=function(e) {&#xD;&#xA;      # Here I would log the error message and stack trace (traceback)&#xD;&#xA;      print(e)            # error message is no problem&#xD;&#xA;      traceback()         # stack trace does NOT work&#xD;&#xA;      # Here I would handle the error and recover...&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Running the code above produces this output:&#xD;&#xA;&#xD;&#xA;  > simpleError in f(): object 'variable.not.found' not found&#xD;&#xA;&#xD;&#xA;  > **No traceback available**&#xD;&#xA;&#xD;&#xA;The traceback is not available and the reason is documented in the R help  (`?traceback`):&#xD;&#xA;&#xD;&#xA;> Errors which are caught via try or tryCatch do not generate a&#xD;&#xA;> traceback, so what is printed is the call sequence for the last&#xD;&#xA;> uncaught error, and not necessarily for the last error.&#xD;&#xA;&#xD;&#xA;In other words: Catching an error with `tryCatch` does kill the stack trace!&#xD;&#xA;&#xD;&#xA;How can I&#xD;&#xA;&#xD;&#xA; - handle errors **and**&#xD;&#xA; - log the stack trace (traceback) for further examination&#xD;&#xA; - [optionally] without using undocumented or hidden R internal functions that are not guaranteed to work in the future?&#xD;&#xA;&#xD;&#xA;THX a lot!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;code fixed

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
74116235;26000482;2009376;2;c8086eb6-b5b2-4563-ab2a-de8a22f0f932;2014-09-23 16:47:48.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This will scan the folder every 15 seconds and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare a global variable in a Module for cancelling the process:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing` and call the `scanFolderForChanges()` subroutine in the macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = False&#xD;&#xA;    scanFolderForChanges&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        If Not bStopProcessing Then &#xD;&#xA;            '...&#xD;&#xA;            '<folder scanning code>&#xD;&#xA;            '...&#xD;&#xA;            Application.OnTime Now + TimeValue(""00:00:15""), ""scanFolderForChanges""&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = True";;
74192460;26000482;2009376;5;1448631a-c471-40eb-937d-c69fda00501f;2014-09-24 15:32:54.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This will scan the folder every 15 seconds and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare a global variables in a Module:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean 'for cancelling the process&#xD;&#xA;    Dim bProcessIsRunning as Boolean 'to prevent next folder scan until we're ready&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing`, `bProcessIsRunning` and call the `scanFolderForChanges()` subroutine in the macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = False&#xD;&#xA;    bProcessIsRunning = False&#xD;&#xA;    scanFolderForChanges&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        If Not bStopProcessing Then&#xD;&#xA;            Application.OnTime Now + TimeValue(""00:00:15""), ""scanFolderForChanges""&#xD;&#xA;            If bProcessIsRunning Then Exit Sub&#xD;&#xA;&#xD;&#xA;            bProcessIsRunning = True&#xD;&#xA;            '...&#xD;&#xA;            '<folder scanning and file parsing code>&#xD;&#xA;            '...&#xD;&#xA;            bProcessIsRunning = False&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = True";;added 265 characters in body
74192877;26000482;2009376;5;91a1f813-6e09-494d-b1b4-bc1051131049;2014-09-24 15:37:56.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This example code will scan the folder every 5 seconds and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare global variables in a Module:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean 'for cancelling the process&#xD;&#xA;    Dim bProcessIsRunning as Boolean 'to prevent next folder scan until we're ready&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing`, `bProcessIsRunning` and call the `scanFolderForChanges()` subroutine in the macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = False&#xD;&#xA;    bProcessIsRunning = False&#xD;&#xA;    scanFolderForChanges&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        If Not bStopProcessing Then&#xD;&#xA;            Application.OnTime Now + TimeValue(""00:00:05""), ""scanFolderForChanges""&#xD;&#xA;            If bProcessIsRunning Then Exit Sub&#xD;&#xA;&#xD;&#xA;            bProcessIsRunning = True&#xD;&#xA;            '...&#xD;&#xA;            '<folder scanning and file parsing code>&#xD;&#xA;            '...&#xD;&#xA;            bProcessIsRunning = False&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = True";;added 265 characters in body
74673153;26000482;2009376;5;bec19c91-ea7f-4629-947b-21460da542ab;2014-10-01 17:14:16.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This example code will scan the folder every 5 seconds and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare global variables in a Module:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean 'for cancelling the process&#xD;&#xA;    Dim nextScheduledScanTime as Date 'store this so we can cancel it&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing` and call the `scanFolderForChanges()` subroutine in the separate macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    Sub startScanning()&#xD;&#xA;        bStopProcessing = False&#xD;&#xA;        scanFolderForChanges&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        If bStopProcessing Then Exit Sub&#xD;&#xA;        '...&#xD;&#xA;        '<folder scanning and file parsing code>&#xD;&#xA;        '...&#xD;&#xA;        If Not bStopProcessing Then&#xD;&#xA;            nextScheduledScanTime = Now + TimeValue(""00:00:05"")&#xD;&#xA;            Application.OnTime nextScheduledScanTime, ""scanFolderForChanges""&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = True&#xD;&#xA;&#xD;&#xA;Within the Workbook_Close() event:&#xD;&#xA;&#xD;&#xA;    Private Sub Workbook_BeforeClose(Cancel As Boolean)&#xD;&#xA;        'prevent the scheduled procedure from being called after this workbook is closed&#xD;&#xA;        On Error Resume Next&#xD;&#xA;        Application.OnTime nextScheduledScanTime, ""scanFolderForChanges"", , False&#xD;&#xA;    End Sub";;removed chance for error
74673522;26000482;2009376;5;ee8e4727-1839-4b82-9beb-4e17767dbeb4;2014-10-01 17:19:52.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This example code will scan the folder every 5 seconds and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare global variables in a Module:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean 'for cancelling the process&#xD;&#xA;    Dim nextScheduledScanTime as Date 'store this so we can cancel it&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing` and call the `scanFolderForChanges()` subroutine in the separate macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    Sub startScanning()&#xD;&#xA;        bStopProcessing = False&#xD;&#xA;        scanFolderForChanges&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        If bStopProcessing Then Exit Sub&#xD;&#xA;        '...&#xD;&#xA;        '<folder scanning and file parsing code>&#xD;&#xA;        '...&#xD;&#xA;        If Not bStopProcessing Then&#xD;&#xA;            nextScheduledScanTime = Now + TimeValue(""00:00:05"")&#xD;&#xA;            Application.OnTime nextScheduledScanTime, ""scanFolderForChanges""&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    bStopProcessing = True&#xD;&#xA;&#xD;&#xA;Within the `Workbook_BeforeClose()` event:&#xD;&#xA;&#xD;&#xA;    Private Sub Workbook_BeforeClose(Cancel As Boolean)&#xD;&#xA;        'prevent the scheduled procedure from being called after this workbook is closed&#xD;&#xA;        On Error Resume Next&#xD;&#xA;        Application.OnTime nextScheduledScanTime, ""scanFolderForChanges"", , False&#xD;&#xA;    End Sub";;added 8 characters in body
74681203;26000482;2009376;5;08c3e419-b0b1-410f-a211-07f6bb1fa5b3;2014-10-01 19:23:55.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This example code will scan the folder every 5 seconds and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare global variables in a Module:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean 'for cancelling the process&#xD;&#xA;    Dim nextScheduledScanTime as Date 'store this so we can cancel it&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing` and call the `scanFolderForChanges()` subroutine in the separate macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    Sub startScanning()&#xD;&#xA;        bStopProcessing = False&#xD;&#xA;        scanFolderForChanges&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        If bStopProcessing Then Exit Sub&#xD;&#xA;        '...&#xD;&#xA;        '<folder scanning and file parsing code>&#xD;&#xA;        '...&#xD;&#xA;        If Not bStopProcessing Then&#xD;&#xA;            nextScheduledScanTime = Now + TimeValue(""00:00:05"")&#xD;&#xA;            Application.OnTime nextScheduledScanTime, ""scanFolderForChanges""&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    Private Sub btnStopProcessing_Click()&#xD;&#xA;        bStopProcessing = True&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the `Workbook_BeforeClose()` event:&#xD;&#xA;&#xD;&#xA;    Private Sub Workbook_BeforeClose(Cancel As Boolean)&#xD;&#xA;        'prevent the scheduled procedure from being called after this workbook is closed&#xD;&#xA;        On Error Resume Next&#xD;&#xA;        Application.OnTime nextScheduledScanTime, ""scanFolderForChanges"", , False&#xD;&#xA;    End Sub";;added 60 characters in body
74682056;26000482;2009376;5;c26f4540-af25-44ea-969f-f665b16326d9;2014-10-01 19:38:20.0;"Instead of using an infinite loop use [Application.OnTime()](http://msdn.microsoft.com/en-us/library/office/ff196165(v=office.15).aspx) to schedule the execution of your folder scanning code. This example code will scan the folder 5 seconds after the last ""processing"" was completed and cancel operation if the button is clicked:&#xD;&#xA;&#xD;&#xA;Declare global variables in a Module:&#xD;&#xA;&#xD;&#xA;    Dim bStopProcessing as Boolean 'for cancelling the process&#xD;&#xA;    Dim nextScheduledScanTime as Date 'time at which to call scanFolderForChanges() again&#xD;&#xA;&#xD;&#xA;Initialize `bStopProcessing` and call the `scanFolderForChanges()` subroutine in the separate macro that begins the whole process:&#xD;&#xA;&#xD;&#xA;    Sub startScanning()&#xD;&#xA;        'calling this subroutine will begin continuous scanning&#xD;&#xA;        bStopProcessing = False&#xD;&#xA;        scanFolderForChanges&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Folder scanning subroutine:&#xD;&#xA;&#xD;&#xA;    Sub scanFolderForChanges()&#xD;&#xA;        'if [btnStopProcessing] was clicked, stop processing.&#xD;&#xA;        If bStopProcessing Then Exit Sub&#xD;&#xA;        '...&#xD;&#xA;        '<folder scanning and processing code goes here>&#xD;&#xA;        '...&#xD;&#xA;        If Not bStopProcessing Then&#xD;&#xA;            'store the scheduled time so we can cancel it if the workbook is closed&#xD;&#xA;            nextScheduledScanTime = Now + TimeValue(""00:00:05"")&#xD;&#xA;            'schedule the next call to this subroutine (5 seconds from now)&#xD;&#xA;            Application.OnTime nextScheduledScanTime, ""scanFolderForChanges""&#xD;&#xA;        End If&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the stop button's click event:&#xD;&#xA;&#xD;&#xA;    Private Sub btnStopProcessing_Click()&#xD;&#xA;        bStopProcessing = True&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Within the `Workbook_BeforeClose()` event:&#xD;&#xA;&#xD;&#xA;    Private Sub Workbook_BeforeClose(Cancel As Boolean)&#xD;&#xA;        'prevent the scheduled procedure from being called after this workbook is closed&#xD;&#xA;        On Error Resume Next&#xD;&#xA;        Application.OnTime nextScheduledScanTime, ""scanFolderForChanges"", , False&#xD;&#xA;    End Sub&#xD;&#xA;&#xD;&#xA;Passing `False` as the ""Schedule"" parameter tells the `OnTime()` method to cancel the scheduled subroutine call that matches the first two parameters. This line could also be written:  &#xD;&#xA;&#xD;&#xA;        Application.OnTime nextScheduledScanTime, ""scanFolderForChanges"", Schedule:=False";;added 60 characters in body

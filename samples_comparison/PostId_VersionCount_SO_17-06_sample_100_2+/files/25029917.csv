Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
70403908;25029917;840960;2;d1f88f18-4a1e-4a05-8bbc-191eb8c63494;2014-07-30 06:16:47.0;"When you call the `SecondActivity`, use `startActivityForResult()`. When ""back"" is pressed, capture the event and set the result in a way it gives `MainActivity` the possibility to test it and switch to the second tab.";;
70404444;25029917;840960;5;9004b988-b9f9-4130-a159-63dd3aa38ee4;2014-07-30 06:27:39.0;"When you call the `SecondActivity`, use `startActivityForResult()`. When ""back"" is pressed, capture the event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab2(); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;    }";;added 575 characters in body
70404774;25029917;840960;5;f22b541b-3535-48d5-8249-7d1ea93f6db9;2014-07-30 06:33:48.0;"When you call the `SecondActivity`, use `startActivityForResult()`. When ""back"" is pressed, capture the event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab2(); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;        // else... other cases&#xD;&#xA;    }";;added 32 characters in body
70414310;25029917;840960;5;df6bca12-3837-4161-9028-c0ca0591eeb1;2014-07-30 09:04:58.0;"We have two cases here. The back button and the Action Bar's parent button:&#xD;&#xA;&#xD;&#xA; - ***Back button case***:&#xD;&#xA;&#xD;&#xA;When you call the `SecondActivity`, use `startActivityForResult()`. When ""back"" is pressed, capture the event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab(2); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;        // else... other cases&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA; - ***Action Bar's parent button case***:&#xD;&#xA;&#xD;&#xA;If this behaviour has to be connected to the Action Bar's parent button instead of the back button, you have to override `getSupportParentActivityIntent()` or `getParentActivityIntent()` depending on whether you are using the support library or not.&#xD;&#xA;&#xD;&#xA;**SecondActivity: getSupportParentActivityIntent()**:&#xD;&#xA;&#xD;&#xA;	@Override &#xD;&#xA;    public Intent getSupportParentActivityIntent() {&#xD;&#xA;    	final Bundle bundle = new Bundle();&#xD;&#xA;    	final Intent intent = new Intent(this, MainActivity.class);&#xD;&#xA;    	&#xD;&#xA;    	bundle.putString(SWITCH_TAB, TAB_SECOND); // Both constants are defined in your code&#xD;&#xA;    	intent.putExtras(bundle);&#xD;&#xA;&#xD;&#xA;        return intent;&#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;And then, you can handle this in `MainActivity.onCreate().&#xD;&#xA;&#xD;&#xA;**MainActivity: onCreate()**:&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;        final Intent intent = getIntent();&#xD;&#xA;    	&#xD;&#xA;    	if (intent.hasExtra(SWITCH_TAB)) {&#xD;&#xA;            final Bundle extras = intent.getExtras();&#xD;&#xA;            final int tab = extras.getInt(SWITCH_TAB);&#xD;&#xA;&#xD;&#xA;            switchToTab(tab); // switch to tab2 in this example&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;- ***Both buttons case:***&#xD;&#xA;&#xD;&#xA;Should you wish to handle both buttons the same way (regardless this is a good idea or not, I just don't know), both solution above can be implemented concurrently with no problem.&#xD;&#xA;";;added 1477 characters in body
70414716;25029917;840960;5;29511a67-25f2-4b11-be50-bb034ac2be3b;2014-07-30 09:11:00.0;"We have two cases here. The back button and the Action Bar's parent (""Up"") button:&#xD;&#xA;&#xD;&#xA; - ***Back button case***:&#xD;&#xA;&#xD;&#xA;When you call the `SecondActivity`, use `startActivityForResult()`. When ""back"" is pressed, capture the event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab(2); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;        // else... other cases&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA; - ***Action Bar's ""Up"" button case***:&#xD;&#xA;&#xD;&#xA;If this behaviour has to be connected to the Action Bar's ""Up"" button instead of the back button, you have to override `getSupportParentActivityIntent()` or `getParentActivityIntent()` depending on whether you are using the support library or not.&#xD;&#xA;&#xD;&#xA;**SecondActivity: getSupportParentActivityIntent()**:&#xD;&#xA;&#xD;&#xA;	@Override &#xD;&#xA;    public Intent getSupportParentActivityIntent() { // getParentActivityIntent() if you are not using the Support Library&#xD;&#xA;    	final Bundle bundle = new Bundle();&#xD;&#xA;    	final Intent intent = new Intent(this, MainActivity.class);&#xD;&#xA;    	&#xD;&#xA;    	bundle.putString(SWITCH_TAB, TAB_SECOND); // Both constants are defined in your code&#xD;&#xA;    	intent.putExtras(bundle);&#xD;&#xA;&#xD;&#xA;        return intent;&#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;And then, you can handle this in `MainActivity.onCreate().&#xD;&#xA;&#xD;&#xA;**MainActivity: onCreate()**:&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;        final Intent intent = getIntent();&#xD;&#xA;    	&#xD;&#xA;    	if (intent.hasExtra(SWITCH_TAB)) {&#xD;&#xA;            final Bundle extras = intent.getExtras();&#xD;&#xA;            final int tab = extras.getInt(SWITCH_TAB);&#xD;&#xA;&#xD;&#xA;            switchToTab(tab); // switch to tab2 in this example&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;- ***Both buttons case:***&#xD;&#xA;&#xD;&#xA;Should you wish to handle both buttons the same way (regardless this is a good idea or not, I just don't know), both solution above can be implemented concurrently with no problem.&#xD;&#xA;&#xD;&#xA;Side note: to determine whether this is a good idea or not, this [official guide][1] may help. Especially the section ""*Navigating Up with the App Icon*"".&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://developer.android.com/guide/topics/ui/actionbar.html";;added 5 characters in body
70415134;25029917;840960;5;c8b2e933-5872-431d-ac19-0656390c8f6c;2014-07-30 09:16:52.0;"We have three cases here. The actual back button (regardless it is hardware or software), the Action Bar's parent (""Up"") button, and both buttons:&#xD;&#xA;&#xD;&#xA; - ***Back button case***:&#xD;&#xA;&#xD;&#xA;When you call the `SecondActivity`, use `startActivityForResult()` to keep `MainActivity` informed of the `SecondActivity`'s lifecycle. When ""back"" is pressed, capture this event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab(2); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;        // else... other cases&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA; - ***Action Bar's ""Up"" button case***:&#xD;&#xA;&#xD;&#xA;If this behaviour has to be connected to the Action Bar's ""Up"" button instead of the back button, you have to override `getSupportParentActivityIntent()` or `getParentActivityIntent()` depending on whether you are using the support library or not.&#xD;&#xA;&#xD;&#xA;**SecondActivity: getSupportParentActivityIntent()**:&#xD;&#xA;&#xD;&#xA;	@Override &#xD;&#xA;    public Intent getSupportParentActivityIntent() { // getParentActivityIntent() if you are not using the Support Library&#xD;&#xA;    	final Bundle bundle = new Bundle();&#xD;&#xA;    	final Intent intent = new Intent(this, MainActivity.class);&#xD;&#xA;    	&#xD;&#xA;    	bundle.putString(SWITCH_TAB, TAB_SECOND); // Both constants are defined in your code&#xD;&#xA;    	intent.putExtras(bundle);&#xD;&#xA;&#xD;&#xA;        return intent;&#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;And then, you can handle this in `MainActivity.onCreate().&#xD;&#xA;&#xD;&#xA;**MainActivity: onCreate()**:&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;        final Intent intent = getIntent();&#xD;&#xA;    	&#xD;&#xA;    	if (intent.hasExtra(SWITCH_TAB)) {&#xD;&#xA;            final Bundle extras = intent.getExtras();&#xD;&#xA;            final int tab = extras.getInt(SWITCH_TAB);&#xD;&#xA;&#xD;&#xA;            switchToTab(tab); // switch to tab2 in this example&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;- ***Both buttons case:***&#xD;&#xA;&#xD;&#xA;Should you wish to handle both buttons the same way (regardless this is a good idea or not, I just don't know), both solution above can be implemented concurrently with no problem.&#xD;&#xA;&#xD;&#xA;Side note: to determine whether this is a good idea or not, this [official guide][1] may help. Especially the section ""*Navigating Up with the App Icon*"".&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://developer.android.com/guide/topics/ui/actionbar.html";;added 5 characters in body
70415983;25029917;840960;5;6bff0115-cc57-4ebf-9f2d-78b5c810e722;2014-07-30 09:27:52.0;"We have three cases here. The actual back button (regardless it is hardware or software), the Action Bar's parent (""Up"") button, and both buttons:&#xD;&#xA;&#xD;&#xA; - ***Back button case***:&#xD;&#xA;&#xD;&#xA;When you call the `SecondActivity`, use `startActivityForResult()` to keep `MainActivity` informed of the `SecondActivity`'s lifecycle. When ""back"" is pressed, capture this event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab(2); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;        // else... other cases&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA; - ***Action Bar's ""Up"" button case***:&#xD;&#xA;&#xD;&#xA;If this behaviour has to be connected to the Action Bar's ""Up"" button instead of the back button, you have to override `getSupportParentActivityIntent()` or `getParentActivityIntent()` depending on whether you are using the support library or not.&#xD;&#xA;&#xD;&#xA;**SecondActivity: getSupportParentActivityIntent()**:&#xD;&#xA;&#xD;&#xA;	@Override &#xD;&#xA;    public Intent getSupportParentActivityIntent() { // getParentActivityIntent() if you are not using the Support Library&#xD;&#xA;    	final Bundle bundle = new Bundle();&#xD;&#xA;    	final Intent intent = new Intent(this, MainActivity.class);&#xD;&#xA;    	&#xD;&#xA;    	bundle.putString(SWITCH_TAB, TAB_SECOND); // Both constants are defined in your code&#xD;&#xA;    	intent.putExtras(bundle);&#xD;&#xA;&#xD;&#xA;        return intent;&#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;And then, you can handle this in `MainActivity.onCreate().&#xD;&#xA;&#xD;&#xA;**MainActivity: onCreate()**:&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;        final Intent intent = getIntent();&#xD;&#xA;    	&#xD;&#xA;    	if (intent.hasExtra(SWITCH_TAB)) {&#xD;&#xA;            final int tab = intent.getExtras().getInt(SWITCH_TAB);&#xD;&#xA;&#xD;&#xA;            switchToTab(tab); // switch to tab2 in this example&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;- ***Both buttons case:***&#xD;&#xA;&#xD;&#xA;Should you wish to handle both buttons the same way (regardless this is a good idea or not, I just don't know), both solutions above can be implemented concurrently with no problem.&#xD;&#xA;&#xD;&#xA;*Side note*: to determine whether this is a good idea or not, this [official guide][1] may help. Especially the section ""*Navigating Up with the App Icon*"".&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://developer.android.com/guide/topics/ui/actionbar.html";;deleted 43 characters in body
70416850;25029917;840960;5;b61cc652-8795-4605-9d2c-6d7a4029cc3f;2014-07-30 09:37:23.0;"We have three cases here. The actual back button (regardless it is hardware or software), the Action Bar's parent (""Up"") button, and both buttons:&#xD;&#xA;&#xD;&#xA; - ***Back button case***:&#xD;&#xA;&#xD;&#xA;When you call the `SecondActivity`, use `startActivityForResult()` to keep `MainActivity` informed of the `SecondActivity`'s lifecycle. When ""back"" is pressed, capture this event in `MainActivity.onActivityResult()` and switch to the second tab:&#xD;&#xA;&#xD;&#xA;**MainActivity: where you currently start your activity**:&#xD;&#xA;&#xD;&#xA;    // Start SecondActivity that way. REQUEST_CODE_SECONDACTIVITY is a code you define to identify your request&#xD;&#xA;    startActivityForResult(new Intent(this, SecondActivity.class), REQUEST_CODE_SECONDACTIVITY);&#xD;&#xA;&#xD;&#xA;**MainActivity: onActivityResult()**:&#xD;&#xA;&#xD;&#xA;    // And this is how you handle its result    &#xD;&#xA;    @Override&#xD;&#xA;    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {&#xD;&#xA;        super.onActivityResult(requestCode, resultCode, intent);&#xD;&#xA;        &#xD;&#xA;        if (requestCode == REQUEST_CODE_SECONDACTIVITY && resultCode == RESULT_CANCEL) {&#xD;&#xA;        	switchToTab(2); // switch to tab2 &#xD;&#xA;        }&#xD;&#xA;        // else... other cases&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA; - ***Action Bar's ""Up"" button case***:&#xD;&#xA;&#xD;&#xA;If this behaviour has to be connected to the Action Bar's ""Up"" button instead of the back button, you have to override `getSupportParentActivityIntent()` or `getParentActivityIntent()` depending on whether you are using the support library or not.&#xD;&#xA;&#xD;&#xA;**SecondActivity: get[Support]ParentActivityIntent()**:&#xD;&#xA;&#xD;&#xA;	@Override &#xD;&#xA;    public Intent getSupportParentActivityIntent() { // getParentActivityIntent() if you are not using the Support Library&#xD;&#xA;    	final Bundle bundle = new Bundle();&#xD;&#xA;    	final Intent intent = new Intent(this, MainActivity.class);&#xD;&#xA;    	&#xD;&#xA;    	bundle.putString(SWITCH_TAB, TAB_SECOND); // Both constants are defined in your code&#xD;&#xA;    	intent.putExtras(bundle);&#xD;&#xA;&#xD;&#xA;        return intent;&#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;And then, you can handle this in `MainActivity.onCreate()`.&#xD;&#xA;&#xD;&#xA;**MainActivity: onCreate()**:&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;        final Intent intent = getIntent();&#xD;&#xA;    	&#xD;&#xA;    	if (intent.hasExtra(SWITCH_TAB)) {&#xD;&#xA;            final int tab = intent.getExtras().getInt(SWITCH_TAB);&#xD;&#xA;&#xD;&#xA;            switchToTab(tab); // switch to tab2 in this example&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;- ***Both buttons case:***&#xD;&#xA;&#xD;&#xA;Should you wish to handle both buttons the same way (regardless this is a good idea or not, I just don't know), both solutions above can be implemented concurrently with no problem.&#xD;&#xA;&#xD;&#xA;*Side note*: to determine whether this is a good idea or not, this [official guide][1] may help. Especially the section ""*Navigating Up with the App Icon*"".&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://developer.android.com/guide/topics/ui/actionbar.html";;added 2 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
82626403;28215393;1705598;2;e42d7d77-0425-47ee-bb84-c7fb36638021;2015-01-29 12:58:34.0;"I don't have concrete measures to compare, but:&#xD;&#xA;&#xD;&#xA;>""Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report:&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png";;
82626738;28215393;1705598;5;bcd328f6-3098-47f7-a0c7-14270eeee52a;2015-01-29 13:04:14.0;"I don't have concrete measures to compare, but:&#xD;&#xA;&#xD;&#xA;>"" Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png";;deleted 10 characters in body
82627299;28215393;1705598;5;6d83b872-0341-44d3-94fe-1e85040e7544;2015-01-29 13:12:15.0;"I don't have concrete measures to compare, but (in case of Go):&#xD;&#xA;&#xD;&#xA;> ""Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report of a real-world app used by millions:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;Also compared to App Engine Java: Java uses much more memory leaving much less to your app, and the startup of the JVM is considerable (even warmup requests don't make it negligible).&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png";;added 37 characters in body
82628642;28215393;1705598;5;1e642f71-9b58-40ba-b616-f3350f71a742;2015-01-29 13:31:05.0;"I don't have concrete measures to compare, but (in case of Go):&#xD;&#xA;&#xD;&#xA;> ""Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report of a real-world app used by millions:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;Also compared to App Engine Java: Java uses much more memory leaving much less to your app, and the startup of the JVM is considerable (even warmup requests don't make it negligible).&#xD;&#xA;&#xD;&#xA;Official time comparisions of Python, Java and Go&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The [**App Engine System Status**][4] can be considered official and a good comparision base.&#xD;&#xA;&#xD;&#xA;You can click on any cells belonging to a day and a specific language, and you get detailed statistics for latency, error rate, CPU usage/latency, static file serving latency and more.&#xD;&#xA;&#xD;&#xA;Analysing it on day January 27, 2015 here are the conclusions for [Go][5], [Java][6] and [Python][7]:&#xD;&#xA;&#xD;&#xA;* Dynamic latency is roughly the same for all&#xD;&#xA;* CPU latency (to compute 33rd Fibonacci number) is best for Java, then Go and slowest is Python.&#xD;&#xA;* Static file serving roughly the same but Go is fastest.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png&#xD;&#xA;  [4]: http://code.google.com/status/appengine&#xD;&#xA;  [5]: http://code.google.com/status/appengine/detail/serving-go/2015/01/27#ae-trust-detail-helloworld-get-go-latency&#xD;&#xA;  [6]: http://code.google.com/status/appengine/detail/serving-java/2015/01/27#ae-trust-detail-helloworld-get-java-latency&#xD;&#xA;  [7]: http://code.google.com/status/appengine/detail/serving/2015/01/27#ae-trust-detail-helloworld-get-latency";;added 392 characters in body
82629013;28215393;1705598;5;b2472c61-35c1-4490-a6a2-e5bb0406a229;2015-01-29 13:36:25.0;"I don't have concrete measures to compare, but (in case of Go):&#xD;&#xA;&#xD;&#xA;> ""Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report of a real-world app used by millions:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;Also compared to App Engine Java: Java uses much more memory leaving much less to your app, and the startup of the JVM is considerable (even warmup requests don't make it negligible).&#xD;&#xA;&#xD;&#xA;Found Official time comparisions of Python, Java and Go&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The [**App Engine System Status**][4] can be considered official and a good comparision base.&#xD;&#xA;&#xD;&#xA;You can click on any cells belonging to a day and a specific language, and you get detailed statistics for latency, error rate, CPU usage/latency, static file serving latency and more. These statistics are measured on an instance that is already up and ready to serve.&#xD;&#xA;&#xD;&#xA;Analysing it for the day of **January 27, 2015** here are the conclusions for [Go][5], [Java][6] and [Python][7]:&#xD;&#xA;&#xD;&#xA;* Dynamic latency is roughly the same for all&#xD;&#xA;* CPU latency (to compute 33rd Fibonacci number) is best for Java, then Go and slowest is Python.&#xD;&#xA;* Static file serving time is roughly the same but Go is fastest.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png&#xD;&#xA;  [4]: http://code.google.com/status/appengine&#xD;&#xA;  [5]: http://code.google.com/status/appengine/detail/serving-go/2015/01/27#ae-trust-detail-helloworld-get-go-latency&#xD;&#xA;  [6]: http://code.google.com/status/appengine/detail/serving-java/2015/01/27#ae-trust-detail-helloworld-get-java-latency&#xD;&#xA;  [7]: http://code.google.com/status/appengine/detail/serving/2015/01/27#ae-trust-detail-helloworld-get-latency";;added 392 characters in body
82629458;28215393;1705598;5;499eb0cf-548e-4052-9b43-dd052e4210e3;2015-01-29 13:42:12.0;"I don't have concrete measures to compare, but (in case of Go):&#xD;&#xA;&#xD;&#xA;> ""Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report of a real-world app used by millions:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;Also compared to App Engine Java: Java uses much more memory leaving much less to your app, and the startup of the JVM is considerable (even warmup requests don't make it negligible).&#xD;&#xA;&#xD;&#xA;Found Official time comparisions of Python, Java and Go&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The [**App Engine System Status**][4] can be considered official and a good comparision base.&#xD;&#xA;&#xD;&#xA;You can click on any cells belonging to a specific day and language, and you get detailed historical statistics for Static and Dynamic GET latency (both secure and unsecure), Error rates, CPU usage/latency. These statistics are measured on an instance that is already up and ready to serve.&#xD;&#xA;&#xD;&#xA;Analysing it for the day of **January 27, 2015** here are the conclusions for [Go][5], [Java][6] and [Python][7]:&#xD;&#xA;&#xD;&#xA;* Dynamic latency is roughly the same for all&#xD;&#xA;* CPU latency (to compute 33rd Fibonacci number) is best for Java, then Go and slowest is Python.&#xD;&#xA;* Static file serving time is roughly the same but Go is fastest.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png&#xD;&#xA;  [4]: http://code.google.com/status/appengine&#xD;&#xA;  [5]: http://code.google.com/status/appengine/detail/serving-go/2015/01/27#ae-trust-detail-helloworld-get-go-latency&#xD;&#xA;  [6]: http://code.google.com/status/appengine/detail/serving-java/2015/01/27#ae-trust-detail-helloworld-get-java-latency&#xD;&#xA;  [7]: http://code.google.com/status/appengine/detail/serving/2015/01/27#ae-trust-detail-helloworld-get-latency";;added 392 characters in body
82651482;28215393;1705598;5;8ab4b58f-8da0-492f-8dc6-c9d742a66bb6;2015-01-29 18:34:31.0;"App Engine doesn't have explicit limits or restrictions that would apply only when using a specific language. However the languages and their technologies might imply certain limitations, for example a Java Virtual Machine instance by itself requires significantly more memory and has significantly higher startup time (even when warmup requests are enabled) than starting the built-in web server of Go, so in case of a Java instance less memory will remain for the webapp itself to allocate and use (for a specific plan/type and instance).&#xD;&#xA;&#xD;&#xA;I don't have concrete measures to compare, but (in case of Go):&#xD;&#xA;&#xD;&#xA;> ""Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report of a real-world app used by millions:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;Found Official time comparisions of Python, Java and Go&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The [**App Engine System Status**][4] can be considered official and a good comparision base.&#xD;&#xA;&#xD;&#xA;You can click on any cells belonging to a specific day and language, and you get detailed historical statistics for Static and Dynamic GET latency (both secure and unsecure), Error rates, CPU usage/latency. These statistics are measured on an instance that is already up and ready to serve.&#xD;&#xA;&#xD;&#xA;Analysing it for the day of **January 27, 2015** here are the conclusions for [Go][5], [Java][6] and [Python][7]:&#xD;&#xA;&#xD;&#xA;* Dynamic latency is roughly the same for all&#xD;&#xA;* CPU latency (to compute 33rd Fibonacci number) is best for Java, then Go and slowest is Python.&#xD;&#xA;* Static file serving time is roughly the same but Go is fastest.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png&#xD;&#xA;  [4]: http://code.google.com/status/appengine&#xD;&#xA;  [5]: http://code.google.com/status/appengine/detail/serving-go/2015/01/27#ae-trust-detail-helloworld-get-go-latency&#xD;&#xA;  [6]: http://code.google.com/status/appengine/detail/serving-java/2015/01/27#ae-trust-detail-helloworld-get-java-latency&#xD;&#xA;  [7]: http://code.google.com/status/appengine/detail/serving/2015/01/27#ae-trust-detail-helloworld-get-latency";;added 343 characters in body
82651810;28215393;1705598;5;3b8b8b81-4c88-4bed-853a-6c5bcb1712cd;2015-01-29 18:39:41.0;"App Engine doesn't have explicit limits or restrictions that would apply only when using a specific language. However the languages and their technologies might imply certain limitations, for example a Java Virtual Machine instance by itself requires significantly more memory and has significantly higher startup time (even when warmup requests are enabled) than starting the built-in web server of Go, so in case of a Java instance less memory will remain for the webapp itself to allocate and use (for a specific plan/type and instance).&#xD;&#xA;&#xD;&#xA;I don't have concrete measures to compare, but (in case of Go):&#xD;&#xA;&#xD;&#xA;> ""Code is deployed in source form and compiled in the cloud... Go is the first true compiled language that runs on App Engine. Go on App Engine makes it possible to deploy efficient, CPU-intensive web applications"". ([source][1])&#xD;&#xA;&#xD;&#xA;If you think about it, other languages at App Engine are all interpreted (including Java which is byte code interpreted by a Virtual Machine) while Go is compiled into and runs as platform dependent _native code_. This should already tell something about performance.&#xD;&#xA;&#xD;&#xA;For a ""case-study"" check out the following blog post:&#xD;&#xA;&#xD;&#xA;[**From zero to Go: launching on the Google homepage in 24 hours**][2]&#xD;&#xA;&#xD;&#xA;This blog also contains some performance report of a real-world app used by millions:&#xD;&#xA;&#xD;&#xA;> ![dynamic requests][3]&#xD;&#xA;&#xD;&#xA;> This chart - taken directly from the App Engine dashboard - shows average request latency during launch. As you can see, even under load it never exceeds 60 ms, with a median latency of 32 milliseconds. This is wicked fast, considering that our request handler is doing image manipulation and encoding on the fly.&#xD;&#xA;&#xD;&#xA;App Engine uses the web server that is included in the Go standard library to serve your app, so that also means you can easily port a Go web app to App Engine, and that you know exactly what to expect from the web server serving your app on App Engine.&#xD;&#xA;&#xD;&#xA;Found Official time comparisions of Python, Java and Go&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;The [**App Engine System Status**][4] can be considered official and a good comparision base.&#xD;&#xA;&#xD;&#xA;You can click on any cells belonging to a specific day and language, and you get detailed historical statistics for Static and Dynamic GET latency (both secure and unsecure), Error rates, CPU usage/latency. These statistics are measured on an instance that is already up and ready to serve.&#xD;&#xA;&#xD;&#xA;Analysing it for the day of **January 27, 2015** here are the conclusions for [Go][5], [Java][6] and [Python][7]:&#xD;&#xA;&#xD;&#xA;* Dynamic latency is roughly the same for all&#xD;&#xA;* CPU latency (to compute the 33<sup>rd</sup> Fibonacci number) is best for Java, then Go and slowest is Python.&#xD;&#xA;* Static file serving time is roughly the same but Go is fastest.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://blog.golang.org/go-and-google-app-engine&#xD;&#xA;  [2]: http://blog.golang.org/from-zero-to-go-launching-on-google&#xD;&#xA;  [3]: http://i.stack.imgur.com/LWKR8.png&#xD;&#xA;  [4]: http://code.google.com/status/appengine&#xD;&#xA;  [5]: http://code.google.com/status/appengine/detail/serving-go/2015/01/27#ae-trust-detail-helloworld-get-go-latency&#xD;&#xA;  [6]: http://code.google.com/status/appengine/detail/serving-java/2015/01/27#ae-trust-detail-helloworld-get-java-latency&#xD;&#xA;  [7]: http://code.google.com/status/appengine/detail/serving/2015/01/27#ae-trust-detail-helloworld-get-latency";;added 343 characters in body

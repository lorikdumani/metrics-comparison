Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
38917813;15937498;37213;2;678f8b82-1d0b-49a7-90af-b17ee26ce4d9;2013-04-10 22:18:29.0;"Mocking a database to test a DAO makes no sense to me at all.  What are you testing?  The database.  Why eliminate it?&#xD;&#xA;&#xD;&#xA;Mocking the database makes sense once you have all your DAO tests passing and it's time to test the service that users it to fulfill a unit of work.  You've already tested the DAO and the database, and your service unit test need not be an integration test.  By all means mock away in that case.&#xD;&#xA;";;
38919131;15937498;37213;5;77192752-e2be-479a-b6da-76def365be4a;2013-04-10 23:00:44.0;"Mocking a database to test a DAO makes no sense to me at all.  What are you testing?  The database.  Why eliminate it?&#xD;&#xA;&#xD;&#xA;Mocking the database makes sense once you have all your DAO tests passing and it's time to test the service that users it to fulfill a unit of work.  You've already tested the DAO and the database, and your service unit test need not be an integration test.  By all means mock away in that case.&#xD;&#xA;&#xD;&#xA;I don't know a lot about what you're mocking, but when I mock it's for interfaces of my making.  The mock provides a stand-in implementation for the interface-typed reference that my client/test is using.  &#xD;&#xA;&#xD;&#xA;If you're trying to mock a concrete class I'd recommend wrapping that adapter inside an interface-based implementation.  It'll be a better abstraction and you'll have an easier time mocking your interface.&#xD;&#xA;&#xD;&#xA;";;added 421 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
11875077;5535141;342743;2;7d04b1eb-e744-4a60-a804-441df9cd151f;2011-04-04 06:14:07.0;"I want to use this example   http://www.devx.com/getHelpOn/10MinuteSolution/20425&#xD;&#xA;but there is a problem, I dont know how to write action listener for my buttons, I mean I know but where ?&#xD;&#xA;&#xD;&#xA;please advice me.&#xD;&#xA;I place above example here.&#xD;&#xA;&#xD;&#xA;        import com.sun.java.swing.*;&#xD;&#xA;    import com.sun.java.swing.table.*;&#xD;&#xA;    import java.awt.*;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    &#xD;&#xA;    class JTableButtonRenderer implements TableCellRenderer {&#xD;&#xA;      private TableCellRenderer __defaultRenderer;&#xD;&#xA;    &#xD;&#xA;      public JTableButtonRenderer(TableCellRenderer renderer) {&#xD;&#xA;        __defaultRenderer = renderer;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public Component getTableCellRendererComponent(JTable table, Object value,&#xD;&#xA;    						 boolean isSelected,&#xD;&#xA;    						 boolean hasFocus,&#xD;&#xA;    						 int row, int column)&#xD;&#xA;      {&#xD;&#xA;        if(value instanceof Component)&#xD;&#xA;          return (Component)value;&#xD;&#xA;        return __defaultRenderer.getTableCellRendererComponent(&#xD;&#xA;    	   table, value, isSelected, hasFocus, row, column);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    class JTableButtonModel extends AbstractTableModel {&#xD;&#xA;      private Object[][] __rows = {&#xD;&#xA;          { ""One"", new JButton(""Button One"") },&#xD;&#xA;          { ""Two"", new JButton(""Button Two"") },&#xD;&#xA;          { ""Three"", new JButton(""Button Three"") },&#xD;&#xA;          { ""Four"", new JButton(""Button Four"") }&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;      private String[] __columns = { ""Numbers"", ""Buttons"" };&#xD;&#xA;    &#xD;&#xA;      public String getColumnName(int column) { &#xD;&#xA;        return __columns[column];&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public int getRowCount() {&#xD;&#xA;        return __rows.length;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public int getColumnCount() {&#xD;&#xA;        return __columns.length;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public Object getValueAt(int row, int column) { &#xD;&#xA;          return __rows[row][column];&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public boolean isCellEditable(int row, int column) {&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public Class getColumnClass(int column) {&#xD;&#xA;        return getValueAt(0, column).getClass();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    class JTableButtonMouseListener implements MouseListener {&#xD;&#xA;      private JTable __table;&#xD;&#xA;    &#xD;&#xA;      private void __forwardEventToButton(MouseEvent e) {&#xD;&#xA;        TableColumnModel columnModel = __table.getColumnModel();&#xD;&#xA;        int column = columnModel.getColumnIndexAtX(e.getX());&#xD;&#xA;        int row    = e.getY() / __table.getRowHeight();&#xD;&#xA;        Object value;&#xD;&#xA;        JButton button;&#xD;&#xA;        MouseEvent buttonEvent;&#xD;&#xA;    &#xD;&#xA;        if(row >= __table.getRowCount() || row < 0 ||&#xD;&#xA;           column >= __table.getColumnCount() || column < 0)&#xD;&#xA;          return;&#xD;&#xA;    &#xD;&#xA;        value = __table.getValueAt(row, column);&#xD;&#xA;    &#xD;&#xA;        if(!(value instanceof JButton))&#xD;&#xA;          return;&#xD;&#xA;    &#xD;&#xA;        button = (JButton)value;&#xD;&#xA;    &#xD;&#xA;        buttonEvent =&#xD;&#xA;          (MouseEvent)SwingUtilities.convertMouseEvent(__table, e, button);&#xD;&#xA;        button.dispatchEvent(buttonEvent);&#xD;&#xA;        // This is necessary so that when a button is pressed and released&#xD;&#xA;        // it gets rendered properly.  Otherwise, the button may still appear&#xD;&#xA;        // pressed down when it has been released.&#xD;&#xA;        __table.repaint();&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public JTableButtonMouseListener(JTable table) {&#xD;&#xA;        __table = table;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseClicked(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseEntered(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseExited(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mousePressed(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseReleased(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public final class JTableButton extends JFrame {&#xD;&#xA;      private JTable __table;&#xD;&#xA;      private JScrollPane __scrollPane;&#xD;&#xA;    &#xD;&#xA;      public JTableButton() {&#xD;&#xA;        super(""JTableButton Demo"");&#xD;&#xA;        TableCellRenderer defaultRenderer;&#xD;&#xA;    &#xD;&#xA;        __table = new JTable(new JTableButtonModel());&#xD;&#xA;        defaultRenderer = __table.getDefaultRenderer(JButton.class);&#xD;&#xA;        __table.setDefaultRenderer(JButton.class,&#xD;&#xA;    			       new JTableButtonRenderer(defaultRenderer));&#xD;&#xA;        __table.setPreferredScrollableViewportSize(new Dimension(400, 200));&#xD;&#xA;        __table.addMouseListener(new JTableButtonMouseListener(__table));&#xD;&#xA;    &#xD;&#xA;        __scrollPane = new JScrollPane(__table);&#xD;&#xA;        setContentPane(__scrollPane);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public static void main(String[] args) {&#xD;&#xA;        Frame frame;&#xD;&#xA;        WindowListener exitListener;&#xD;&#xA;    &#xD;&#xA;        exitListener = new WindowAdapter() {&#xD;&#xA;          public void windowClosing(WindowEvent e) {&#xD;&#xA;    	Window window = e.getWindow();&#xD;&#xA;    	window.setVisible(false);&#xD;&#xA;    	window.dispose();&#xD;&#xA;    	System.exit(0);&#xD;&#xA;          }&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        frame = new JTableButton();&#xD;&#xA;        frame.addWindowListener(exitListener);&#xD;&#xA;        frame.pack();&#xD;&#xA;        frame.setVisible(true);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;";;
11875175;5535141;342743;5;1dc7a156-53a5-4485-918c-99accf8bd121;2011-04-04 06:20:29.0;"I want to use this example   http://www.devx.com/getHelpOn/10MinuteSolution/20425&#xD;&#xA;but there is a problem, I dont know how to write action listener for my buttons, I mean I know but where ?&#xD;&#xA;&#xD;&#xA;please advice me.&#xD;&#xA;I place above example here.&#xD;&#xA;&#xD;&#xA;If you have any better example please inform me also...&#xD;&#xA;&#xD;&#xA;        import com.sun.java.swing.*;&#xD;&#xA;    import com.sun.java.swing.table.*;&#xD;&#xA;    import java.awt.*;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    &#xD;&#xA;    class JTableButtonRenderer implements TableCellRenderer {&#xD;&#xA;      private TableCellRenderer __defaultRenderer;&#xD;&#xA;    &#xD;&#xA;      public JTableButtonRenderer(TableCellRenderer renderer) {&#xD;&#xA;        __defaultRenderer = renderer;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public Component getTableCellRendererComponent(JTable table, Object value,&#xD;&#xA;    						 boolean isSelected,&#xD;&#xA;    						 boolean hasFocus,&#xD;&#xA;    						 int row, int column)&#xD;&#xA;      {&#xD;&#xA;        if(value instanceof Component)&#xD;&#xA;          return (Component)value;&#xD;&#xA;        return __defaultRenderer.getTableCellRendererComponent(&#xD;&#xA;    	   table, value, isSelected, hasFocus, row, column);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    class JTableButtonModel extends AbstractTableModel {&#xD;&#xA;      private Object[][] __rows = {&#xD;&#xA;          { ""One"", new JButton(""Button One"") },&#xD;&#xA;          { ""Two"", new JButton(""Button Two"") },&#xD;&#xA;          { ""Three"", new JButton(""Button Three"") },&#xD;&#xA;          { ""Four"", new JButton(""Button Four"") }&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;      private String[] __columns = { ""Numbers"", ""Buttons"" };&#xD;&#xA;    &#xD;&#xA;      public String getColumnName(int column) { &#xD;&#xA;        return __columns[column];&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public int getRowCount() {&#xD;&#xA;        return __rows.length;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public int getColumnCount() {&#xD;&#xA;        return __columns.length;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public Object getValueAt(int row, int column) { &#xD;&#xA;          return __rows[row][column];&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public boolean isCellEditable(int row, int column) {&#xD;&#xA;        return false;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public Class getColumnClass(int column) {&#xD;&#xA;        return getValueAt(0, column).getClass();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    class JTableButtonMouseListener implements MouseListener {&#xD;&#xA;      private JTable __table;&#xD;&#xA;    &#xD;&#xA;      private void __forwardEventToButton(MouseEvent e) {&#xD;&#xA;        TableColumnModel columnModel = __table.getColumnModel();&#xD;&#xA;        int column = columnModel.getColumnIndexAtX(e.getX());&#xD;&#xA;        int row    = e.getY() / __table.getRowHeight();&#xD;&#xA;        Object value;&#xD;&#xA;        JButton button;&#xD;&#xA;        MouseEvent buttonEvent;&#xD;&#xA;    &#xD;&#xA;        if(row >= __table.getRowCount() || row < 0 ||&#xD;&#xA;           column >= __table.getColumnCount() || column < 0)&#xD;&#xA;          return;&#xD;&#xA;    &#xD;&#xA;        value = __table.getValueAt(row, column);&#xD;&#xA;    &#xD;&#xA;        if(!(value instanceof JButton))&#xD;&#xA;          return;&#xD;&#xA;    &#xD;&#xA;        button = (JButton)value;&#xD;&#xA;    &#xD;&#xA;        buttonEvent =&#xD;&#xA;          (MouseEvent)SwingUtilities.convertMouseEvent(__table, e, button);&#xD;&#xA;        button.dispatchEvent(buttonEvent);&#xD;&#xA;        // This is necessary so that when a button is pressed and released&#xD;&#xA;        // it gets rendered properly.  Otherwise, the button may still appear&#xD;&#xA;        // pressed down when it has been released.&#xD;&#xA;        __table.repaint();&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public JTableButtonMouseListener(JTable table) {&#xD;&#xA;        __table = table;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseClicked(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseEntered(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseExited(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mousePressed(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public void mouseReleased(MouseEvent e) {&#xD;&#xA;        __forwardEventToButton(e);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public final class JTableButton extends JFrame {&#xD;&#xA;      private JTable __table;&#xD;&#xA;      private JScrollPane __scrollPane;&#xD;&#xA;    &#xD;&#xA;      public JTableButton() {&#xD;&#xA;        super(""JTableButton Demo"");&#xD;&#xA;        TableCellRenderer defaultRenderer;&#xD;&#xA;    &#xD;&#xA;        __table = new JTable(new JTableButtonModel());&#xD;&#xA;        defaultRenderer = __table.getDefaultRenderer(JButton.class);&#xD;&#xA;        __table.setDefaultRenderer(JButton.class,&#xD;&#xA;    			       new JTableButtonRenderer(defaultRenderer));&#xD;&#xA;        __table.setPreferredScrollableViewportSize(new Dimension(400, 200));&#xD;&#xA;        __table.addMouseListener(new JTableButtonMouseListener(__table));&#xD;&#xA;    &#xD;&#xA;        __scrollPane = new JScrollPane(__table);&#xD;&#xA;        setContentPane(__scrollPane);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      public static void main(String[] args) {&#xD;&#xA;        Frame frame;&#xD;&#xA;        WindowListener exitListener;&#xD;&#xA;    &#xD;&#xA;        exitListener = new WindowAdapter() {&#xD;&#xA;          public void windowClosing(WindowEvent e) {&#xD;&#xA;    	Window window = e.getWindow();&#xD;&#xA;    	window.setVisible(false);&#xD;&#xA;    	window.dispose();&#xD;&#xA;    	System.exit(0);&#xD;&#xA;          }&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        frame = new JTableButton();&#xD;&#xA;        frame.addWindowListener(exitListener);&#xD;&#xA;        frame.pack();&#xD;&#xA;        frame.setVisible(true);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;";;added 59 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
8462513;4025018;169346;2;6ce18259-7d9b-432a-ba82-4dcbb5c64b16;2010-10-26 15:05:01.0;"Almost everybody so far has confused order of evaluation with operator precedence.  In Java the precedence rules make the expression equivalent to the following:&#xD;&#xA;&#xD;&#xA;    a + (b  * c) / ( d - e )&#xD;&#xA;&#xD;&#xA;because `*` and `/` have equal precedence and are left associative.&#xD;&#xA;&#xD;&#xA;The order of evaluation is strictly defined as [left hand operand first, then right, then operation][1] (except for || and &&).  So the order of evaluation is:&#xD;&#xA;&#xD;&#xA;      a&#xD;&#xA;          b&#xD;&#xA;          c&#xD;&#xA;        *&#xD;&#xA;          d&#xD;&#xA;          e&#xD;&#xA;        -&#xD;&#xA;      /&#xD;&#xA;    +&#xD;&#xA;&#xD;&#xA;order of evaluation goes down the page.  Indentation reflects the structure of the syntax tree&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#4779";;
8463104;4025018;169346;5;db617a82-2feb-4f04-99a8-efa40814106f;2010-10-26 15:35:28.0;"Almost everybody so far has confused order of evaluation with operator precedence.  In Java the precedence rules make the expression equivalent to the following:&#xD;&#xA;&#xD;&#xA;    a + (b  * c) / ( d - e )&#xD;&#xA;&#xD;&#xA;because `*` and `/` have equal precedence and are left associative.&#xD;&#xA;&#xD;&#xA;The order of evaluation is strictly defined as [left hand operand first, then right, then operation][1] (except for || and &&).  So the order of evaluation is:&#xD;&#xA;&#xD;&#xA;      a&#xD;&#xA;          b&#xD;&#xA;          c&#xD;&#xA;        *&#xD;&#xA;          d&#xD;&#xA;          e&#xD;&#xA;        -&#xD;&#xA;      /&#xD;&#xA;    +&#xD;&#xA;&#xD;&#xA;order of evaluation goes down the page.  Indentation reflects the structure of the syntax tree&#xD;&#xA;&#xD;&#xA;**Edit**&#xD;&#xA;&#xD;&#xA;In response to Grodriguez's comments.  The following program:&#xD;&#xA;&#xD;&#xA;    public class Precedence &#xD;&#xA;    {&#xD;&#xA;        private static int a()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""a"");&#xD;&#xA;            return 1;&#xD;&#xA;        }	&#xD;&#xA;        private static int b()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""b"");&#xD;&#xA;            return 2;&#xD;&#xA;        }&#xD;&#xA;        private static int c()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""c"");&#xD;&#xA;            return 3;&#xD;&#xA;        }&#xD;&#xA;        private static int d()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""d"");&#xD;&#xA;            return 4;&#xD;&#xA;        }&#xD;&#xA;        private static int e()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""e"");&#xD;&#xA;            return 5;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public static void main(String[] args) &#xD;&#xA;        {&#xD;&#xA;            int x = a() + b() * c() / (d() - e());&#xD;&#xA;            System.out.println(x);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Produces the output&#xD;&#xA;&#xD;&#xA;    a&#xD;&#xA;    b&#xD;&#xA;    c&#xD;&#xA;    d&#xD;&#xA;    e&#xD;&#xA;    -5&#xD;&#xA;&#xD;&#xA;which clearly shows the multiplication is performed *before* the subtraction.  So I'd be grateful if the erroneous down vote were removed.&#xD;&#xA;&#xD;&#xA;  [1]: http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#4779&#xD;&#xA;";;"added 1010 characters in body; added 61 characters in body"
8463635;4025018;169346;5;48393822-a8ff-4f32-9e58-34cb50c7c18f;2010-10-26 16:05:19.0;"Almost everybody so far has confused order of evaluation with operator precedence.  In Java the precedence rules make the expression equivalent to the following:&#xD;&#xA;&#xD;&#xA;    a + (b  * c) / ( d - e )&#xD;&#xA;&#xD;&#xA;because `*` and `/` have equal precedence and are left associative.&#xD;&#xA;&#xD;&#xA;The order of evaluation is strictly defined as [left hand operand first, then right, then operation][1] (except for || and &&).  So the order of evaluation is:&#xD;&#xA;&#xD;&#xA;      a&#xD;&#xA;          b&#xD;&#xA;          c&#xD;&#xA;        *&#xD;&#xA;          d&#xD;&#xA;          e&#xD;&#xA;        -&#xD;&#xA;      /&#xD;&#xA;    +&#xD;&#xA;&#xD;&#xA;order of evaluation goes down the page.  Indentation reflects the structure of the syntax tree&#xD;&#xA;&#xD;&#xA;**Edit**&#xD;&#xA;&#xD;&#xA;In response to Grodriguez's comments.  The following program:&#xD;&#xA;&#xD;&#xA;    public class Precedence &#xD;&#xA;    {&#xD;&#xA;        private static int a()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""a"");&#xD;&#xA;            return 1;&#xD;&#xA;        }	&#xD;&#xA;        private static int b()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""b"");&#xD;&#xA;            return 2;&#xD;&#xA;        }&#xD;&#xA;        private static int c()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""c"");&#xD;&#xA;            return 3;&#xD;&#xA;        }&#xD;&#xA;        private static int d()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""d"");&#xD;&#xA;            return 4;&#xD;&#xA;        }&#xD;&#xA;        private static int e()&#xD;&#xA;        {&#xD;&#xA;            System.out.println(""e"");&#xD;&#xA;            return 5;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public static void main(String[] args) &#xD;&#xA;        {&#xD;&#xA;            int x = a() + b() * c() / (d() - e());&#xD;&#xA;            System.out.println(x);&#xD;&#xA;        } &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Produces the output&#xD;&#xA;&#xD;&#xA;    a&#xD;&#xA;    b&#xD;&#xA;    c&#xD;&#xA;    d&#xD;&#xA;    e&#xD;&#xA;    -5&#xD;&#xA;&#xD;&#xA;which clearly shows the multiplication is performed *before* the subtraction. &#xD;&#xA;&#xD;&#xA;  [1]: http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#4779&#xD;&#xA;";;deleted 60 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
21193392;9332340;334300;2;3cac7d12-c8ec-4766-bbc9-2b5dbbbe491a;2012-02-17 16:56:53.0;"I am not sure if there is pattern, from my experience I see DTO pattern is used largely when you have some thing transferred to client. What your service normally does it process the DTO and pass it on to DAO layer. In DAO layer you do all that transformation from DTO to your JPA entities.&#xD;&#xA;&#xD;&#xA;Client-> Service Interface(business logic)->DAO Classes(has persistence logic)&#xD;&#xA;&#xD;&#xA;DTO are constructed in client and service layers reads them and applies business logic and then pass it onto DAO layer.&#xD;&#xA;&#xD;&#xA;As a good practice, never make your client (swing client) aware of the JPA entities you have written. Even the DAO class, it is generally considered as poor design. ";;
21193821;9332340;334300;5;36c0677c-4986-487b-8d55-64e0d8420f11;2012-02-17 17:07:52.0;"I am not sure if there is pattern, from my experience I see DTO pattern is used largely when you have some thing transferred to client. What your service normally does it process the DTO and pass it on to DAO layer. In DAO layer you do all that transformation from DTO to your JPA entities.&#xD;&#xA;&#xD;&#xA;Client-> Service Interface(business logic)->DAO Classes(has persistence logic)&#xD;&#xA;&#xD;&#xA;DTO are constructed in client and service layers reads them and applies business logic and then pass it onto DAO layer.&#xD;&#xA;&#xD;&#xA;";;deleted 165 characters in body

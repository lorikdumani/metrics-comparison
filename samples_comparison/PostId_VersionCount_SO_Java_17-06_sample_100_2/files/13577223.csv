Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
32366568;13577223;1440565;2;87643305-c4b1-404c-a7b4-92539c0182bc;2012-11-27 04:03:16.0;Java references are very similar to C++ references. Assigning one reference to another does *not* create a new object. In Java, new objects are created only when you explicitly use the `new` operator.;;
32366679;13577223;1440565;5;16da55b1-5c4f-4d57-ae66-1460fc29529c;2012-11-27 04:08:59.0;"Java references are very similar to C++ references. Assigning one reference to another does *not* create a new object. In Java, new objects are created only when you explicitly use the `new` operator.&#xD;&#xA;&#xD;&#xA;**Addendum:**&#xD;&#xA;&#xD;&#xA;For completeness, I should mention that String objects follow their own rules. In particular, a String constant create *might* create a new object without an explicit use of `new`. Also, auto-(un)boxing, is a more advanced topic where objects are created without explicitly using `new`. However, the main point in both cases remains: assigning one reference to another does *not* create a new object. Both references refer to the same object.";;clarification
32474368;13577223;1440565;5;e305833a-5f03-400b-8427-33dc794b572a;2012-11-29 00:11:58.0;"Java references are very similar to C++ references. Assigning one reference to another does *not* create a new object. In Java, new objects are created only when you explicitly use the `new` operator.&#xD;&#xA;&#xD;&#xA;**Addendum:**&#xD;&#xA;&#xD;&#xA;For completeness, I should mention that String objects follow their own rules. In particular, a String constant creates an object at compile time without an explicit use of `new`. Also, auto-(un)boxing, is a more advanced topic where objects are created without explicitly using `new`. However, the main point in both cases remains: assigning one reference to another does *not* create a new object. Both references refer to the same object.";;clarification

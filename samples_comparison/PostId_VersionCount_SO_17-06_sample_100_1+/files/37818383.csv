Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
120423368;37818383;3438405;2;1dd321ed-e0d6-4076-adfe-669554d8958c;2016-06-14 17:19:05.0;"Could be useful to see some html. Also, no need to do `$(document).find()`, as you can replace it by `$('tr.order-item')` But the general approach would be to listen for the `keyup` event inside any input fields, and then update the values:&#xD;&#xA;&#xD;&#xA;    $('tr.order-item').each ->&#xD;&#xA;      that = $(this)&#xD;&#xA;      that.find('input').on 'keyup', ->&#xD;&#xA;        q = that.find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = that.find('.price').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = that.find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        that.find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;&#xD;&#xA;This is just a basic example to give you an idea. If you provide a fiddle, with some html we could have a deeper look.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.&#xD;&#xA;&#xD;&#xA;    <button class=""update-table"">Update</button>&#xD;&#xA;&#xD;&#xA;    $('.update-table').on 'click', ->&#xD;&#xA;      $('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;";;
120424907;37818383;3438405;5;493ace5c-3bda-424c-83cd-7585e40babc2;2016-06-14 17:43:30.0;"Could be useful to see some html. Also, no need to do `$(document).find()`, as you can replace it by `$('tr.order-item')` But the general approach would be to listen for the `keyup` event inside any input fields, and then update the values:&#xD;&#xA;&#xD;&#xA;    $('tr.order-item input').on 'keyup', ->&#xD;&#xA;      $('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;&#xD;&#xA;This is just a basic example to give you an idea. If you provide a fiddle, with some html we could have a deeper look.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.&#xD;&#xA;&#xD;&#xA;    <button class=""update-table"">Update</button>&#xD;&#xA;&#xD;&#xA;    $('.update-table').on 'click', ->&#xD;&#xA;      $('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())";;deleted 6 characters in body
120425562;37818383;3438405;5;f98315b5-70df-42ee-bc89-1b9d21f3f489;2016-06-14 17:54:06.0;"Could be useful to see some html. Also, no need to do `$(document).find()`, as you can replace it by `$('tr.order-item')` But the general approach would be to listen for the `keyup` event inside any input fields, and then update the values:&#xD;&#xA;&#xD;&#xA;    $('tr.order-item input').on 'keyup', ->&#xD;&#xA;      $('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;&#xD;&#xA;This is just a basic example to give you an idea. If you provide a fiddle, with some html we could have a deeper look.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.&#xD;&#xA;&#xD;&#xA;    <button class=""update-table"">Update</button>&#xD;&#xA;&#xD;&#xA;    $('.update-table').on 'click', ->&#xD;&#xA;      $('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;&#xD;&#xA;**After your form update and last comment**&#xD;&#xA;&#xD;&#xA;If you think parseFloat breaks your code, render the actual price in a hidden div, so you can drop the replace in your js:&#xD;&#xA;&#xD;&#xA;    <h5 class=""text-right""><span class=""hidden price_value""><%= f.object.unit_price %></span><span style=""color: green"" class=""price""><%= number_to_currency f.object.unit_price %></span></h5>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    p = $(this).find('.price_value').text()&#xD;&#xA;&#xD;&#xA;This does certainly not dry up your code, but might work for what you are working with at the moment.";;added 522 characters in body
120426349;37818383;3438405;5;9468e149-e284-48f6-b559-8c0aa7b8c8cd;2016-06-14 18:06:34.0;"Could be useful to see some html. Also, no need to do `$(document).find()`, as you can replace it by `$('tr.order-item')` But the general approach would be to listen for the `keyup` event inside any input fields, and then update the values:&#xD;&#xA; &#xD;&#xA;    updateOrderItems = ->&#xD;&#xA;      $('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price_value').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;    &#xD;&#xA;    updateOrderItems()&#xD;&#xA;    $('tr.order-item input').on 'keyup', ->&#xD;&#xA;      updateOrderItems()&#xD;&#xA;&#xD;&#xA;**To run your code on page load as well as on keyup**&#xD;&#xA;&#xD;&#xA;Declare a function, run it on page load, as well as on your `keyup` event.&#xD;&#xA;&#xD;&#xA;This is just a basic example to give you an idea. If you provide a fiddle, with some html we could have a deeper look.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.&#xD;&#xA;&#xD;&#xA;    <button class=""update-table"">Update</button>&#xD;&#xA;&#xD;&#xA;    $('.update-table').on 'click', ->&#xD;&#xA;      updateOrderItems()&#xD;&#xA;&#xD;&#xA;**After your form update and last comment**&#xD;&#xA;&#xD;&#xA;If you think parseFloat breaks your code, render the actual price in a hidden div, so you can drop the replace in your js:&#xD;&#xA;&#xD;&#xA;    <h5 class=""text-right""><span class=""hidden price_value""><%= f.object.unit_price %></span><span style=""color: green"" class=""price""><%= number_to_currency f.object.unit_price %></span></h5>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    p = $(this).find('.price_value').text()&#xD;&#xA;&#xD;&#xA;This does certainly not dry up your code, but might work for what you are working with at the moment.";;deleted 222 characters in body
120427413;37818383;3438405;5;26e767f1-c9c9-446a-9664-84710f9ef2c6;2016-06-14 18:23:14.0;"Could be useful to see some html. Also, no need to do `$(document).find()`, as you can replace it by `$('tr.order-item')` But the general approach would be to listen for the `keyup` event inside any input fields, and then update the values:&#xD;&#xA; &#xD;&#xA;    updateOrderItems = ->&#xD;&#xA;      $(document).find('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price_value').text().replace(""$"", """")&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;    &#xD;&#xA;    updateOrderItems()&#xD;&#xA;    $(document).on 'keyup', 'tr.order-item input', ->&#xD;&#xA;      updateOrderItems()&#xD;&#xA;&#xD;&#xA;Passing the selector to `.on()` will fix your ajax issue.&#xD;&#xA;&#xD;&#xA;**To run your code on page load as well as on keyup**&#xD;&#xA;&#xD;&#xA;Declare a function, run it on page load, as well as on your `keyup` event.&#xD;&#xA;&#xD;&#xA;This is just a basic example to give you an idea. If you provide a fiddle, with some html we could have a deeper look.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.&#xD;&#xA;&#xD;&#xA;    <button class=""update-table"">Update</button>&#xD;&#xA;&#xD;&#xA;    $('.update-table').on 'click', ->&#xD;&#xA;      updateOrderItems()&#xD;&#xA;&#xD;&#xA;**After your form update and last comment**&#xD;&#xA;&#xD;&#xA;If you think parseFloat breaks your code, render the actual price in a hidden div, so you can drop the replace in your js:&#xD;&#xA;&#xD;&#xA;    <h5 class=""text-right""><span class=""hidden price_value""><%= f.object.unit_price %></span><span style=""color: green"" class=""price""><%= number_to_currency f.object.unit_price %></span></h5>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    p = $(this).find('.price_value').text()&#xD;&#xA;&#xD;&#xA;This does certainly not dry up your code, but might work for what you are working with at the moment.&#xD;&#xA;&#xD;&#xA;*temp please delete some your comments as it's getting crowded down there ;)";;added 86 characters in body
120433277;37818383;3438405;5;50405d77-64d5-410f-8c6f-beff99319472;2016-06-14 19:54:02.0;"An approach would be to listen for the `keyup` event in any input field and then update the values:&#xD;&#xA; &#xD;&#xA;    updateOrderItems = ->&#xD;&#xA;      $(document).find('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price_value').text()&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;    &#xD;&#xA;    updateOrderItems()&#xD;&#xA;    $(document).on 'keyup', 'tr.order-item input', ->&#xD;&#xA;      updateOrderItems()&#xD;&#xA;&#xD;&#xA;Passing the selector to `.on()` will fix your ajax issue.&#xD;&#xA;&#xD;&#xA;**To run your code on page load as well as on keyup**&#xD;&#xA;&#xD;&#xA;Declare a function, run it on page load, as well as on your `keyup` event.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.&#xD;&#xA;&#xD;&#xA;    <button class=""update-table"">Update</button>&#xD;&#xA;&#xD;&#xA;    $('.update-table').on 'click', ->&#xD;&#xA;      updateOrderItems()&#xD;&#xA;";;deleted 865 characters in body
120454287;37818383;3438405;5;dc7b32d5-b58f-47e2-9f22-07b05671de62;2016-06-15 04:54:03.0;"An approach would be to listen for the `keyup` event in any input field and then update the values:&#xD;&#xA; &#xD;&#xA;    updateOrderItems = ->&#xD;&#xA;      $(document).find('tr.order-item').each ->&#xD;&#xA;        q = $(this).find('.quantity_input').val()&#xD;&#xA;        quantity = parseInt(q)&#xD;&#xA;        p = $(this).find('.price_value').text()&#xD;&#xA;        price = parseFloat(p)&#xD;&#xA;        d = $(this).find('.discount_input').val()&#xD;&#xA;        discount = parseFloat(d)&#xD;&#xA;        total_price = price * quantity - discount&#xD;&#xA;        $(this).find('.item-total').text(""$""+ parseFloat(total_price).toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, ""$1,"").toString())&#xD;&#xA;    &#xD;&#xA;    updateOrderItems()&#xD;&#xA;    $(document).on 'keyup', 'tr.order-item input', updateOrderItems&#xD;&#xA;&#xD;&#xA;Passing the selector to `.on()` will fix your ajax issue.&#xD;&#xA;&#xD;&#xA;**To run your code on page load as well as on keyup**&#xD;&#xA;&#xD;&#xA;Declare a function, run it on page load, as well as on your `keyup` event.&#xD;&#xA;&#xD;&#xA;As an alternative you might want to give your users the possibility to update the information that is displayed, by triggering your code upon a `click` on a button.";;deleted 131 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
84621725;28735183;1318946;2;28b52c28-5016-41c5-8e49-843e823c3f47;2015-02-26 05:34:47.0;"I found solution like `onClick` of `ViewHolder`, See `ProductRowHolder` class for extending `RecyclerView.ViewHolder` and implementing `View.OnClickListener` so `onClick()` method will use for what you want to do on click of Row.&#xD;&#xA;&#xD;&#xA;        /***&#xD;&#xA;         * ADAPTER for Product to binding rows in List&#xD;&#xA;         */&#xD;&#xA;        private class ProductAdapter extends RecyclerView.Adapter<ProductAdapter.ProductRowHolder> {&#xD;&#xA;    &#xD;&#xA;            private List<Product> productList;&#xD;&#xA;    &#xD;&#xA;            private Context mContext;&#xD;&#xA;    &#xD;&#xA;            public ProductAdapter(Context context, List<Product> feedItemList) {&#xD;&#xA;                this.productList = feedItemList;&#xD;&#xA;                this.mContext = context;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public ProductRowHolder onCreateViewHolder(ViewGroup viewGroup, int i) {&#xD;&#xA;                View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.product_row_layout_grid, null);&#xD;&#xA;                ProductRowHolder mh = new ProductRowHolder(v);&#xD;&#xA;                return mh;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public void onBindViewHolder(ProductRowHolder  productRowHolder, int i) {&#xD;&#xA;                //Assigning Values to View&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public int getItemCount() {&#xD;&#xA;                return (null != productList ? productList.size() : 0);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public class ProductRowHolder extends RecyclerView.ViewHolder implements View.OnClickListener {&#xD;&#xA;                /**&#xD;&#xA;                 * Your Views Variables &#xD;&#xA;                 */&#xD;&#xA;               public ProductRowHolder(View view) {&#xD;&#xA;                    super(view);&#xD;&#xA;                    &#xD;&#xA;                    // SETTING UP ONCLICK on ROW&#xD;&#xA;                    view.setOnClickListener(this);&#xD;&#xA;                    &#xD;&#xA;                    //Finding Views by ID&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public void onClick(View view) {&#xD;&#xA;                    Product product = productList.get(getPosition());&#xD;&#xA;                    Intent intent = new Intent(ProductListActivity.this, ProductDetailsActivity.class);&#xD;&#xA;                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&#xD;&#xA;                    intent.putExtra(Fields.TABLE_PRODUCT, new Gson().toJson(product));&#xD;&#xA;                    startActivity(intent);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }";;
100335211;28735183;1318946;5;749b402b-9c3b-4516-906e-c93b69b651ed;2015-09-24 05:24:59.0;"I found solution with the starting of activity I have set **`LinearLayoutManager`** like:&#xD;&#xA;&#xD;&#xA;    mLayoutManager = new LinearLayoutManager(this);&#xD;&#xA;    mProductListRecyclerView.setLayoutManager(mLayoutManager);&#xD;&#xA;&#xD;&#xA;after that **`onOptionsItemSelected`** written like:&#xD;&#xA;&#xD;&#xA;    case R.id.menu_product_change_view:&#xD;&#xA;         isViewWithCatalog = !isViewWithCatalog;&#xD;&#xA;         supportInvalidateOptionsMenu();&#xD;&#xA;         //loading = false;&#xD;&#xA;         mProductListRecyclerView.setLayoutManager(isViewWithCatalog ? new LinearLayoutManager(this) : new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL));&#xD;&#xA;         mProductListRecyclerView.setAdapter(mAdapter);&#xD;&#xA;         break;&#xD;&#xA;&#xD;&#xA;and changing view in **`onCreateViewHolder`** like:&#xD;&#xA;&#xD;&#xA;    @Override&#xD;&#xA;    public ProductRowHolder onCreateViewHolder(ViewGroup viewGroup, int i) {&#xD;&#xA;        View v = LayoutInflater.from(viewGroup.getContext()).inflate(isViewWithCatalog ? R.layout.product_row_layout_list : R.layout.product_row_layout_grid, null);&#xD;&#xA;        ProductRowHolder mh = new ProductRowHolder(v);&#xD;&#xA;        return mh;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;From Starting to Ending you have to manage **isViewWithCatalog** variable for displaying which layout first.";;deleted 1192 characters in body

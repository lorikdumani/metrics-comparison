Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
39253366;16057871;1942750;2;72d6a87a-619a-4927-b84e-42b8434ceb69;2013-04-17 10:39:41.0;"You say doInBackground(Object... params) yes, but you don`t send to async task class this params on execute:&#xD;&#xA;&#xD;&#xA;    test.execute();&#xD;&#xA;&#xD;&#xA;If to you need params you must send params to async task class:&#xD;&#xA;&#xD;&#xA;    test.execute(yourObjects);&#xD;&#xA;&#xD;&#xA;then you make use this params";;
39255822;16057871;1942750;5;bc810303-711c-44cc-9963-f77da29050f3;2013-04-17 11:23:52.0;"Use callback for get result from async task. Here interface callback class:&#xD;&#xA;    &#xD;&#xA;    public interface Callback {&#xD;&#xA;        public void onSuccess(Object data);&#xD;&#xA;        public void onError(String errorMsg);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And create instance this class and implement its:&#xD;&#xA;&#xD;&#xA;    final Callback resCallback = new Callback() {&#xD;&#xA;        @Override&#xD;&#xA;	public void onSuccess(Object data) {&#xD;&#xA;		parseXmlFile(data);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;	public void onError(String errorMsg) {&#xD;&#xA;		//show error with Alert or Toast&#xD;&#xA;	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And create asynctask class with your callback:&#xD;&#xA;&#xD;&#xA;    RetreiveAmazonNodesXML test = new RetreiveAmazonNodesXML(resCallback);&#xD;&#xA;    test.execute(yourObjectsParams);&#xD;&#xA;&#xD;&#xA;Write asynctask class like this:&#xD;&#xA;&#xD;&#xA;	RetreiveAmazonNodesXML test = new RetreiveAmazonNodesXML(resCallback);&#xD;&#xA;	test.execute(yourObjectsParams);&#xD;&#xA;&#xD;&#xA;	private class RetreiveAmazonNodesXML extends AsyncTask {&#xD;&#xA;		private Callback responderCallback;&#xD;&#xA;		private Exception exception;&#xD;&#xA;&#xD;&#xA;		public GeneralHttpTask(Callback callback){&#xD;&#xA;			this.responderCallback = callback;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		@Override&#xD;&#xA;		protected Object doInBackground(Object... params) {&#xD;&#xA;			   try {&#xD;&#xA;					Amazon childrenBrowseNodesXml = new Amazon(browseNodeId, locality);&#xD;&#xA;					return childrenBrowseNodesXml;&#xD;&#xA;				} catch (Exception e) {&#xD;&#xA;					this.exception = e;&#xD;&#xA;				}&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		@Override&#xD;&#xA;		protected void onPostExecute(Object result) {&#xD;&#xA;			if(result != null) {&#xD;&#xA;				responderCallback.onSuccess(result);&#xD;&#xA;			} else {&#xD;&#xA;				responderCallback.onError(exception);&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;	}";;added 1258 characters in body
39257241;16057871;1942750;5;5732ce8a-4c4a-49a7-a59e-f412e41e1025;2013-04-17 11:51:16.0;"Use callback for get result from async task. Here interface callback class:&#xD;&#xA;    &#xD;&#xA;    public interface Callback {&#xD;&#xA;        public void onSuccess(Object data);&#xD;&#xA;        public void onError(String errorMsg);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And create instance this class and implement its:&#xD;&#xA;&#xD;&#xA;    final Callback resCallback = new Callback() {&#xD;&#xA;        @Override&#xD;&#xA;	public void onSuccess(Object data) {&#xD;&#xA;		parseXmlFile(data);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;	public void onError(String errorMsg) {&#xD;&#xA;		//show error with Alert or Toast&#xD;&#xA;	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And create asynctask class with your callback:&#xD;&#xA;&#xD;&#xA;    RetreiveAmazonNodesXML test = new RetreiveAmazonNodesXML(resCallback);&#xD;&#xA;    test.execute(yourObjectsParams);&#xD;&#xA;&#xD;&#xA;Write asynctask class like this:&#xD;&#xA;&#xD;&#xA;	private class RetreiveAmazonNodesXML extends AsyncTask {&#xD;&#xA;		private Callback responderCallback;&#xD;&#xA;		private Exception exception;&#xD;&#xA;&#xD;&#xA;		public GeneralHttpTask(Callback callback){&#xD;&#xA;			this.responderCallback = callback;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		@Override&#xD;&#xA;		protected Object doInBackground(Object... params) {&#xD;&#xA;			   try {&#xD;&#xA;					Amazon childrenBrowseNodesXml = new Amazon(browseNodeId, locality);&#xD;&#xA;					return childrenBrowseNodesXml;&#xD;&#xA;				} catch (Exception e) {&#xD;&#xA;					this.exception = e;&#xD;&#xA;				}&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		@Override&#xD;&#xA;		protected void onPostExecute(Object result) {&#xD;&#xA;			if(result != null) {&#xD;&#xA;				responderCallback.onSuccess(result);&#xD;&#xA;			} else {&#xD;&#xA;				responderCallback.onError(exception);&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;	}";;deleted 110 characters in body

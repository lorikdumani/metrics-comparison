Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
98373978;32256175;2555504;2;2c46b8f0-8814-4da8-be27-281a85b91c86;2015-08-27 17:47:00.0;"Yes, you can do that simply by having one additional field in dB which will represent the last datetime till when page is accessible by all. Then whenever someone accesses it, just check if current datetime is before or equal to value of that field, if yes, let them access, if no, deny access.&#xD;&#xA;&#xD;&#xA;When user makes request to make page accessible, update the field accordingly.";;
98374245;32256175;2555504;5;d66449c7-a5e6-423a-ad65-99a92b0aa533;2015-08-27 17:50:58.0;"Yes, you can do that simply by having one additional field in dB which will represent the last datetime till when page is accessible by all. Then whenever someone accesses it, just check if current datetime is before or equal to value of that field, if yes, let them access, if no, deny access.&#xD;&#xA;&#xD;&#xA;When user makes request to make page accessible, create the special link and update the field accordingly.&#xD;&#xA;&#xD;&#xA;Make sure to handle routing for special link you generate on every request.";;added 107 characters in body
98375723;32256175;2555504;5;f77e67f4-d334-4b48-af6f-28f0b07f09c0;2015-08-27 18:12:05.0;"Yes, you can do that simply by having one additional field in dB which will represent the last datetime till when page is accessible by all. Then whenever someone accesses it, just check if current datetime is before or equal to value of that field, if yes, let them access, if no, deny access.&#xD;&#xA;&#xD;&#xA;When user makes request to make page accessible, create the special link and update the field accordingly.&#xD;&#xA;&#xD;&#xA;Make sure to handle routing for special link you generate on every request.&#xD;&#xA;&#xD;&#xA;Edit-&#xD;&#xA;-&#xD;&#xA;To handle things using keys, you can take following steps-&#xD;&#xA;&#xD;&#xA;1) generate a random key whenever user requests for special link,&#xD;&#xA;&#xD;&#xA;2) store the key and corresponding latest datetime of access for page in db&#xD;&#xA;&#xD;&#xA;3) assuming main url for your page was '/mypage/', and your urls.py is something like this-&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    from django.conf.urls import patterns, url&#xD;&#xA;    from apps.myapp import views as myapp_views&#xD;&#xA;&#xD;&#xA;    # See: https://docs.djangoproject.com/en/dev/topics/http/urls/&#xD;&#xA;    urlpatterns = patterns(&#xD;&#xA;        '',&#xD;&#xA;        url(r'^mypage/$', myapp_views.MyPageView.as_view(), name='mypage'),&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;you add another url, something like this-&#xD;&#xA;&#xD;&#xA;    from django.conf.urls import patterns, url&#xD;&#xA;    from apps.myapp import views as myapp_views&#xD;&#xA;&#xD;&#xA;    # See: https://docs.djangoproject.com/en/dev/topics/http/urls/&#xD;&#xA;    urlpatterns = patterns(&#xD;&#xA;        '',&#xD;&#xA;        url(r'^mypage/$', myapp_views.MyPageView.as_view(), name='mypage'),&#xD;&#xA;        url(r'^mypage/(?P<key>\\w+)/$', myapp_views.MyPageView.as_view(), name='mypage_special'),&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;What above results in is that a url '/mypage/any_alphanumeric_key/' will also redirect to your page view.&#xD;&#xA;&#xD;&#xA;4) In your views, access the key, fetch the latest datetime of access for that key from dB, and if valid, give access else deny access.&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;";;added 1313 characters in body

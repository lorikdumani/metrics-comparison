Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
69506179;24794554;1078583;2;3d0785c2-6e1d-4d00-a0d4-9cdf537edcf0;2014-07-17 03:43:14.0;"Overlapping Matches: Lookahead Trickery&#xD;&#xA;-------------------&#xD;&#xA;&#xD;&#xA;To make you aware of other another option, here is a single regex that will capture all the combinations (not necessarily an improvement on your four patterns). &#xD;&#xA;&#xD;&#xA;    (?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))&#xD;&#xA;&#xD;&#xA;All the combinations are captured to Groups 1, 2, 3 and 4 of the various matches. A few duplicates need to be eliminated in post-processing. In [the regex demo][1], please look at the group captures in the bottom right pane.&#xD;&#xA;&#xD;&#xA;**Post-Processing**&#xD;&#xA;&#xD;&#xA;We need to merge all the matches retrieved via `findall` or `finditer` and remove dupes (a set would be handy.) Will throw some code together if I find the time. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://regex101.com/r/nJ8cJ8/20";;
69506845;24794554;1078583;5;b04e429d-d525-4c08-a8e7-6097ab46d854;2014-07-17 04:04:39.0;"Overlapping Matches: Lookahead Trickery&#xD;&#xA;-------------------&#xD;&#xA;&#xD;&#xA;Here is a single regex that will capture all the combinations. &#xD;&#xA;&#xD;&#xA;    (?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))&#xD;&#xA;&#xD;&#xA;All the combinations are captured to Groups 1, 2, 3 and 4 of the various matches. A few duplicates are eliminated when we bring all the groups together into a set. In [the regex demo][1], please look at the group captures in the bottom right pane.&#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = set()&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            tokens.add(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    {'CC DD EE', 'EE FF GG HH', 'GG', 'DD EE FF',&#xD;&#xA;    'FF', 'DD EE FF GG', 'BB CC DD', 'DD EE', 'FF GG',&#xD;&#xA;    'CC', 'FF GG HH', 'HH', 'EE FF GG', 'AA BB', 'CC DD',&#xD;&#xA;    'AA BB CC', 'DD', 'GG HH', 'AA', 'BB CC DD EE', &#xD;&#xA;    'EE FF', 'EE', 'AA BB CC DD', 'BB', 'BB CC', &#xD;&#xA;    'CC DD EE FF'}&#xD;&#xA;&#xD;&#xA;  [1]: http://regex101.com/r/nJ8cJ8/20&#xD;&#xA;&#xD;&#xA;";;added 424 characters in body
69507567;24794554;1078583;5;e4233a9b-0ab2-4a31-be2e-0b272bb1c171;2014-07-17 04:30:19.0;"Overlapping Matches: Lookahead Trickery&#xD;&#xA;-------------------&#xD;&#xA;&#xD;&#xA;Here are two single expressions that will capture all the combinations. &#xD;&#xA;&#xD;&#xA;**Option 1: compact, but need to remove a few dupes in code**&#xD;&#xA;&#xD;&#xA;    (?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))&#xD;&#xA;&#xD;&#xA;All the combinations are captured to Groups 1, 2, 3 and 4 of the various matches. A few duplicates are eliminated when we bring all the groups together into a set. In [the regex demo][1], please look at the group captures in the bottom right pane.&#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = set()&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            tokens.add(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    {'CC DD EE', 'EE FF GG HH', 'GG', 'DD EE FF',&#xD;&#xA;    'FF', 'DD EE FF GG', 'BB CC DD', 'DD EE', 'FF GG',&#xD;&#xA;    'CC', 'FF GG HH', 'HH', 'EE FF GG', 'AA BB', 'CC DD',&#xD;&#xA;    'AA BB CC', 'DD', 'GG HH', 'AA', 'BB CC DD EE', &#xD;&#xA;    'EE FF', 'EE', 'AA BB CC DD', 'BB', 'BB CC', &#xD;&#xA;    'CC DD EE FF'}&#xD;&#xA;&#xD;&#xA;**Option 2: no dupes**&#xD;&#xA;&#xD;&#xA;    (?=\\b(\\S+(?: \\S+){3}))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+ \\S+))?(?=(\\b\\S+))&#xD;&#xA;&#xD;&#xA;Hang tight for demo and sample code.&#xD;&#xA;&#xD;&#xA;  [1]: http://regex101.com/r/nJ8cJ8/20&#xD;&#xA;&#xD;&#xA;";;added 221 characters in body
69507961;24794554;1078583;5;8f06142f-3b91-482c-8d9d-0230baa1cad5;2014-07-17 04:41:17.0;"Overlapping Matches: Lookahead Trickery&#xD;&#xA;-------------------&#xD;&#xA;&#xD;&#xA;Here are two single expressions that will capture all the combinations. &#xD;&#xA;&#xD;&#xA;**Option 1: compact, but need to remove a few dupes in code**&#xD;&#xA;&#xD;&#xA;    (?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))&#xD;&#xA;&#xD;&#xA;All the combinations are captured to Groups 1, 2, 3 and 4 of the various matches. A few duplicates are eliminated when we bring all the groups together into a set. In [the regex demo][1], please look at the group captures in the bottom right pane.&#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = set()&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            tokens.add(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    {'CC DD EE', 'EE FF GG HH', 'GG', 'DD EE FF',&#xD;&#xA;    'FF', 'DD EE FF GG', 'BB CC DD', 'DD EE', 'FF GG',&#xD;&#xA;    'CC', 'FF GG HH', 'HH', 'EE FF GG', 'AA BB', 'CC DD',&#xD;&#xA;    'AA BB CC', 'DD', 'GG HH', 'AA', 'BB CC DD EE', &#xD;&#xA;    'EE FF', 'EE', 'AA BB CC DD', 'BB', 'BB CC', &#xD;&#xA;    'CC DD EE FF'}&#xD;&#xA;&#xD;&#xA;Option 2: a few empty matches need to be filtered&#xD;&#xA;-------------------------------------------------&#xD;&#xA;&#xD;&#xA;    (?=\\b(\\S+(?: \\S+){3}))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+ \\S+))?(?=(\\b\\S+))&#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=(\\b\\S+))(?=\\b(\\S+ \\S+))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+(?: \\S+){3}))?"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = []&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            if b != """":&#xD;&#xA;                tokens.append(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    ['AA', 'AA BB', 'AA BB CC', 'AA BB CC DD', &#xD;&#xA;     'BB', 'BB CC', 'BB CC DD', 'BB CC DD EE',&#xD;&#xA;     'CC', 'CC DD', 'CC DD EE', 'CC DD EE FF', &#xD;&#xA;     'DD', 'DD EE', 'DD EE FF', 'DD EE FF GG',&#xD;&#xA;     'EE', 'EE FF', 'EE FF GG', 'EE FF GG HH', &#xD;&#xA;     'FF', 'FF GG', 'FF GG HH', &#xD;&#xA;     'GG', 'GG HH', &#xD;&#xA;     'HH']&#xD;&#xA;&#xD;&#xA;  [1]: http://regex101.com/r/nJ8cJ8/20&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 733 characters in body
69508372;24794554;1078583;5;0f6949e3-0ffc-47b9-bb80-52c6b57716d2;2014-07-17 04:52:14.0;"Overlapping Matches: Lookahead Trickery&#xD;&#xA;-------------------&#xD;&#xA;&#xD;&#xA;Here are two single expressions that will capture all the combinations. &#xD;&#xA;&#xD;&#xA;Option 1: Compact&#xD;&#xA;--------&#xD;&#xA;&#xD;&#xA;    (?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))&#xD;&#xA;&#xD;&#xA;All the combinations are captured to Groups 1, 2, 3 and 4 of the various matches. A few dupes are eliminated when we bring all the groups together into a set. In [the regex demo][1], please look at the group captures in the bottom right pane.&#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = set()&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            tokens.add(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    {'CC DD EE', 'EE FF GG HH', 'GG', 'DD EE FF',&#xD;&#xA;    'FF', 'DD EE FF GG', 'BB CC DD', 'DD EE', 'FF GG',&#xD;&#xA;    'CC', 'FF GG HH', 'HH', 'EE FF GG', 'AA BB', 'CC DD',&#xD;&#xA;    'AA BB CC', 'DD', 'GG HH', 'AA', 'BB CC DD EE', &#xD;&#xA;    'EE FF', 'EE', 'AA BB CC DD', 'BB', 'BB CC', &#xD;&#xA;    'CC DD EE FF'}&#xD;&#xA;&#xD;&#xA;Option 2: Produces Sorted Output&#xD;&#xA;-------------------------------------------------&#xD;&#xA;&#xD;&#xA;    (?=\\b(\\S+(?: \\S+){3}))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+ \\S+))?(?=(\\b\\S+))&#xD;&#xA;&#xD;&#xA;When we build the list, a few empty strings need to be removed. &#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=(\\b\\S+))(?=\\b(\\S+ \\S+))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+(?: \\S+){3}))?"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = []&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            if b != """":&#xD;&#xA;                tokens.append(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    ['AA', 'AA BB', 'AA BB CC', 'AA BB CC DD', &#xD;&#xA;     'BB', 'BB CC', 'BB CC DD', 'BB CC DD EE',&#xD;&#xA;     'CC', 'CC DD', 'CC DD EE', 'CC DD EE FF', &#xD;&#xA;     'DD', 'DD EE', 'DD EE FF', 'DD EE FF GG',&#xD;&#xA;     'EE', 'EE FF', 'EE FF GG', 'EE FF GG HH', &#xD;&#xA;     'FF', 'FF GG', 'FF GG HH', &#xD;&#xA;     'GG', 'GG HH', &#xD;&#xA;     'HH']&#xD;&#xA;&#xD;&#xA;  [1]: http://regex101.com/r/nJ8cJ8/20&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 14 characters in body
69509677;24794554;1078583;5;ff47728c-fdff-4b5f-aad6-6be03bcbf1fc;2014-07-17 05:22:00.0;"Overlapping Matches: Lookahead Trickery&#xD;&#xA;-------------------&#xD;&#xA;&#xD;&#xA;It is possible to match all the combinations with a single regex. Since the matches overlap, we will use lookaheads and optional capture groups. &#xD;&#xA;&#xD;&#xA;Here are two options. &#xD;&#xA;&#xD;&#xA;Option 1: Shorter Regex, Unsorted Ouput&#xD;&#xA;--------&#xD;&#xA;&#xD;&#xA;    (?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))&#xD;&#xA;&#xD;&#xA;All the combinations are captured to Groups 1, 2, 3 and 4 of the various matches. A few dupes are eliminated when we bring all the groups together into a set. In [the regex demo][1], please look at the group captures in the bottom right pane.&#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=((((\\b\\S+)(?: \\S+)?)(?: \\S+)?)(?: \\S+)?))"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = set()&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            tokens.add(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    {'CC DD EE', 'EE FF GG HH', 'GG', 'DD EE FF',&#xD;&#xA;    'FF', 'DD EE FF GG', 'BB CC DD', 'DD EE', 'FF GG',&#xD;&#xA;    'CC', 'FF GG HH', 'HH', 'EE FF GG', 'AA BB', 'CC DD',&#xD;&#xA;    'AA BB CC', 'DD', 'GG HH', 'AA', 'BB CC DD EE', &#xD;&#xA;    'EE FF', 'EE', 'AA BB CC DD', 'BB', 'BB CC', &#xD;&#xA;    'CC DD EE FF'}&#xD;&#xA;&#xD;&#xA;Option 2: Longer Regex, Sorted Output&#xD;&#xA;-------------------------------------------------&#xD;&#xA;&#xD;&#xA;    (?=\\b(\\S+(?: \\S+){3}))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+ \\S+))?(?=(\\b\\S+))&#xD;&#xA;&#xD;&#xA;When we build the list, a few empty strings need to be removed. &#xD;&#xA;&#xD;&#xA;**Sample Code**&#xD;&#xA;&#xD;&#xA;    import re&#xD;&#xA;    subject = ""AA BB CC DD EE FF GG HH""&#xD;&#xA;    reobj = re.compile(r""(?=(\\b\\S+))(?=\\b(\\S+ \\S+))?(?=\\b(\\S+(?: \\S+){2}))?(?=\\b(\\S+(?: \\S+){3}))?"")&#xD;&#xA;    result = reobj.findall(subject)&#xD;&#xA;    tokens = []&#xD;&#xA;    for a in result:&#xD;&#xA;        for b in a:&#xD;&#xA;            if b != """":&#xD;&#xA;                tokens.append(b)&#xD;&#xA;    print(tokens)        &#xD;&#xA;&#xD;&#xA;**Output**&#xD;&#xA;&#xD;&#xA;    ['AA', 'AA BB', 'AA BB CC', 'AA BB CC DD', &#xD;&#xA;     'BB', 'BB CC', 'BB CC DD', 'BB CC DD EE',&#xD;&#xA;     'CC', 'CC DD', 'CC DD EE', 'CC DD EE FF', &#xD;&#xA;     'DD', 'DD EE', 'DD EE FF', 'DD EE FF GG',&#xD;&#xA;     'EE', 'EE FF', 'EE FF GG', 'EE FF GG HH', &#xD;&#xA;     'FF', 'FF GG', 'FF GG HH', &#xD;&#xA;     'GG', 'GG HH', &#xD;&#xA;     'HH']&#xD;&#xA;&#xD;&#xA;  [1]: http://regex101.com/r/nJ8cJ8/20&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 99 characters in body

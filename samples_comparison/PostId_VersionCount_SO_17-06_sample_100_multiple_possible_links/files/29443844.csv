Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
87367572;29443844;2255924;2;d671f7c6-788d-46ff-b947-544229fc3172;2015-04-04 07:22:01.0;"I am developing dictionary application. It requires incremental search which means that SELECTING should be fast. There are 200000+ rows. Let me, first of all explain, table structure. I have this table:&#xD;&#xA;&#xD;&#xA;    CREATE TABLE meaning(&#xD;&#xA;    key TEXT, &#xD;&#xA;    value TEXT, &#xD;&#xA;    entries BLOB);&#xD;&#xA;&#xD;&#xA;Some times ago I had this index:&#xD;&#xA;&#xD;&#xA;    CREATE INDEX index_key ON meaning (key)&#xD;&#xA;&#xD;&#xA;This query was performed for around ~500ms which was very slow&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;Then I dropped this index, created incasesensitive index which helped to improve performance 2-3 times.&#xD;&#xA;&#xD;&#xA;    CREATE INDEX index_key ON meaning (key COLLATE NOCASE);&#xD;&#xA;&#xD;&#xA;Now this query performing for 75ms(min) - 275ms(max) which is quite slow for incremental search.&#xD;&#xA;&#xD;&#xA;I have tried to optimize query according to this [post][1].&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key >= 'boy' AND key<'boz' LIMIT 100&#xD;&#xA;&#xD;&#xA;But this query is performed for 451ms.&#xD;&#xA;&#xD;&#xA;    EXPLAIN&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;This is returning following values:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;    EXPLAIN QUERY PLAN&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;This is returning this value(detail column):&#xD;&#xA;&#xD;&#xA;    SEARCH TABLE meaning USING INDEX index_key (key>? AND key<?) (~31250 rows)&#xD;&#xA;&#xD;&#xA;Is it possible to optimize SELECTion of words to be performed in ~10ms by optimization of this query or creating another table or changing some parameters of SQLite database? Could you suggest me the best way to do this?&#xD;&#xA;&#xD;&#xA;PS. Please, do not suggest to use FTS table. In previous version of application I have used FTS. I agree that it is extremely fast. I left FTS table idea for 2 reasons:&#xD;&#xA;&#xD;&#xA; - It is not giving proper result(it contains the words which user do not need)&#xD;&#xA; - It takes more disk space&#xD;&#xA;&#xD;&#xA;  [1]: http://joshua.perina.com/africa/gambia/fajara/post/converting-to-sqlite-and-like-query-optimization&#xD;&#xA;  [2]: http://i.stack.imgur.com/ugf0k.jpg";;
87367760;29443844;2255924;5;ba394177-e529-4fce-b96a-391663588da6;2015-04-04 07:30:04.0;"I am developing dictionary application. It requires incremental search which means that SELECTING should be fast. There are 200000+ rows. Let me, first of all explain, table structure. I have this table:&#xD;&#xA;&#xD;&#xA;    CREATE TABLE meaning(&#xD;&#xA;    key TEXT, &#xD;&#xA;    value TEXT, &#xD;&#xA;    entries BLOB);&#xD;&#xA;&#xD;&#xA;Some times ago I had this index:&#xD;&#xA;&#xD;&#xA;    CREATE INDEX index_key ON meaning (key)&#xD;&#xA;&#xD;&#xA;This query was performed for around ~500ms which was very slow&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;Then I dropped this index, created incasesensitive index which helped to improve performance 2-3 times.&#xD;&#xA;&#xD;&#xA;    CREATE INDEX index_key ON meaning (key COLLATE NOCASE);&#xD;&#xA;&#xD;&#xA;Now this query performing for 75ms(min) - 275(ms) which is quite slow for incremental search.&#xD;&#xA;&#xD;&#xA;I have tried to optimize query according to this [post][1].&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key >= 'boy' AND key<'boz' LIMIT 100&#xD;&#xA;&#xD;&#xA;But this query is performed for 451ms.&#xD;&#xA;&#xD;&#xA;    EXPLAIN&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;This is returning following values:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;    EXPLAIN QUERY PLAN&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;This is returning this value(detail column):&#xD;&#xA;&#xD;&#xA;    SEARCH TABLE meaning USING INDEX index_key (key>? AND key<?) (~31250 rows)&#xD;&#xA;&#xD;&#xA;Actually this values did not give me some sense or key what to optimize.&#xD;&#xA;&#xD;&#xA;Is it possible to optimize SELECTion of words to be performed in ~10ms by optimization of this query or creating another table or changing some parameters of SQLite database? Could you suggest me the best way to do this?&#xD;&#xA;&#xD;&#xA;PS. Please, do not suggest to use FTS table. In previous version of application I have used FTS. I agree that it is extremely fast. I left FTS table idea for 2 reasons:&#xD;&#xA;&#xD;&#xA; - It is not giving proper result(it contains the words which user do not need)&#xD;&#xA; - It takes more disk space&#xD;&#xA;&#xD;&#xA;  [1]: http://joshua.perina.com/africa/gambia/fajara/post/converting-to-sqlite-and-like-query-optimization&#xD;&#xA;  [2]: http://i.stack.imgur.com/ugf0k.jpg";;added 73 characters in body
87369657;29443844;2255924;5;2c5a846b-a5c8-4685-9d4a-f2ca8b81b7c0;2015-04-04 08:38:36.0;"I am developing dictionary application. It requires incremental search which means that SELECTING should be fast. There are 200000+ rows. Let me, first of all explain, table structure. I have this table:&#xD;&#xA;&#xD;&#xA;    CREATE TABLE meaning(&#xD;&#xA;    key TEXT, &#xD;&#xA;    value TEXT, &#xD;&#xA;    entries BLOB);&#xD;&#xA;&#xD;&#xA;Some times ago I had this index:&#xD;&#xA;&#xD;&#xA;    CREATE INDEX index_key ON meaning (key)&#xD;&#xA;&#xD;&#xA;This query was performed for around ~500ms which was very slow&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;Then I dropped this index, created incasesensitive index which helped to improve performance 2-3 times.&#xD;&#xA;&#xD;&#xA;    CREATE INDEX index_key ON meaning (key COLLATE NOCASE);&#xD;&#xA;&#xD;&#xA;Now this query performing for 75ms(min) - 275(ms) which is quite slow for incremental search.&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;I have tried to optimize query according to this [post][1].&#xD;&#xA;&#xD;&#xA;    SELECT value FROM meaning WHERE key >= 'boy' AND key<'boz' LIMIT 100&#xD;&#xA;&#xD;&#xA;But this query is performed for 451ms.&#xD;&#xA;&#xD;&#xA;    EXPLAIN&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;This is returning following values:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;    EXPLAIN QUERY PLAN&#xD;&#xA;    SELECT value FROM meaning WHERE key LIKE 'boy%' LIMIT 100&#xD;&#xA;&#xD;&#xA;This is returning this value(detail column):&#xD;&#xA;&#xD;&#xA;    SEARCH TABLE meaning USING INDEX index_key (key>? AND key<?) (~31250 rows)&#xD;&#xA;&#xD;&#xA;Actually this values did not give me some sense or key what to optimize.&#xD;&#xA;&#xD;&#xA;Is it possible to optimize SELECTion of words to be performed in ~10ms by optimization of this query or creating another table or changing some parameters of SQLite database? Could you suggest me the best way to do this?&#xD;&#xA;&#xD;&#xA;PS. Please, do not suggest to use FTS table. In previous version of application I have used FTS. I agree that it is extremely fast. I left FTS table idea for 2 reasons:&#xD;&#xA;&#xD;&#xA; - It is not giving proper result(it contains the words which user do not need)&#xD;&#xA; - It takes more disk space&#xD;&#xA;&#xD;&#xA;  [1]: http://joshua.perina.com/africa/gambia/fajara/post/converting-to-sqlite-and-like-query-optimization&#xD;&#xA;  [2]: http://i.stack.imgur.com/ugf0k.jpg";;"added 128 characters in body; deleted 63 characters in body"

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
70649096;25095831;774575;2;d161b6cb-419c-427f-bcab-8c0b0ab2feb8;2014-08-02 14:01:31.0;"Java context:&#xD;&#xA;&#xD;&#xA;Class: `Channel implements ICleanable`  &#xD;&#xA;Variable: `Set<Channel> channels = new HashSet<>()`  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I need to call this method with an array of `Iterable` as parameter:&#xD;&#xA;&#xD;&#xA;    void unexport(Iterable<ICleanable>[] cleanables)&#xD;&#xA;&#xD;&#xA;But I cannot devise how to write the call. This version doesn't work:&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;The compiler says: ""`Type mismatch: cannot convert from Set<Channel> to Iterable<ICleanable>`""  &#xD;&#xA;&#xD;&#xA;Help would be appreciated (and/or reference to learning material). Thanks.";;
70680196;25095831;774575;5;6aa610dc-5f1f-471b-af57-8a4bdad636f1;2014-08-03 10:40:50.0;"Java context:&#xD;&#xA;&#xD;&#xA;Class: `Channel implements ICleanable`  &#xD;&#xA;Variable: `Set<Channel> channels = new HashSet<>()`  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I need to call this method with an array of `Iterable` as parameter:&#xD;&#xA;&#xD;&#xA;    void unexport(Iterable<ICleanable>[] cleanables)&#xD;&#xA;&#xD;&#xA;But I cannot devise how to write the call. This version doesn't work:&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;The compiler says: ""`Type mismatch: cannot convert from Set<Channel> to Iterable<ICleanable>`""  &#xD;&#xA;&#xD;&#xA;Help would be appreciated (and/or reference to learning material). Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;EDIT. Now that I've got the answer, I can summarize where I was wrong.&#xD;&#xA;&#xD;&#xA;I had a problem with generics and subtypping. This is a beginner error (which is exactly what I'm). Clue:&#xD;&#xA;&#xD;&#xA;    List<String> ls = new ArrayList<String>();  &#xD;&#xA;    List<Object> lo = ls; // Illegal, a List<String> is not a List<Object>!  &#xD;&#xA;    lo.add(new Object());  &#xD;&#xA;    String s = ls.get(0); // Attempts to assign an Object to a String!  &#xD;&#xA;&#xD;&#xA;A `List<String>` is **cannot be** a `List<Object>`, otherwise the type safety void be void.&#xD;&#xA;This is explained [here][1].&#xD;&#xA;&#xD;&#xA;I had a second problem with array of generics.&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;It is not possible to create an array of Iterable<ICleanable>. This is explained [here][2]. The error on type conversion prevented this second error to be detected by the compiler before correction of the former.&#xD;&#xA;&#xD;&#xA;In my case I ended up with this:&#xD;&#xA;&#xD;&#xA;    void unexport(List<? extends ICleanable> cleanables) {...}&#xD;&#xA;    Channel implements ICleanable;&#xD;&#xA;    List<Channel> channels = new ArrayList<>();&#xD;&#xA;    List<? extends ITVCleanable>> list = new ArrayList<>();&#xD;&#xA;    list.add(channels);&#xD;&#xA;    unexport(list);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/extra/generics/subtype.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createArrays";;added 1346 characters in body
70680358;25095831;774575;5;58f9865d-fd5d-4590-95c6-c6f8494640f8;2014-08-03 10:46:34.0;"Java context:&#xD;&#xA;&#xD;&#xA;Class: `Channel implements ICleanable`  &#xD;&#xA;Variable: `Set<Channel> channels = new HashSet<>()`  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I need to call this method with an array of `Iterable` as parameter:&#xD;&#xA;&#xD;&#xA;    void unexport(Iterable<ICleanable>[] cleanables)&#xD;&#xA;&#xD;&#xA;But I cannot devise how to write the call. This version doesn't work:&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;The compiler says: ""`Type mismatch: cannot convert from Set<Channel> to Iterable<ICleanable>`""  &#xD;&#xA;&#xD;&#xA;Help would be appreciated (and/or reference to learning material). Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;EDIT. Now that I've got the answer, I can summarize where I was wrong.&#xD;&#xA;&#xD;&#xA;I had a problem with generics and subtypping. This is a beginner error (which is exactly what I'm). Clue:&#xD;&#xA;&#xD;&#xA;    List<String> ls = new ArrayList<String>();  &#xD;&#xA;    List<Object> lo = ls; // Illegal, a List<String> is not a List<Object>!  &#xD;&#xA;    lo.add(new Object());  &#xD;&#xA;    String s = ls.get(0); // Attempts to assign an Object to a String!  &#xD;&#xA;&#xD;&#xA;A `List<String>` is **cannot be** a `List<Object>`, otherwise the type safety void be void.&#xD;&#xA;This is explained [here][1].&#xD;&#xA;&#xD;&#xA;I had a second problem with array of generics.&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;It is not possible to create an array of Iterable<ICleanable>. This is explained [here][2]. The error on type conversion prevented this second error to be detected by the compiler before correction of the former.&#xD;&#xA;&#xD;&#xA;In my case I ended up with this:&#xD;&#xA;&#xD;&#xA;    void unexport(List<List<? extends ICleanable>> cleanables) {...}&#xD;&#xA;    Channel implements ICleanable;&#xD;&#xA;    List<Channel> channels = new ArrayList<>();&#xD;&#xA;    List<List<? extends ITVCleanable>> list = new ArrayList<>();&#xD;&#xA;    list.add(channels);&#xD;&#xA;    unexport(list);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/extra/generics/subtype.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createArrays";;added 6 characters in body
70681924;25095831;774575;5;757bde37-67ce-455c-ab27-b8e5c97243eb;2014-08-03 11:46:52.0;"Java context:&#xD;&#xA;&#xD;&#xA;Class: `Channel implements ICleanable`  &#xD;&#xA;Variable: `Set<Channel> channels = new HashSet<>()`  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I need to call this method with an array of `Iterable` as parameter:&#xD;&#xA;&#xD;&#xA;    void unexport(Iterable<ICleanable>[] cleanables)&#xD;&#xA;&#xD;&#xA;But I cannot devise how to write the call. This version doesn't work:&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;The compiler says: ""`Type mismatch: cannot convert from Set<Channel> to Iterable<ICleanable>`""  &#xD;&#xA;&#xD;&#xA;Help would be appreciated (and/or reference to learning material). Thanks.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;EDIT. Now that I've got the answer, I can summarize where I was wrong.&#xD;&#xA;&#xD;&#xA;I had a problem with generics and subtypping. This is a beginner error (which is exactly what I'm). Clue:&#xD;&#xA;&#xD;&#xA;    List<String> ls = new ArrayList<String>();  &#xD;&#xA;    List<Object> lo = ls; // Illegal, a List<String> is not a List<Object>!  &#xD;&#xA;    lo.add(new Object());  &#xD;&#xA;    String s = ls.get(0); // Attempts to assign an Object to a String!  &#xD;&#xA;&#xD;&#xA;A `List<String>` **cannot be** a `List<Object>`, otherwise the type safety void be void.&#xD;&#xA;This is explained [here][1].&#xD;&#xA;&#xD;&#xA;I had a second problem with array of generics.&#xD;&#xA;&#xD;&#xA;    unexport(new Iterable<ICleanable>[] { channels })&#xD;&#xA;&#xD;&#xA;It is not possible to create an array of Iterable<ICleanable>. This is explained [here][2]. The error on type conversion prevented this second error to be detected by the compiler before correction of the former.&#xD;&#xA;&#xD;&#xA;In my case I ended up with this:&#xD;&#xA;&#xD;&#xA;    void unexport(List<List<? extends ICleanable>> cleanables) {...}&#xD;&#xA;    Channel implements ICleanable;&#xD;&#xA;    List<Channel> channels = new ArrayList<>();&#xD;&#xA;    List<List<? extends ITVCleanable>> list = new ArrayList<>();&#xD;&#xA;    list.add(channels);&#xD;&#xA;    unexport(list);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/extra/generics/subtype.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createArrays";;deleted 3 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
12018509;5597165;148004;2;3fd84aa7-32a8-44cf-a703-823705490c5e;2011-04-08 15:17:43.0;"In this situation, I would define a generic implementation of your abstract class, such that you get something like this:&#xD;&#xA;&#xD;&#xA;    public abstract EngineBase<T>&#xD;&#xA;    {&#xD;&#xA;         public abstract Refuel(T parameters);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then your implementations look like this:&#xD;&#xA;&#xD;&#xA;    public class ElectricEngine : EngineBase<ElectricParameters>&#xD;&#xA;    {&#xD;&#xA;         public override Refuel(ElectricParameters parameters) { }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;**Alternatively**, you can define an interface, and pass a specific implementation to your methods:&#xD;&#xA;&#xD;&#xA;    public abstract EngineBase&#xD;&#xA;    {&#xD;&#xA;         public abstract Refuel(IRefuelParameters parameters);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then your implementations look like this:&#xD;&#xA;&#xD;&#xA;    public class ElectricEngine : EngineBase&#xD;&#xA;    {&#xD;&#xA;         public override Refuel(IRefuelParameters parameters)&#xD;&#xA;         {&#xD;&#xA;              if(!(parameters is ElectricParameters))&#xD;&#xA;                  throw ApplicationException(""Not the right params!"");&#xD;&#xA;&#xD;&#xA;              ElectricParameters rightParams = parameters as ElectricParameters;&#xD;&#xA;         }&#xD;&#xA;    }";;
12031176;5597165;541686;5;56702e1a-05f0-4733-9ddb-e6e8625972b9;2011-04-09 03:25:53.0;"In this situation, I would define a generic implementation of your abstract class, such that you get something like this:&#xD;&#xA;&#xD;&#xA;    public abstract class EngineBase<T>&#xD;&#xA;    {&#xD;&#xA;         public abstract void Refuel(T parameters);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then your implementations look like this:&#xD;&#xA;&#xD;&#xA;    public class ElectricEngine : EngineBase<ElectricParameters>&#xD;&#xA;    {&#xD;&#xA;         public override void Refuel(ElectricParameters parameters) { }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;**Alternatively**, you can define an interface, and pass a specific implementation to your methods:&#xD;&#xA;&#xD;&#xA;    public abstract class EngineBase&#xD;&#xA;    {&#xD;&#xA;         public abstract void Refuel(IRefuelParameters parameters);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then your implementations look like this:&#xD;&#xA;&#xD;&#xA;    public class ElectricEngine : EngineBase&#xD;&#xA;    {&#xD;&#xA;         public override void Refuel(IRefuelParameters parameters)&#xD;&#xA;         {&#xD;&#xA;              if(!(parameters is ElectricParameters))&#xD;&#xA;                  throw ApplicationException(""Not the right params!"");&#xD;&#xA;&#xD;&#xA;              ElectricParameters rightParams = parameters as ElectricParameters;&#xD;&#xA;         }&#xD;&#xA;    }";;added 32 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
96974612;31897620;1127052;2;6eaff4f7-fcfa-414d-8212-d913208581fb;2015-08-08 19:17:28.0;"I have the following code:&#xD;&#xA;&#xD;&#xA;Foo.h:&#xD;&#xA;&#xD;&#xA;    class Foo {&#xD;&#xA;       const Bar mBar;&#xD;&#xA;    &#xD;&#xA;    public:&#xD;&#xA;       Foo(const Bar &bar);&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;Foo.cpp:&#xD;&#xA;&#xD;&#xA;    #include ""Foo.h""&#xD;&#xA;    &#xD;&#xA;    Foo::Foo(const Bar &bar) : mBar(bar) {}&#xD;&#xA;&#xD;&#xA;I receive the following compilation error:&#xD;&#xA;&#xD;&#xA;> 'Foo::mBar' uses undefined class 'Bar'&#xD;&#xA;&#xD;&#xA;Is const definition not allowed in implementation file?&#xD;&#xA;&#xD;&#xA;Obviously in this case I could move ctor implementation into header file.&#xD;&#xA;&#xD;&#xA;But What is an alternative if I want to call Bar ctor which may take arguments requiring forward declaration instead of copy ctor and still keep Bar member variable constant?&#xD;&#xA;So for example:&#xD;&#xA;&#xD;&#xA;Foo.h:&#xD;&#xA;&#xD;&#xA;    class Foo {&#xD;&#xA;       const Bar mBar;&#xD;&#xA;    &#xD;&#xA;    public:&#xD;&#xA;       Foo(const BarParams &barParams);&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;Foo.cpp:&#xD;&#xA;&#xD;&#xA;    #include ""Foo.h""&#xD;&#xA;    &#xD;&#xA;    Foo::Foo(const BarParams &barParams) : mBar(barParams) {} //call bar ctor&#xD;&#xA;&#xD;&#xA;Bar.h:&#xD;&#xA;&#xD;&#xA;    class Bar{&#xD;&#xA;    public:&#xD;&#xA;       Bar(const BarParams &barParams);&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;Or am I not doing this right? I don't even know if this is a good idea.";;
96974666;31897620;1127052;5;3b482f21-2b3d-4f41-8abd-e995f79efbc0;2015-08-08 19:19:37.0;"I have the following code:&#xD;&#xA;&#xD;&#xA;Foo.h:&#xD;&#xA;&#xD;&#xA;    include ""Bar.h""&#xD;&#xA;&#xD;&#xA;    class Bar;&#xD;&#xA;&#xD;&#xA;    class Foo {&#xD;&#xA;       const Bar mBar;&#xD;&#xA;    &#xD;&#xA;    public:&#xD;&#xA;       Foo(const Bar &bar);&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;Foo.cpp:&#xD;&#xA;&#xD;&#xA;    #include ""Foo.h""&#xD;&#xA;    &#xD;&#xA;    Foo::Foo(const Bar &bar) : mBar(bar) {}&#xD;&#xA;&#xD;&#xA;I receive the following compilation error:&#xD;&#xA;&#xD;&#xA;> 'Foo::mBar' uses undefined class 'Bar'&#xD;&#xA;&#xD;&#xA;Is const definition not allowed in implementation file?&#xD;&#xA;&#xD;&#xA;Obviously in this case I could move ctor implementation into header file.&#xD;&#xA;&#xD;&#xA;But What is an alternative if I want to call Bar ctor which may take arguments requiring forward declaration instead of copy ctor and still keep Bar member variable constant?&#xD;&#xA;So for example:&#xD;&#xA;&#xD;&#xA;Foo.h:&#xD;&#xA;&#xD;&#xA;    include ""Bar.h""&#xD;&#xA;&#xD;&#xA;    class Bar;&#xD;&#xA;    class BaraParams;&#xD;&#xA;&#xD;&#xA;    class Foo {&#xD;&#xA;       const Bar mBar;&#xD;&#xA;    &#xD;&#xA;    public:&#xD;&#xA;       Foo(const BarParams &barParams);&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;Foo.cpp:&#xD;&#xA;&#xD;&#xA;    #include ""Foo.h""&#xD;&#xA;    &#xD;&#xA;    Foo::Foo(const BarParams &barParams) : mBar(barParams) {} //call bar ctor&#xD;&#xA;&#xD;&#xA;Bar.h:&#xD;&#xA;&#xD;&#xA;    include ""BarParams.h""&#xD;&#xA;&#xD;&#xA;    class Bar{&#xD;&#xA;    public:&#xD;&#xA;       Bar(const BarParams &barParams);&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;Or am I not doing this right? I don't even know if this is a good idea.";;added 41 characters in body

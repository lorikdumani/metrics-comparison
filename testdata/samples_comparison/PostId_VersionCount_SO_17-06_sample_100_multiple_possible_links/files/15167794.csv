Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
36774156;15167794;786718;2;991fa0f9-d5bf-47f6-a5ba-2f8e29f39a10;2013-03-01 22:16:19.0;"I am writing a custom class. There is a bitmap that needs to be calculated for some pre-processing and sizing before it actually gets drawn. The bitmap itself is a pre-processed 9-patch image. In the constructor, there is this code:&#xD;&#xA;&#xD;&#xA;    BitmapFactory.Options bmpOptions = new BitmapFactory.Options();&#xD;&#xA;    bmpOptions.inJustDecodeBounds = true;&#xD;&#xA;    BitmapFactory.decodeResource(getResources(), BITMAP_ID, maskOptions);&#xD;&#xA;    Bitmap bmp = BitmapFactory.decodeResource(getResources(), BITMAP_ID);&#xD;&#xA;            &#xD;&#xA;    Log.d(getClass().getSimpleName(), ""width: "" + bmp.getWidth() + "" "" + bmpOptions.outWidth + ""; height: "" + bmp.getHeight() + "" "" + bmpOptions.outHeight);&#xD;&#xA;&#xD;&#xA;Output on the 7"" Samsung Galaxy Tab 7 running Android 3.2.2:&#xD;&#xA;&#xD;&#xA;> width: 556 556; height: 890 890&#xD;&#xA;&#xD;&#xA;Output on the 10"" Motorola Xoom running Android 4.1:&#xD;&#xA;&#xD;&#xA;> width: 556 556; height: 890 890&#xD;&#xA;&#xD;&#xA;Output on the 7"" Nexus 7 running Android 4.2.2:&#xD;&#xA;&#xD;&#xA;> width: 740 834; height; 1185 1335&#xD;&#xA;&#xD;&#xA;The actual dimensions of the bitmap are:&#xD;&#xA;&#xD;&#xA;> mdpi: 558 x 892 &#xD;&#xA;&#xD;&#xA;> hdpi: 836 x 1337&#xD;&#xA;&#xD;&#xA;The bitmap is a pre-processed 9-patch which is why the sizes are off by 2 pixels.  I can not understand why the hdpi assets on the Nexus 7 would make this much of a difference.&#xD;&#xA;&#xD;&#xA;I have tried these configurations as well:&#xD;&#xA;&#xD;&#xA;    bmpOptions.inScaled = false;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;    bmpOptions.inDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = 0;&#xD;&#xA;    bmpOptions.inDensity = 0;&#xD;&#xA;&#xD;&#xA;All of these provide the same exact results.";;
36774393;15167794;786718;5;6cd1fe8f-5fe8-4813-9380-69d37182fcd7;2013-03-01 22:24:01.0;"I am writing a custom class. There is a bitmap that needs to be calculated for some pre-processing and sizing before it actually gets drawn. The bitmap itself is a pre-processed 9-patch image. In the constructor, there is this code:&#xD;&#xA;&#xD;&#xA;    BitmapFactory.Options bmpOptions = new BitmapFactory.Options();&#xD;&#xA;    bmpOptions.inJustDecodeBounds = true;&#xD;&#xA;    BitmapFactory.decodeResource(getResources(), BITMAP_ID, maskOptions);&#xD;&#xA;    Bitmap bmp = BitmapFactory.decodeResource(getResources(), BITMAP_ID);&#xD;&#xA;            &#xD;&#xA;    Log.d(getClass().getSimpleName(), ""width: "" + bmp.getWidth() + "" "" + bmpOptions.outWidth + ""; height: "" + bmp.getHeight() + "" "" + bmpOptions.outHeight);&#xD;&#xA;&#xD;&#xA;Output on the 7"" Samsung Galaxy Tab 7 running Android 3.2.2:&#xD;&#xA;&#xD;&#xA;> width: 556 556; height: 890 890&#xD;&#xA;&#xD;&#xA;Output on the 10"" Motorola Xoom running Android 4.1:&#xD;&#xA;&#xD;&#xA;> width: 556 556; height: 890 890&#xD;&#xA;&#xD;&#xA;Output on the 7"" Nexus 7 running Android 4.2.2:&#xD;&#xA;&#xD;&#xA;> width: 740 834; height; 1185 1335&#xD;&#xA;&#xD;&#xA;The actual dimensions of the bitmap are:&#xD;&#xA;&#xD;&#xA;> mdpi: 558 x 892 &#xD;&#xA;&#xD;&#xA;> hdpi: 836 x 1337&#xD;&#xA;&#xD;&#xA;The bitmap is a pre-processed 9-patch which is why the sizes are off by 2 pixels.  I can not understand why the hdpi assets on the Nexus 7 would make this much of a difference.&#xD;&#xA;&#xD;&#xA;I have tried these configurations as well:&#xD;&#xA;&#xD;&#xA;    bmpOptions.inScaled = false;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;    bmpOptions.inDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = 0;&#xD;&#xA;    bmpOptions.inDensity = 0;&#xD;&#xA;&#xD;&#xA;I have also tried the opposite approach and create a second BitmapFactory.Options for the decoded bitmap and tell it to not scale at all.&#xD;&#xA;&#xD;&#xA;All of these provide the same exact results.";;added 141 characters in body
36835417;15167794;786718;5;2c810618-3ceb-4543-824a-540782112855;2013-03-03 16:32:08.0;"I am writing a custom class. There is a bitmap that needs to be calculated for some pre-processing and sizing before it actually gets drawn. The bitmap itself is a pre-processed 9-patch image. In the constructor, there is this code:&#xD;&#xA;&#xD;&#xA;    BitmapFactory.Options bmpOptions = new BitmapFactory.Options();&#xD;&#xA;    bmpOptions.inJustDecodeBounds = true;&#xD;&#xA;    BitmapFactory.decodeResource(getResources(), BITMAP_ID, bmpOptions);&#xD;&#xA;    Bitmap bmp = BitmapFactory.decodeResource(getResources(), BITMAP_ID);&#xD;&#xA;            &#xD;&#xA;    Log.d(getClass().getSimpleName(), ""width: "" + bmp.getWidth() + "" "" + bmpOptions.outWidth + ""; height: "" + bmp.getHeight() + "" "" + bmpOptions.outHeight);&#xD;&#xA;&#xD;&#xA;Output on the 7"" Samsung Galaxy Tab 7 running Android 3.2.2:&#xD;&#xA;&#xD;&#xA;> width: 556 556; height: 890 890&#xD;&#xA;&#xD;&#xA;Output on the 10"" Motorola Xoom running Android 4.1:&#xD;&#xA;&#xD;&#xA;> width: 556 556; height: 890 890&#xD;&#xA;&#xD;&#xA;Output on the 7"" Nexus 7 running Android 4.2.2:&#xD;&#xA;&#xD;&#xA;> width: 740 834; height; 1185 1335&#xD;&#xA;&#xD;&#xA;The actual dimensions of the bitmap are:&#xD;&#xA;&#xD;&#xA;> mdpi: 558 x 892 &#xD;&#xA;&#xD;&#xA;> hdpi: 836 x 1337&#xD;&#xA;&#xD;&#xA;The bitmap is a pre-processed 9-patch which is why the sizes are off by 2 pixels.  I can not understand why the hdpi assets on the Nexus 7 would make this much of a difference.&#xD;&#xA;&#xD;&#xA;I have tried these configurations as well:&#xD;&#xA;&#xD;&#xA;    bmpOptions.inScaled = false;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;    bmpOptions.inDensity = getResources().getDisplayMetrics().densityDpi;&#xD;&#xA;&#xD;&#xA;and&#xD;&#xA;&#xD;&#xA;    bmpOptions.inTargetDensity = 0;&#xD;&#xA;    bmpOptions.inDensity = 0;&#xD;&#xA;&#xD;&#xA;I have also tried the opposite approach and create a second BitmapFactory.Options for the decoded bitmap and tell it to not scale at all.&#xD;&#xA;&#xD;&#xA;All of these provide the same exact results.";;deleted 1 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
54926184;20928013;169635;2;400b728f-690d-4071-90f7-98d2e472cac8;2014-01-04 23:27:12.0;"You can achieve it with [SoapExtension][1]. You can create class that implements SoapExtension, and register it in web.config.&#xD;&#xA;&#xD;&#xA;Sample of soap extension:&#xD;&#xA;&#xD;&#xA;	public class SecureSoapExtension : SoapExtension&#xD;&#xA;	{&#xD;&#xA;		&#xD;&#xA;		public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)&#xD;&#xA;		{&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override object GetInitializer(Type serviceType)&#xD;&#xA;		{&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override void Initialize(object initializer)&#xD;&#xA;		{&#xD;&#xA;			&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override void ProcessMessage(SoapMessage message)&#xD;&#xA;		{&#xD;&#xA;			// just for out requests&#xD;&#xA;			if (message.Stage == SoapMessageStage.BeforeSerialize)&#xD;&#xA;			{&#xD;&#xA;				// add needed soap header here&#xD;&#xA;				message.Headers.Add(new SecureSoapHeader());&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And register in web.config to apply to all web services:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;	  <system.web>&#xD;&#xA;		  <webServices>&#xD;&#xA;			  <soapExtensionTypes>&#xD;&#xA;				  <add type=""MyTestMvcApplication.SecureSoapExtension, MyTestMvcApplication, Version=1.0.0.0, Culture=neutral""></add>&#xD;&#xA;			  </soapExtensionTypes>&#xD;&#xA;		  </webServices>&#xD;&#xA;	  </system.web>&#xD;&#xA;&#xD;&#xA;  [1]: http://msdn.microsoft.com/en-us/library/system.web.services.protocols.soapextension%28v=vs.110%29.aspx";;
55004638;20928013;2606833;5;6cb6639a-b074-41cc-947e-d9d6a3c30172;2014-01-06 11:27:42.0;"You can achieve it with [SoapExtension][1]. You can create class that implements SoapExtension, and register it in web.config.&#xD;&#xA;&#xD;&#xA;Sample of soap extension:&#xD;&#xA;&#xD;&#xA;	public class SecureSoapExtension : SoapExtension&#xD;&#xA;	{&#xD;&#xA;		&#xD;&#xA;		public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)&#xD;&#xA;		{&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override object GetInitializer(Type serviceType)&#xD;&#xA;		{&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override void Initialize(object initializer)&#xD;&#xA;		{&#xD;&#xA;			&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		public override void ProcessMessage(SoapMessage message)&#xD;&#xA;		{&#xD;&#xA;			// just for out requests&#xD;&#xA;			if (message.Stage == SoapMessageStage.BeforeSerialize)&#xD;&#xA;			{&#xD;&#xA;				// add needed soap header here&#xD;&#xA;				message.Headers.Add(new SecureSoapHeader());&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And register in web.config to apply to all web services:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;	  <system.web>&#xD;&#xA;		  <webServices>&#xD;&#xA;			  <soapExtensionTypes>&#xD;&#xA;				  <add type=""MyTestMvcApplication.SecureSoapExtension, MyTestMvcApplication, Version=1.0.0.0, Culture=neutral""></add>&#xD;&#xA;			  </soapExtensionTypes>&#xD;&#xA;		  </webServices>&#xD;&#xA;	  </system.web>&#xD;&#xA;&#xD;&#xA;  [1]: http://msdn.microsoft.com/en-us/library/system.web.services.protocols.soapextension%28v=vs.110%29.aspx&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Important note:** If you are calling your Web Service from an external project, let's say, you have a Class Library where you program all your Proxy handling logic. You must add this to your calling project web.config/app.config too, otherwise it will not work:&#xD;&#xA;&#xD;&#xA;	  <system.web>&#xD;&#xA;		  <webServices>&#xD;&#xA;			  <soapExtensionTypes>&#xD;&#xA;				  <add type=""MyTestMvcApplication.SecureSoapExtension, MyTestMvcApplication, Version=1.0.0.0, Culture=neutral""></add>&#xD;&#xA;			  </soapExtensionTypes>&#xD;&#xA;		  </webServices>&#xD;&#xA;	  </system.web>&#xD;&#xA;&#xD;&#xA;What kind of makes sense, since it's an Web Service extension it's let up to you ""final caller"" of the proxy, to decide whether to extend or not the web service request.&#xD;&#xA;";;improved/corrected answer

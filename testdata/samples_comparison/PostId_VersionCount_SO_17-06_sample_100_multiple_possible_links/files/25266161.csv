Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
71308296;25266161;351711;2;13f50c3c-3145-48ec-a28f-d45e493fdf3e;2014-08-12 13:55:55.0;"We have an existing database where each of the entities has an Id like UserId, CustomerId.  I am trying to introduce a BaseEntity class like so:&#xD;&#xA;&#xD;&#xA;    public abstract class BaseEntity : IEntity&#xD;&#xA;    {&#xD;&#xA;      public int Id { get; protected set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This way I can access the Id property for any entity without having to know what it's called.  However this is causing us issues in the way we build out DbContext.  We are getting errors complaining about the Id property as it doesn't exist on the db table.  When we try to ignore it we get other errors like this:&#xD;&#xA;&#xD;&#xA;    You cannot use Ignore method on the property 'Id' on type 'xxx' because this type&#xD;&#xA;    inherits from the type 'xxx.BaseEntity' where this property is mapped. To exclude this     &#xD;&#xA;    property from your model, use NotMappedAttribute or Ignore method on the base type.&#xD;&#xA;&#xD;&#xA;However when we try to ignore the BaseEntity like so:&#xD;&#xA;&#xD;&#xA;    modelBuilder.Ignore<BaseEntity>();&#xD;&#xA;&#xD;&#xA;However we then get the error:&#xD;&#xA;&#xD;&#xA;    Invalid column name 'Id'.&#xD;&#xA;&#xD;&#xA;Clearly I am missing something quite obvious but any help would be appreciated.  Basically I want the Id property to be completely ignored by the EF DbContext as the way we are using it is outside the context of the DB.&#xD;&#xA;&#xD;&#xA;";;
71360535;25266161;351711;5;94cb05c1-4eef-4296-86bc-7f190a0c264f;2014-08-13 07:03:40.0;"We have an existing database where each of the entities has an Id like UserId, CustomerId.  I am trying to introduce a BaseEntity class like so:&#xD;&#xA;&#xD;&#xA;    public abstract class BaseEntity : IEntity&#xD;&#xA;    {&#xD;&#xA;      public int Id { get; protected set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This way I can access the Id property for any entity without having to know what it's called.  However this is causing us issues in the way we build out DbContext.  We are getting errors complaining about the Id property as it doesn't exist on the db table.  When we try to ignore it we get other errors like this:&#xD;&#xA;&#xD;&#xA;    You cannot use Ignore method on the property 'Id' on type 'xxx' because this type&#xD;&#xA;    inherits from the type 'xxx.BaseEntity' where this property is mapped. To exclude this     &#xD;&#xA;    property from your model, use NotMappedAttribute or Ignore method on the base type.&#xD;&#xA;&#xD;&#xA;However when we try to ignore the BaseEntity like so:&#xD;&#xA;&#xD;&#xA;    modelBuilder.Ignore<BaseEntity>();&#xD;&#xA;&#xD;&#xA;However we then get the error:&#xD;&#xA;&#xD;&#xA;    Invalid column name 'Id'.&#xD;&#xA;&#xD;&#xA;Clearly I am missing something quite obvious but any help would be appreciated.  Basically I want the Id property to be completely ignored by the EF DbContext as the way we are using it is outside the context of the DB.&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;&#xD;&#xA;It looks like if I call:&#xD;&#xA;&#xD;&#xA;    this.Ignore(e => e.Id);&#xD;&#xA;&#xD;&#xA;For every EntityTypeConfiguration then it works but I was hoping for a more generic solution, I tried creating a base configuration like so:&#xD;&#xA;&#xD;&#xA;      public abstract class BaseEntityTypeConfiguration<T> : EntityTypeConfiguration<T> where T : class, IEntity&#xD;&#xA;      {&#xD;&#xA;        public BaseEntityTypeConfiguration()&#xD;&#xA;        {&#xD;&#xA;          this.Ignore(e => e.Id);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;&#xD;&#xA;But I get this error again:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    You cannot use Ignore method on the property 'Id' on type 'xxx' because this type&#xD;&#xA;    inherits from the type 'xxx.BaseEntity' where this property is mapped. To exclude this     &#xD;&#xA;    property from your model, use NotMappedAttribute or Ignore method on the base type.&#xD;&#xA;&#xD;&#xA;Using NotMapped on the Id property on the base class does work but I was hoping to do this with the fluent api.  Any suggestions?";;added 886 characters in body

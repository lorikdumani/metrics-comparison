Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
52152701;20169153;1259391;2;a09f73ba-0587-4f30-8fcd-887ab5a967b4;2013-11-23 23:20:24.0;"I often resort to pen and paper when thinking about c pointers.&#xD;&#xA;&#xD;&#xA;_Pointer to an array_&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    [a] -> [b]&#xD;&#xA;           [c]&#xD;&#xA;           [d]&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;&#xD;&#xA;_An array of pointers_&#xD;&#xA;&#xD;&#xA;    [a] -> [j]&#xD;&#xA;    [b] -> [k]&#xD;&#xA;    [c] -> [l]&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;&#xD;&#xA;A pointer to an array contains the memory location of an array. Whereas an array of pointers contains lots of memory locations, which contain single values (or possibly other arrays, or arrays of pointers ;).";;
52153489;20169153;1259391;5;7a1054c3-447c-42ff-b989-c0a25667deb8;2013-11-23 23:47:43.0;"I often resort to pen and paper when thinking about c pointers.&#xD;&#xA;&#xD;&#xA;_Pointer to an array_&#xD;&#xA;&#xD;&#xA;    [a] -> [b]&#xD;&#xA;           [c]&#xD;&#xA;           [d]&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;&#xD;&#xA;_An array of pointers_&#xD;&#xA;&#xD;&#xA;    [a] -> [j]&#xD;&#xA;    [b] -> [k]&#xD;&#xA;    [c] -> [l]&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;&#xD;&#xA;A pointer to an array contains the memory location of an array. Whereas an array of pointers contains lots of memory locations, which contain single values (or possibly other arrays, or arrays of pointers ;).&#xD;&#xA;&#xD;&#xA;_Pointer to an array_&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr, *loopPtr;&#xD;&#xA;        ptr = malloc(10 * sizeof(int)); // allocate an array of 10 ints on the heap&#xD;&#xA;        &#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer &#xD;&#xA;        for(i=0; i < 10; i++) {&#xD;&#xA;            *loopPtr = i;         // dereference pointer and store i in it&#xD;&#xA;            loopPtr++;            // move pointer to next memory location&#xD;&#xA;        }&#xD;&#xA;        for(i=0; i < 10; i++) printf(""%d, "",i);&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;    }";;added 583 characters in body
52153722;20169153;1259391;5;ae870c4f-187d-47fc-9856-69867327c4be;2013-11-23 23:53:59.0;"I often resort to pen and paper when thinking about c pointers.&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    [a] -> [b]&#xD;&#xA;           [c]&#xD;&#xA;           [d]&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    [a] -> [j]&#xD;&#xA;    [b] -> [k]&#xD;&#xA;    [c] -> [l]&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;&#xD;&#xA;A pointer to an array contains the memory location of an array. Whereas an array of pointers contains lots of memory locations, which contain single values (or possibly other arrays, or arrays of pointers ;).&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr, *loopPtr;&#xD;&#xA;        ptr = malloc(10 * sizeof(int)); // allocate an array of 10 ints on the heap&#xD;&#xA;        &#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer &#xD;&#xA;        for(i=0; i < 10; i++) {&#xD;&#xA;            *loopPtr = i;         // dereference pointer and store i in it&#xD;&#xA;            loopPtr++;            // move pointer to next memory location&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer&#xD;&#xA;        for(i=0; i < 10; i++) &#xD;&#xA;            printf(""%d, "",*(loopPtr++)); // move across array printing&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        free(ptr);               // free memory allocated on the heap&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr[10];&#xD;&#xA;&#xD;&#xA;        // allocate an 10 ints on the heap pointed to by an array&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            ptr[i] = malloc(sizeof(int));&#xD;&#xA;&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            *ptr[i] = i;         // dereference pointer and store i in it&#xD;&#xA;    &#xD;&#xA;        for(i=0; i < 10; i++)    // iterate through array and dereference pointers&#xD;&#xA;            printf(""%d, "",*ptr[i]);&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        &#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            free(ptr[i]);&#xD;&#xA;    }";;added 583 characters in body
52153868;20169153;1259391;5;1d0ae0b7-1d9e-455a-b696-97a851fae7ef;2013-11-24 00:00:24.0;"I often resort to pen and paper when thinking about c pointers.&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    [a] -> [b]&#xD;&#xA;           [c]&#xD;&#xA;           [d]&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    [a] -> [j]&#xD;&#xA;    [b] -> [k]&#xD;&#xA;    [c] -> [l]&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;&#xD;&#xA;A pointer to an array contains the memory location of an array. Whereas an array of pointers contains lots of memory locations, which contain single values (or possibly other arrays, or arrays of pointers ;).&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr, *loopPtr;&#xD;&#xA;        ptr = malloc(10 * sizeof(int)); // allocate an array of 10 ints on the heap&#xD;&#xA;        &#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer &#xD;&#xA;        for(i=0; i < 10; i++) {&#xD;&#xA;            *loopPtr = i;         // dereference pointer and store i in it&#xD;&#xA;            loopPtr++;            // move pointer to next memory location&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer&#xD;&#xA;        for(i=0; i < 10; i++) &#xD;&#xA;            printf(""%d, "",*(loopPtr++)); // move across array printing&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        free(ptr);               // free memory allocated on the heap&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr[10];&#xD;&#xA;&#xD;&#xA;        // allocate an 10 ints on the heap pointed to by an array&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            ptr[i] = malloc(sizeof(int));&#xD;&#xA;&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            *ptr[i] = i;         // dereference pointer and store i in it&#xD;&#xA;    &#xD;&#xA;        for(i=0; i < 10; i++)    // iterate through array and dereference pointers&#xD;&#xA;            printf(""%d, "",*ptr[i]);&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        &#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            free(ptr[i]);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The best way to contrast the difference is probably with the `malloc()` calls, one returns a pointer to an array of 10 `ints` and the other returns 10 pointers to individual `ints`.";;added 583 characters in body
52154133;20169153;1259391;5;fc3b9c05-61d0-48c6-827a-991ace6ce97f;2013-11-24 00:09:50.0;"I often resort to pen and paper when thinking about c pointers.&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    [a] -> [b]&#xD;&#xA;           [c]&#xD;&#xA;           [d]&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    [a] -> [j]&#xD;&#xA;    [b] -> [k]&#xD;&#xA;    [c] -> [l]&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;&#xD;&#xA;A pointer to an array contains the memory location of an array. Whereas an array of pointers contains lots of memory locations, which contain single values (or possibly other arrays, or arrays of pointers ;).&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr, *loopPtr;&#xD;&#xA;        ptr = malloc(10 * sizeof(int)); // allocate an array of 10 ints on the heap&#xD;&#xA;        &#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer &#xD;&#xA;        for(i=0; i < 10; i++) {&#xD;&#xA;            *loopPtr = i;         // dereference pointer and store i in it&#xD;&#xA;            loopPtr++;            // move pointer to next memory location&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer&#xD;&#xA;        for(i=0; i < 10; i++) &#xD;&#xA;            printf(""%d, "",*(loopPtr++)); // move across array printing&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        free(ptr);               // free memory allocated on the heap&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr[10];&#xD;&#xA;&#xD;&#xA;        // allocate 10 ints on the heap pointed to by an array&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            ptr[i] = malloc(sizeof(int));&#xD;&#xA;&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            *ptr[i] = i;         // dereference pointer and store i in it&#xD;&#xA;    &#xD;&#xA;        for(i=0; i < 10; i++)    // iterate through array and dereference pointers&#xD;&#xA;            printf(""%d, "",*ptr[i]);&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        &#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            free(ptr[i]);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The best way to contrast the difference is probably with the `malloc()` calls, one returns a pointer to an array of 10 `ints` and the other returns 10 pointers to individual `ints`.";;deleted 3 characters in body
52154457;20169153;1259391;5;aa5f3a61-d0a1-410c-b9c6-c66b9903b759;2013-11-24 00:22:43.0;"I often resort to pen and paper when thinking about c pointers.&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    [a] -> [b]&#xD;&#xA;           [c]&#xD;&#xA;           [d]&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;            .&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    [a] -> [j]&#xD;&#xA;    [b] -> [k]&#xD;&#xA;    [c] -> [l]&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;     .      .&#xD;&#xA;&#xD;&#xA;A pointer to an array contains the memory location of an array. Whereas an array of pointers contains lots of memory locations, which contain single values (or possibly other arrays, or arrays of pointers ;).&#xD;&#xA;&#xD;&#xA;**Pointer to an array**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr, *loopPtr;&#xD;&#xA;        ptr = malloc(10 * sizeof(int)); // allocate an array of 10 ints on the heap&#xD;&#xA;        &#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer &#xD;&#xA;        for(i=0; i < 10; i++) {&#xD;&#xA;            *loopPtr = i;         // dereference pointer and store i in it&#xD;&#xA;            loopPtr++;            // move pointer to next memory location&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        loopPtr = ptr;            // copy pointer into temp pointer&#xD;&#xA;        for(i=0; i < 10; i++) &#xD;&#xA;            printf(""%d, "",*(loopPtr++)); // move across array printing&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        free(ptr);               // free memory allocated on the heap&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**An array of pointers**&#xD;&#xA;&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <stdlib.h>&#xD;&#xA;&#xD;&#xA;    void main(void) {&#xD;&#xA;        int i;&#xD;&#xA;        int *ptr[10];            // an array of pointers&#xD;&#xA;&#xD;&#xA;        // allocate 10 ints on the heap pointed to by an array&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            ptr[i] = malloc(sizeof(int));&#xD;&#xA;&#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            *ptr[i] = i;         // dereference pointer and store i in it&#xD;&#xA;    &#xD;&#xA;        for(i=0; i < 10; i++)    // iterate through array and dereference pointers&#xD;&#xA;            printf(""%d, "",*ptr[i]);&#xD;&#xA;        printf(""\\n"");&#xD;&#xA;        &#xD;&#xA;        for(i=0; i < 10; i++)&#xD;&#xA;            free(ptr[i]);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The best way to contrast the difference is probably with the `malloc()` calls, one returns a pointer to an array of 10 `ints` and the other returns 10 pointers to individual `ints`.";;added 35 characters in body

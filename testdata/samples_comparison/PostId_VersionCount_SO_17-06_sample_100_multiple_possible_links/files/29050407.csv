Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
85838652;29050407;270622;2;b09ac9bd-b8bd-442b-b4b8-b95af1f2a839;2015-03-14 15:07:36.0;"All,&#xD;&#xA;&#xD;&#xA;I am developing an Angular app (not my first) within an existing JavaScript application that is primarily based in jQuery and Django templates.&#xD;&#xA;&#xD;&#xA;In order to get to my Angular application from within the existing application, the URL will look like this:&#xD;&#xA;&#xD;&#xA;    /existing-application/#myapp/myapp&#xD;&#xA;&#xD;&#xA;I realized early that I would have to avoid the injection of $location anywhere in my application or else have Angular become utterly confused with the existing # (hashtag) in the URL.&#xD;&#xA;&#xD;&#xA;I have reached a point where this is no longer an option.  Therefore, I am setting `html5Mode: true` and am working with the `<base href="""" />` header tag to try and find a solution.&#xD;&#xA;&#xD;&#xA;However, the closest I have come to having this approach working results in a URL that looks like this after my page renders:&#xD;&#xA;&#xD;&#xA;    /existing-application/#myapp%2Fmyapp&#xD;&#xA;&#xD;&#xA;I currently have a base tag of:&#xD;&#xA;&#xD;&#xA;    <base href=""/existing-application/#myapp/myapp"" />&#xD;&#xA;&#xD;&#xA;This will load the Angular app. successfully but the URL is then rewritten automatically to:&#xD;&#xA;&#xD;&#xA;    /existing-application/#myapp%2Fmyapp&#xD;&#xA;&#xD;&#xA;Which causes all sorts of problems within and outside of my Angular application.&#xD;&#xA;&#xD;&#xA;I have read some reports of bugs wherein there is an issue with $location.rewrite that causes the trailing '/' to become escaped.&#xD;&#xA;&#xD;&#xA;I have attempted to work around this issue in several ways, from modifying the `<base />` tag, calling `$location.path('/existing-application/#myapp/myapp)` on page load, using `$routeProvider`, changing the `hashPrefix`, and it seems the closest I can ever come to is the escaped trailing slash.&#xD;&#xA;&#xD;&#xA;Changing the hashPrefix to '!' merely resulted in:&#xD;&#xA;&#xD;&#xA;    /existing-application/#!#myapp/myapp&#xD;&#xA;&#xD;&#xA;Any advice on what to try next?  I am not opposed to not using html5Mode, but without doing so I don't believe this approach will ever work.&#xD;&#xA;&#xD;&#xA;Thank you.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Angular Information:&#xD;&#xA; Angular v. 1.3.1";;
85843454;29050407;270622;5;478dbea5-99e2-4931-977e-c9e08c793a96;2015-03-14 16:59:24.0;"All,&#xD;&#xA;&#xD;&#xA;I am developing an Angular app (not my first) within an existing JavaScript application that is primarily based in jQuery and Django templates.&#xD;&#xA;&#xD;&#xA;In order to get to my Angular application from within the existing application, the URL will look like this:&#xD;&#xA;&#xD;&#xA;    /existing-application/#myapp/myapp&#xD;&#xA;&#xD;&#xA;I realized early that I would have to avoid the injection of $location anywhere in my application or else have Angular become utterly confused with the existing # (hashtag) in the URL.&#xD;&#xA;&#xD;&#xA;I have reached a point where this is no longer an option.  Therefore, I am setting `html5Mode: true` and am working with the `<base href="""" />` header tag to try and find a solution.&#xD;&#xA;&#xD;&#xA;However, the closest I have come to having this approach working results in a URL that looks like this after my page renders:&#xD;&#xA;&#xD;&#xA;    /existing-application/#myapp%2Fmyapp&#xD;&#xA;&#xD;&#xA;I currently have a base tag of:&#xD;&#xA;&#xD;&#xA;    <base href=""/existing-application/#myapp/myapp"" />&#xD;&#xA;&#xD;&#xA;This will load the Angular app. successfully but the URL is then rewritten automatically to:&#xD;&#xA;&#xD;&#xA;    /existing-application/#myapp%2Fmyapp&#xD;&#xA;&#xD;&#xA;Which causes all sorts of problems within and outside of my Angular application.&#xD;&#xA;&#xD;&#xA;I have read some reports of bugs wherein there is an issue with $location.rewrite that causes the trailing '/' to become escaped.&#xD;&#xA;&#xD;&#xA;I have attempted to work around this issue in several ways, from modifying the `<base />` tag, calling `$location.path('/existing-application/#myapp/myapp)` on page load, using `$routeProvider`, changing the `hashPrefix`, and it seems the closest I can ever come to is the escaped trailing slash.&#xD;&#xA;&#xD;&#xA;Changing the hashPrefix to '!' merely resulted in:&#xD;&#xA;&#xD;&#xA;    /existing-application/#!#myapp/myapp&#xD;&#xA;&#xD;&#xA;Any advice on what to try next?  I am not opposed to not using html5Mode, but without doing so I don't believe this approach will ever work.&#xD;&#xA;&#xD;&#xA;Thank you.&#xD;&#xA;&#xD;&#xA;Config Block:&#xD;&#xA;&#xD;&#xA;    .config(['$locationProvider', '$interpolateProvider', '$websocketProvider', &#xD;&#xA;    	         function($locationProvider, $interpolateProvider, $websocketProvider) {&#xD;&#xA;    		&#xD;&#xA;    		// inject meta 'base' href into <head> tag&#xD;&#xA;    		$('head').append('<base href=""/existing-application/#myapp/myapp"" />');&#xD;&#xA;    		&#xD;&#xA;    		$interpolateProvider.startSymbol('{$');&#xD;&#xA;    	    $interpolateProvider.endSymbol('$}');&#xD;&#xA;    	    &#xD;&#xA;    	    $locationProvider.html5Mode({&#xD;&#xA;    	    	  enabled: true,&#xD;&#xA;    	    	  rewriteLinks: false,&#xD;&#xA;    	    	  requireBase: true&#xD;&#xA;    	    	});&#xD;&#xA;&#xD;&#xA;Angular Information:&#xD;&#xA; Angular v. 1.3.1";;added 585 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
4988278;2448328;134554;2;b725149e-16ba-42f6-8a1c-a0f2af6d66b0;2010-03-15 15:35:28.0;"You can subscript a pointer the same way you can subscript an array, provided all the addresses have been set up correctly. &#xD;&#xA;&#xD;&#xA;Assuming the following declaration:&#xD;&#xA;&#xD;&#xA;    char **ptr;&#xD;&#xA;&#xD;&#xA;here are the types of the various expressions:&#xD;&#xA;&#xD;&#xA;<pre>&#xD;&#xA;       Expression        Type      Equivalent expressions (yield same value)     &#xD;&#xA;       ----------        ----      -----------------------------------------&#xD;&#xA;              ptr        char **   &ptr[0]&#xD;&#xA;             *ptr        char *    ptr[0] &#xD;&#xA;         *(ptr+i)        char *    ptr[i]; &ptr[i][0]&#xD;&#xA;            **ptr        char      ptr[0][0]&#xD;&#xA;      *(*(ptr+i))        char      ptr[i][0]; *ptr[i]&#xD;&#xA;    *(*(ptr+i)+j)        char      ptr[i][j]&#xD;&#xA;</pre>&#xD;&#xA;&#xD;&#xA;thus:&#xD;&#xA;&#xD;&#xA; - `ptr` can be treated *as though* it was an array of strings (2-d array of char)&#xD;&#xA; - `ptr` and `ptr[0]` both point to the beginning of the first string in the list&#xD;&#xA; - `ptr[i]` points to the beginning of the i'th string in the list&#xD;&#xA; - `ptr[i][j]` is the value of the j'th character of the i'th string in the list&#xD;&#xA; - The expressions `ptr++` and `++ptr` will advance `ptr` to point to the next string&#xD;&#xA; - The expressions `(*ptr)++` and `++(*ptr)` will advance `*ptr` to point to the next character&#xD;&#xA;&#xD;&#xA;As for setting up your pointers, this arrangement assumes everything has already been allocated as static arrays or dynamically through `malloc`.  You cannot just write&#xD;&#xA;&#xD;&#xA;    char **ptr = {""foo"", ""bar"", ""bletch""}; // using aggregate initializer on &#xD;&#xA;                                           // non-aggregate type; bad juju,&#xD;&#xA;                                           // a.k.a undefined behavior&#xD;&#xA;&#xD;&#xA;or&#xD;&#xA;&#xD;&#xA;    char **ptr;          // ptr has not been initialized to point anywhere &#xD;&#xA;    ptr[0] = ""foo"";      // dereferencing ptr via subscript invokes undefined&#xD;&#xA;    ptr[1] = ""bar"";      // behavior&#xD;&#xA;    ptr[2] = ""bletch"";&#xD;&#xA;&#xD;&#xA;Generally, when you're using a pointer as though it was an array, you'll use `malloc` or something similar to allocate your buffers:&#xD;&#xA;&#xD;&#xA;    char **ptr = malloc(sizeof *ptr * N);&#xD;&#xA;    if (ptr)&#xD;&#xA;    {&#xD;&#xA;      ptr[0] = ""foo"";    // ptr[i] gets address of&#xD;&#xA;      ptr[1] = ""bar"";    // string literal&#xD;&#xA;      ptr[2] = ""bletch"";&#xD;&#xA;      ...&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;or&#xD;&#xA;&#xD;&#xA;    char **ptr = malloc(sizeof *ptr * N);&#xD;&#xA;    if (ptr)&#xD;&#xA;    {&#xD;&#xA;      size_t i;&#xD;&#xA;      for (i = 0; i < N; i++)&#xD;&#xA;      {&#xD;&#xA;        ptr[i] = malloc(sizeof *ptr[i] * M); // strictly speaking, the sizeof&#xD;&#xA;        if (ptr[i])                          // is not necessary here&#xD;&#xA;        {&#xD;&#xA;          //initialize ptr[i]&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;";;
4993134;2448328;134554;5;6256622e-7d17-405c-945e-ad439cc79eb9;2010-03-15 21:20:11.0;"You can subscript a pointer the same way you can subscript an array, provided all the addresses have been set up correctly. &#xD;&#xA;&#xD;&#xA;Assuming the following declaration:&#xD;&#xA;&#xD;&#xA;    char **ptr;&#xD;&#xA;&#xD;&#xA;here are the types of the various expressions:&#xD;&#xA;&#xD;&#xA;<pre>&#xD;&#xA;       Expression        Type      Equivalent expressions (yield same value)     &#xD;&#xA;       ----------        ----      -----------------------------------------&#xD;&#xA;              ptr        char **   &ptr[0]&#xD;&#xA;             *ptr        char *    ptr[0] &#xD;&#xA;         *(ptr+i)        char *    ptr[i]; &ptr[i][0]&#xD;&#xA;            **ptr        char      ptr[0][0]&#xD;&#xA;      *(*(ptr+i))        char      ptr[i][0]; *ptr[i]&#xD;&#xA;    *(*(ptr+i)+j)        char      ptr[i][j]&#xD;&#xA;</pre>&#xD;&#xA;&#xD;&#xA;thus:&#xD;&#xA;&#xD;&#xA; - `ptr` can be treated *as though* it was an array of strings (2-d array of char)&#xD;&#xA; - `ptr[i]` points to the beginning of the i'th string in the list&#xD;&#xA; - `ptr[i][j]` is the value of the j'th character of the i'th string in the list&#xD;&#xA; - The expressions `ptr++` and `++ptr` will advance `ptr` to point to the next string&#xD;&#xA; - The expressions `(*ptr)++` and `++(*ptr)` will advance `*ptr` to point to the next character&#xD;&#xA;&#xD;&#xA;As for setting up your pointers, this arrangement assumes everything has already been allocated as static arrays or dynamically through `malloc`.  You cannot just write&#xD;&#xA;&#xD;&#xA;    char **ptr = {""foo"", ""bar"", ""bletch""}; // using aggregate initializer on &#xD;&#xA;                                           // non-aggregate type; bad juju,&#xD;&#xA;                                           // a.k.a undefined behavior&#xD;&#xA;&#xD;&#xA;or&#xD;&#xA;&#xD;&#xA;    char **ptr;          // ptr has not been initialized to point anywhere &#xD;&#xA;    ptr[0] = ""foo"";      // dereferencing ptr via subscript invokes undefined&#xD;&#xA;    ptr[1] = ""bar"";      // behavior&#xD;&#xA;    ptr[2] = ""bletch"";&#xD;&#xA;&#xD;&#xA;Generally, when you're using a pointer as though it was an array, you'll use `malloc` or something similar to allocate your buffers:&#xD;&#xA;&#xD;&#xA;    char **ptr = malloc(sizeof *ptr * N);&#xD;&#xA;    if (ptr)&#xD;&#xA;    {&#xD;&#xA;      ptr[0] = ""foo"";    // ptr[i] gets address of&#xD;&#xA;      ptr[1] = ""bar"";    // string literal&#xD;&#xA;      ptr[2] = ""bletch"";&#xD;&#xA;      ...&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;or&#xD;&#xA;&#xD;&#xA;    char **ptr = malloc(sizeof *ptr * N);&#xD;&#xA;    if (ptr)&#xD;&#xA;    {&#xD;&#xA;      size_t i;&#xD;&#xA;      for (i = 0; i < N; i++)&#xD;&#xA;      {&#xD;&#xA;        ptr[i] = malloc(sizeof *ptr[i] * M); // strictly speaking, the sizeof&#xD;&#xA;        if (ptr[i])                          // is not necessary here&#xD;&#xA;        {&#xD;&#xA;          //initialize ptr[i]&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;";;"Removed erroneous statement; ptr and ptr[0] are not equivalent"

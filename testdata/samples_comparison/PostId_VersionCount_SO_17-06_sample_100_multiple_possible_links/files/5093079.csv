Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
10837423;5093079;420652;2;ec04c916-be28-4b82-a0c6-a2ce1b859927;2011-02-23 15:35:34.0;"I'm trying to use many-to-many relation in Hibernate Framework, but I have some troubles.&#xD;&#xA;&#xD;&#xA;I have 2 models.&#xD;&#xA;&#xD;&#xA;User:&#xD;&#xA;&#xD;&#xA;    @Entity&#xD;&#xA;    public class User implements Serializable {&#xD;&#xA;	Long id;&#xD;&#xA;	String name;&#xD;&#xA;	List<Car> cars;&#xD;&#xA;	public User() {&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;	public Long getId() {&#xD;&#xA;		return id;&#xD;&#xA;	}&#xD;&#xA;	public void setId(Long id) {&#xD;&#xA;		this.id = id;&#xD;&#xA;	}&#xD;&#xA;	public String getName() {&#xD;&#xA;		return name;&#xD;&#xA;	}&#xD;&#xA;	public void setName(String name) {&#xD;&#xA;		this.name = name;&#xD;&#xA;	}&#xD;&#xA;	public List<Car> getCars() {&#xD;&#xA;		return cars;&#xD;&#xA;	}&#xD;&#xA;	public void setCars(List<Car> cars) {&#xD;&#xA;		this.cars = cars;&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Car:&#xD;&#xA;&#xD;&#xA;    @Entity&#xD;&#xA;    public class Car implements Serializable {&#xD;&#xA;	Long id;&#xD;&#xA;	String mark;&#xD;&#xA;	public Car() {&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;	public Long getId() {&#xD;&#xA;		return id;&#xD;&#xA;	}&#xD;&#xA;	public void setId(Long id) {&#xD;&#xA;		this.id = id;&#xD;&#xA;	}&#xD;&#xA;	public String getMark() {&#xD;&#xA;		return mark;&#xD;&#xA;	}&#xD;&#xA;	public void setMark(String mark) {&#xD;&#xA;		this.mark = mark;&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I followed by clues on this [page][1], so my configuration files looks like this:&#xD;&#xA;&#xD;&#xA;User: &#xD;&#xA;&#xD;&#xA;    <hibernate-mapping>&#xD;&#xA;    <class name=""com.bontade.phone_book.mvc.spring.models.User"" table=""USERS"">&#xD;&#xA;        <id name=""id"" type=""java.lang.Long"">&#xD;&#xA;            <column name=""ID"" />&#xD;&#xA;            <generator class=""identity"" />&#xD;&#xA;        </id>        &#xD;&#xA;        <property name=""name"" not-null=""true"" length=""100"" type=""java.lang.String"">&#xD;&#xA;            <column name=""NAME"" />&#xD;&#xA;        </property>       &#xD;&#xA;        <list name=""cars"" table=""USER_CAR"" cascade=""all"">&#xD;&#xA;            <key>&#xD;&#xA;                <column name=""USER_ID"" />&#xD;&#xA;            </key>&#xD;&#xA;            <list-index></list-index>&#xD;&#xA;            <many-to-many column=""CAR_ID"" class=""com.bontade.phone_book.mvc.spring.models.Car"" />&#xD;&#xA;        </list>        &#xD;&#xA;    </class>&#xD;&#xA;    </hibernate-mapping>&#xD;&#xA;&#xD;&#xA;Car:&#xD;&#xA;&#xD;&#xA;    <hibernate-mapping>&#xD;&#xA;    <class name=""com.bontade.phone_book.mvc.spring.models.Car"" table=""CARS"">&#xD;&#xA;        <id name=""id"" type=""java.lang.Long"">&#xD;&#xA;            <column name=""ID"" />&#xD;&#xA;            <generator class=""identity"" />&#xD;&#xA;        </id>&#xD;&#xA;        <property name=""mark""  not-null=""true"" length=""20"" type=""java.lang.String"">&#xD;&#xA;            <column name=""MARK"" />&#xD;&#xA;        </property>		&#xD;&#xA;    </class>&#xD;&#xA;    </hibernate-mapping>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;But when I execute following code:&#xD;&#xA;&#xD;&#xA;        Car markCar = new Car();&#xD;&#xA;		markCar.setId(1L);&#xD;&#xA;		markCar.setMark(""111"");&#xD;&#xA;		carDAO.saveCar(markCar);&#xD;&#xA;		&#xD;&#xA;		User mark = new User();&#xD;&#xA;		mark.setId(null);&#xD;&#xA;		mark.setName(""mark"");&#xD;&#xA;		List a = new ArrayList<Car>();&#xD;&#xA;		a.add(markCar);&#xD;&#xA;		mark.setCars(a);&#xD;&#xA;		userDAO.saveUser(mark);&#xD;&#xA;		&#xD;&#xA;		List<User> users = userDAO.getAll();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I'm getting errors:&#xD;&#xA;&#xD;&#xA;    	Hibernate: update CARS set MARK=? where ID=?&#xD;&#xA;	2011-02-23 16:32:34 org.apache.catalina.core.StandardWrapperValve invoke&#xD;&#xA;	SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/PhoneBook] threw exception [Request processing failed; nested exception is org.springframework.orm.hibernate3.HibernateOptimisticLockingFailureException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1; nested exception is org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1] with root cause&#xD;&#xA;	org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1&#xD;&#xA;		at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:85)&#xD;&#xA;		at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:70)&#xD;&#xA;		at org.hibernate.jdbc.BatchingBatcher.checkRowCounts(BatchingBatcher.java:90)&#xD;&#xA;		at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:70)&#xD;&#xA;		at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:268)&#xD;&#xA;		at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:266)&#xD;&#xA;		at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:168)&#xD;&#xA;		at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321)&#xD;&#xA;		at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50)&#xD;&#xA;		at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1028)&#xD;&#xA;		at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:366)&#xD;&#xA;		at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137)&#xD;&#xA;		at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:655)&#xD;&#xA;		at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:732)&#xD;&#xA;		at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701)&#xD;&#xA;		at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.models.dao.implementations.CarDAOImplementation.saveCar(CarDAOImplementation.java:30)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.controllers.HomePageController.handleRequestInternal(HomePageController.java:43)&#xD;&#xA;		at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)&#xD;&#xA;		at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:96)&#xD;&#xA;		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)&#xD;&#xA;		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)&#xD;&#xA;		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)&#xD;&#xA;		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)&#xD;&#xA;		at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)&#xD;&#xA;		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)&#xD;&#xA;		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)&#xD;&#xA;		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)&#xD;&#xA;		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)&#xD;&#xA;		at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;		at java.lang.Thread.run(Thread.java:662)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.vaannila.com/hibernate/hibernate-example/hibernate-mapping-many-to-many-1.html";;
10838343;5093079;420652;5;f7936c2b-4bb2-459c-9c3b-5e55952228f6;2011-02-23 16:08:55.0;"I'm trying to use many-to-many relation in Hibernate Framework, but I have some troubles.&#xD;&#xA;&#xD;&#xA;I have 2 models.&#xD;&#xA;&#xD;&#xA;User:&#xD;&#xA;&#xD;&#xA;    @Entity&#xD;&#xA;    public class User implements Serializable {&#xD;&#xA;	Long id;&#xD;&#xA;	String name;&#xD;&#xA;	List<Car> cars;&#xD;&#xA;	public User() {&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;	public Long getId() {&#xD;&#xA;		return id;&#xD;&#xA;	}&#xD;&#xA;	public void setId(Long id) {&#xD;&#xA;		this.id = id;&#xD;&#xA;	}&#xD;&#xA;	public String getName() {&#xD;&#xA;		return name;&#xD;&#xA;	}&#xD;&#xA;	public void setName(String name) {&#xD;&#xA;		this.name = name;&#xD;&#xA;	}&#xD;&#xA;	public List<Car> getCars() {&#xD;&#xA;		return cars;&#xD;&#xA;	}&#xD;&#xA;	public void setCars(List<Car> cars) {&#xD;&#xA;		this.cars = cars;&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Car:&#xD;&#xA;&#xD;&#xA;    @Entity&#xD;&#xA;    public class Car implements Serializable {&#xD;&#xA;	Long id;&#xD;&#xA;	String mark;&#xD;&#xA;	public Car() {&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;	public Long getId() {&#xD;&#xA;		return id;&#xD;&#xA;	}&#xD;&#xA;	public void setId(Long id) {&#xD;&#xA;		this.id = id;&#xD;&#xA;	}&#xD;&#xA;	public String getMark() {&#xD;&#xA;		return mark;&#xD;&#xA;	}&#xD;&#xA;	public void setMark(String mark) {&#xD;&#xA;		this.mark = mark;&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I followed by clues on this [page][1], so my configuration files looks like this:&#xD;&#xA;&#xD;&#xA;User: &#xD;&#xA;&#xD;&#xA;    <hibernate-mapping>&#xD;&#xA;    <class name=""com.bontade.phone_book.mvc.spring.models.User"" table=""USERS"">&#xD;&#xA;        <id name=""id"" type=""java.lang.Long"">&#xD;&#xA;            <column name=""ID"" />&#xD;&#xA;            <generator class=""identity"" />&#xD;&#xA;        </id>        &#xD;&#xA;        <property name=""name"" not-null=""true"" length=""100"" type=""java.lang.String"">&#xD;&#xA;            <column name=""NAME"" />&#xD;&#xA;        </property>       &#xD;&#xA;        <list name=""cars"" table=""USER_CAR"" cascade=""all"">&#xD;&#xA;            <key>&#xD;&#xA;                <column name=""USER_ID"" />&#xD;&#xA;            </key>&#xD;&#xA;            <list-index></list-index>&#xD;&#xA;            <many-to-many column=""CAR_ID"" class=""com.bontade.phone_book.mvc.spring.models.Car"" />&#xD;&#xA;        </list>        &#xD;&#xA;    </class>&#xD;&#xA;    </hibernate-mapping>&#xD;&#xA;&#xD;&#xA;Car:&#xD;&#xA;&#xD;&#xA;    <hibernate-mapping>&#xD;&#xA;    <class name=""com.bontade.phone_book.mvc.spring.models.Car"" table=""CARS"">&#xD;&#xA;        <id name=""id"" type=""java.lang.Long"">&#xD;&#xA;            <column name=""ID"" />&#xD;&#xA;            <generator class=""identity"" />&#xD;&#xA;        </id>&#xD;&#xA;        <property name=""mark""  not-null=""true"" length=""20"" type=""java.lang.String"">&#xD;&#xA;            <column name=""MARK"" />&#xD;&#xA;        </property>		&#xD;&#xA;    </class>&#xD;&#xA;    </hibernate-mapping>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;But when I execute following code:&#xD;&#xA;&#xD;&#xA;        Car markCar = new Car();&#xD;&#xA;		markCar.setId(1L);&#xD;&#xA;		markCar.setMark(""111"");&#xD;&#xA;		carDAO.saveCar(markCar);&#xD;&#xA;		&#xD;&#xA;		User mark = new User();&#xD;&#xA;		mark.setId(null);&#xD;&#xA;		mark.setName(""mark"");&#xD;&#xA;		List a = new ArrayList<Car>();&#xD;&#xA;		a.add(markCar);&#xD;&#xA;		mark.setCars(a);&#xD;&#xA;		userDAO.saveUser(mark);&#xD;&#xA;		&#xD;&#xA;		List<User> users = userDAO.getAll();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I'm getting errors:&#xD;&#xA;&#xD;&#xA;    	Hibernate: update CARS set MARK=? where ID=?&#xD;&#xA;	2011-02-23 16:32:34 org.apache.catalina.core.StandardWrapperValve invoke&#xD;&#xA;	SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/PhoneBook] threw exception [Request processing failed; nested exception is org.springframework.orm.hibernate3.HibernateOptimisticLockingFailureException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1; nested exception is org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1] with root cause&#xD;&#xA;	org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1&#xD;&#xA;		at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:85)&#xD;&#xA;		at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:70)&#xD;&#xA;		at org.hibernate.jdbc.BatchingBatcher.checkRowCounts(BatchingBatcher.java:90)&#xD;&#xA;		at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:70)&#xD;&#xA;		at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:268)&#xD;&#xA;		at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:266)&#xD;&#xA;		at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:168)&#xD;&#xA;		at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321)&#xD;&#xA;		at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50)&#xD;&#xA;		at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1028)&#xD;&#xA;		at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:366)&#xD;&#xA;		at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137)&#xD;&#xA;		at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:655)&#xD;&#xA;		at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:732)&#xD;&#xA;		at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701)&#xD;&#xA;		at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.models.dao.implementations.CarDAOImplementation.saveCar(CarDAOImplementation.java:30)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.controllers.HomePageController.handleRequestInternal(HomePageController.java:43)&#xD;&#xA;		at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)&#xD;&#xA;		at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:96)&#xD;&#xA;		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)&#xD;&#xA;		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)&#xD;&#xA;		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)&#xD;&#xA;		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)&#xD;&#xA;		at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)&#xD;&#xA;		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)&#xD;&#xA;		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)&#xD;&#xA;		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)&#xD;&#xA;		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)&#xD;&#xA;		at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;		at java.lang.Thread.run(Thread.java:662)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;**Update**&#xD;&#xA;&#xD;&#xA;    public class CarAOImplementation implements CarDAO {&#xD;&#xA;&#xD;&#xA;	private HibernateTemplate hibernateTemplate;&#xD;&#xA;	private TransactionTemplate transactionTemplate;&#xD;&#xA;	public void setSessionFactory(SessionFactory sessionFactory) {&#xD;&#xA;		this.hibernateTemplate = new HibernateTemplate(sessionFactory);&#xD;&#xA;	}&#xD;&#xA;	public void setTransactionTemplate(TransactionTemplate transactionTemplate) {&#xD;&#xA;		this.transactionTemplate = transactionTemplate;&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;	public void saveCar(final Car car) {&#xD;&#xA;		// TODO Auto-generated method stub&#xD;&#xA;		this.transactionTemplate.execute(new TransactionCallback() {&#xD;&#xA;&#xD;&#xA;			public Object doInTransaction(TransactionStatus transactionStatus) {&#xD;&#xA;				try {&#xD;&#xA;					hibernateTemplate.saveOrUpdate(car);&#xD;&#xA;				} catch (Exception e) {&#xD;&#xA;					transactionStatus.setRollbackOnly();&#xD;&#xA;				}&#xD;&#xA;				return null;&#xD;&#xA;			}&#xD;&#xA;		});&#xD;&#xA;	}&#xD;&#xA;    ...&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.vaannila.com/hibernate/hibernate-example/hibernate-mapping-many-to-many-1.html";;added 872 characters in body
10839281;5093079;420652;5;d02e8e75-4831-4e14-9aa1-5b2c3f2b80b5;2011-02-23 16:38:13.0;"I'm trying to use many-to-many relation in Hibernate Framework, but I have some troubles.&#xD;&#xA;&#xD;&#xA;I have 2 models.&#xD;&#xA;&#xD;&#xA;User:&#xD;&#xA;&#xD;&#xA;    @Entity&#xD;&#xA;    public class User implements Serializable {&#xD;&#xA;	Long id;&#xD;&#xA;	String name;&#xD;&#xA;	List<Car> cars;&#xD;&#xA;	public User() {&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;	public Long getId() {&#xD;&#xA;		return id;&#xD;&#xA;	}&#xD;&#xA;	public void setId(Long id) {&#xD;&#xA;		this.id = id;&#xD;&#xA;	}&#xD;&#xA;	public String getName() {&#xD;&#xA;		return name;&#xD;&#xA;	}&#xD;&#xA;	public void setName(String name) {&#xD;&#xA;		this.name = name;&#xD;&#xA;	}&#xD;&#xA;	public List<Car> getCars() {&#xD;&#xA;		return cars;&#xD;&#xA;	}&#xD;&#xA;	public void setCars(List<Car> cars) {&#xD;&#xA;		this.cars = cars;&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Car:&#xD;&#xA;&#xD;&#xA;    @Entity&#xD;&#xA;    public class Car implements Serializable {&#xD;&#xA;	Long id;&#xD;&#xA;	String mark;&#xD;&#xA;	public Car() {&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;	public Long getId() {&#xD;&#xA;		return id;&#xD;&#xA;	}&#xD;&#xA;	public void setId(Long id) {&#xD;&#xA;		this.id = id;&#xD;&#xA;	}&#xD;&#xA;	public String getMark() {&#xD;&#xA;		return mark;&#xD;&#xA;	}&#xD;&#xA;	public void setMark(String mark) {&#xD;&#xA;		this.mark = mark;&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I followed by clues on this [page][1], so my configuration files looks like this:&#xD;&#xA;&#xD;&#xA;User: &#xD;&#xA;&#xD;&#xA;    <hibernate-mapping>&#xD;&#xA;    <class name=""com.bontade.phone_book.mvc.spring.models.User"" table=""USERS"">&#xD;&#xA;        <id name=""id"" type=""java.lang.Long"">&#xD;&#xA;            <column name=""ID"" />&#xD;&#xA;            <generator class=""identity"" />&#xD;&#xA;        </id>        &#xD;&#xA;        <property name=""name"" not-null=""true"" length=""100"" type=""java.lang.String"">&#xD;&#xA;            <column name=""NAME"" />&#xD;&#xA;        </property>       &#xD;&#xA;        <list name=""cars"" table=""USER_CAR"" cascade=""all"">&#xD;&#xA;            <key>&#xD;&#xA;                <column name=""USER_ID"" />&#xD;&#xA;            </key>&#xD;&#xA;            <list-index></list-index>&#xD;&#xA;            <many-to-many column=""CAR_ID"" class=""com.bontade.phone_book.mvc.spring.models.Car"" />&#xD;&#xA;        </list>        &#xD;&#xA;    </class>&#xD;&#xA;    </hibernate-mapping>&#xD;&#xA;&#xD;&#xA;Car:&#xD;&#xA;&#xD;&#xA;    <hibernate-mapping>&#xD;&#xA;    <class name=""com.bontade.phone_book.mvc.spring.models.Car"" table=""CARS"">&#xD;&#xA;        <id name=""id"" type=""java.lang.Long"">&#xD;&#xA;            <column name=""ID"" />&#xD;&#xA;            <generator class=""identity"" />&#xD;&#xA;        </id>&#xD;&#xA;        <property name=""mark""  not-null=""true"" length=""20"" type=""java.lang.String"">&#xD;&#xA;            <column name=""MARK"" />&#xD;&#xA;        </property>		&#xD;&#xA;    </class>&#xD;&#xA;    </hibernate-mapping>&#xD;&#xA;&#xD;&#xA;I'm getting errors:&#xD;&#xA;&#xD;&#xA;    	Hibernate: update CARS set MARK=? where ID=?&#xD;&#xA;	2011-02-23 16:32:34 org.apache.catalina.core.StandardWrapperValve invoke&#xD;&#xA;	SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/PhoneBook] threw exception [Request processing failed; nested exception is org.springframework.orm.hibernate3.HibernateOptimisticLockingFailureException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1; nested exception is org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1] with root cause&#xD;&#xA;	org.hibernate.StaleStateException: Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1&#xD;&#xA;		at org.hibernate.jdbc.Expectations$BasicExpectation.checkBatched(Expectations.java:85)&#xD;&#xA;		at org.hibernate.jdbc.Expectations$BasicExpectation.verifyOutcome(Expectations.java:70)&#xD;&#xA;		at org.hibernate.jdbc.BatchingBatcher.checkRowCounts(BatchingBatcher.java:90)&#xD;&#xA;		at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:70)&#xD;&#xA;		at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:268)&#xD;&#xA;		at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:266)&#xD;&#xA;		at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:168)&#xD;&#xA;		at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321)&#xD;&#xA;		at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:50)&#xD;&#xA;		at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1028)&#xD;&#xA;		at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:366)&#xD;&#xA;		at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137)&#xD;&#xA;		at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:655)&#xD;&#xA;		at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:732)&#xD;&#xA;		at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:701)&#xD;&#xA;		at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.models.dao.implementations.CarDAOImplementation.saveCar(CarDAOImplementation.java:30)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.controllers.HomePageController.handleRequestInternal(HomePageController.java:43)&#xD;&#xA;		at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)&#xD;&#xA;		at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:96)&#xD;&#xA;		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)&#xD;&#xA;		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)&#xD;&#xA;		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)&#xD;&#xA;		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)&#xD;&#xA;		at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)&#xD;&#xA;		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)&#xD;&#xA;		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)&#xD;&#xA;		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)&#xD;&#xA;		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)&#xD;&#xA;		at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;		at java.lang.Thread.run(Thread.java:662)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;**Update**&#xD;&#xA;&#xD;&#xA;    public class CarAOImplementation implements CarDAO {&#xD;&#xA;&#xD;&#xA;	private HibernateTemplate hibernateTemplate;&#xD;&#xA;	private TransactionTemplate transactionTemplate;&#xD;&#xA;	public void setSessionFactory(SessionFactory sessionFactory) {&#xD;&#xA;		this.hibernateTemplate = new HibernateTemplate(sessionFactory);&#xD;&#xA;	}&#xD;&#xA;	public void setTransactionTemplate(TransactionTemplate transactionTemplate) {&#xD;&#xA;		this.transactionTemplate = transactionTemplate;&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	@Override&#xD;&#xA;	public void saveCar(final Car car) {&#xD;&#xA;		// TODO Auto-generated method stub&#xD;&#xA;		this.transactionTemplate.execute(new TransactionCallback() {&#xD;&#xA;&#xD;&#xA;			public Object doInTransaction(TransactionStatus transactionStatus) {&#xD;&#xA;				try {&#xD;&#xA;					hibernateTemplate.saveOrUpdate(car);&#xD;&#xA;				} catch (Exception e) {&#xD;&#xA;					transactionStatus.setRollbackOnly();&#xD;&#xA;				}&#xD;&#xA;				return null;&#xD;&#xA;			}&#xD;&#xA;		});&#xD;&#xA;	}&#xD;&#xA;    ...&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;-------------&#xD;&#xA;**Update 2**&#xD;&#xA;&#xD;&#xA;    Car markCar = new Car();&#xD;&#xA;    markCar.setId(null);&#xD;&#xA;    markCar.setMark(""111"");&#xD;&#xA;    carDAO.saveCar(markCar);&#xD;&#xA;&#xD;&#xA;    User mark = new User();&#xD;&#xA;    mark.setId(null);&#xD;&#xA;    mark.setName(""mark"");&#xD;&#xA;    List a = new ArrayList<Car>();&#xD;&#xA;    a.add(markCar);&#xD;&#xA;    mark.setCars(a);&#xD;&#xA;    userDAO.saveUser(mark);&#xD;&#xA;    List<User> users = userDAO.getAll();&#xD;&#xA;    System.out.println(""=="" + users.size() + ""==="");&#xD;&#xA;    System.out.println(users.get(0).getCars().get(0).getMark());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Stack trace: &#xD;&#xA;&#xD;&#xA;    	Hibernate: select user0_.ID as ID0_, user0_.NAME as NAME0_ from USERS user0_&#xD;&#xA;	==1==&#xD;&#xA;	2011-02-23 17:35:10 org.apache.catalina.core.StandardWrapperValve invoke&#xD;&#xA;	SEVERE: Servlet.service() for servlet [dispatcher] in context with path [/PhoneBook] threw exception [Request processing failed; nested exception is org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.bontade.phone_book.mvc.spring.models.User.cars, no session or session was closed] with root cause&#xD;&#xA;	org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.bontade.phone_book.mvc.spring.models.User.cars, no session or session was closed&#xD;&#xA;		at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:380)&#xD;&#xA;		at org.hibernate.collection.AbstractPersistentCollection.throwLazyInitializationExceptionIfNotConnected(AbstractPersistentCollection.java:372)&#xD;&#xA;		at org.hibernate.collection.AbstractPersistentCollection.readElementByIndex(AbstractPersistentCollection.java:173)&#xD;&#xA;		at org.hibernate.collection.PersistentList.get(PersistentList.java:293)&#xD;&#xA;		at com.bontade.phone_book.mvc.spring.controllers.HomePageController.handleRequestInternal(HomePageController.java:59)&#xD;&#xA;		at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:153)&#xD;&#xA;		at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:875)&#xD;&#xA;		at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:807)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:571)&#xD;&#xA;		at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:501)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)&#xD;&#xA;		at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:96)&#xD;&#xA;		at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244)&#xD;&#xA;		at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#xD;&#xA;		at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)&#xD;&#xA;		at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161)&#xD;&#xA;		at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)&#xD;&#xA;		at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:108)&#xD;&#xA;		at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:558)&#xD;&#xA;		at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)&#xD;&#xA;		at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:379)&#xD;&#xA;		at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243)&#xD;&#xA;		at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:259)&#xD;&#xA;		at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:281)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;		at java.lang.Thread.run(Thread.java:662)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.vaannila.com/hibernate/hibernate-example/hibernate-mapping-many-to-many-1.html";;added 3859 characters in body

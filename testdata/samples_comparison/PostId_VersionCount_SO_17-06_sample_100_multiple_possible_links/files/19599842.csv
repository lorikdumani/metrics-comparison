Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
50118488;19599842;2581969;2;556617dc-4a6a-4f1e-a689-fb6b6f2a3cf2;2013-10-25 21:40:36.0;"    caps = sum(1 for c in pw if c.isupper())&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    caps = sum(c.isupper() for c in pw)&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;    if caps >= 1:&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    if caps:&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;The bottom `if`/`elif` block can be completely removed by doing&#xD;&#xA;&#xD;&#xA;    i_strength = sum(map(bool,[caps,lower,nums]))&#xD;&#xA;    print('your password is {}'.format(scr[i_strength]))&#xD;&#xA;&#xD;&#xA;Explanation: `map(bool,[caps,lower,nums])` accumulates how many times each of `caps,lower,nums` is non-zero.  Adding them up with `sum` gives you your ""strength"", which you've conveniently already put into a list, which can be accessed by index.";;
50118813;19599842;2581969;5;a97cc633-90b8-47dc-a362-b96a3f651f1d;2013-10-25 21:46:34.0;"    caps = sum(1 for c in pw if c.isupper())&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    caps = sum(c.isupper() for c in pw)&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;    if caps >= 1:&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    if caps:&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;The bottom `if`/`elif` block can be completely removed by doing&#xD;&#xA;&#xD;&#xA;    i_strength = sum(map(bool,[caps,lower,nums])) #or sum(map(bool,r))&#xD;&#xA;    print('your password is {}'.format(scr[i_strength]))&#xD;&#xA;&#xD;&#xA;Explanation: `map(bool,[caps,lower,nums])` accumulates how many times each of `caps,lower,nums` is non-zero.  Adding them up with `sum` gives you your ""strength"", which you've conveniently already put into a list, which can be accessed by index.&#xD;&#xA;&#xD;&#xA;All of these improvements take advantage of the concept of ""falsiness"" in python, otherwise known as an object's value in a boolean context.  Generally empty and zero things are `False`, which is leveraged by the above.";;added 236 characters in body
50119095;19599842;2581969;5;b1639d44-f753-4696-aab6-a508955ef891;2013-10-25 21:52:41.0;"    caps = sum(1 for c in pw if c.isupper())&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    caps = sum(c.isupper() for c in pw)&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;    if caps >= 1:&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    if caps:&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;The most *significant* improvement: The bottom `if`/`elif` block can be completely removed by doing&#xD;&#xA;&#xD;&#xA;    i_strength = sum(map(bool,[caps,lower,nums])) #or sum(map(bool,r))&#xD;&#xA;    print('your password is {}'.format(scr[i_strength]))&#xD;&#xA;&#xD;&#xA;Explanation: `map(bool,[caps,lower,nums])` accumulates how many times each of `caps,lower,nums` is non-zero.  Adding them up with `sum` gives you your ""strength"", which you've conveniently already put into a list, which can be accessed by index.&#xD;&#xA;&#xD;&#xA;All of these improvements take advantage of the concept of ""falsiness"" in python, otherwise known as an object's value in a boolean context.  Generally empty and zero things are `False`, which is leveraged by the above.";;added 36 characters in body
50119385;19599842;2581969;5;f1bbc554-d507-42df-b0f1-6ae479b47ad5;2013-10-25 21:57:48.0;"    caps = sum(1 for c in pw if c.isupper())&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    caps = sum(c.isupper() for c in pw)&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;    if caps >= 1:&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    if caps:&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;The most *significant* improvement: The bottom `if`/`elif` block can be completely removed by doing&#xD;&#xA;&#xD;&#xA;    i_strength = sum(map(bool,[caps,lower,nums])) #or sum(map(bool,r))&#xD;&#xA;    print('your password is {}'.format(scr[i_strength]))&#xD;&#xA;&#xD;&#xA;Explanation: `map(bool,[caps,lower,nums])` accumulates how many times each of `caps,lower,nums` is non-zero.  Adding them up with `sum` gives you your ""strength"", which you've conveniently already put into a list, which can be accessed by index.&#xD;&#xA;&#xD;&#xA;All of these improvements leverage the concept of ""falsiness"" in python, otherwise known as an object's value in a boolean context.  Generally empty and zero things are `False`, and summing booleans is equivalent to adding ones and zeroes, so there you go.";;added 36 characters in body
50120154;19599842;2581969;5;abb7b22d-cbee-468d-837f-ccd641ac7f7e;2013-10-25 22:21:41.0;"    caps = sum(1 for c in pw if c.isupper())&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    caps = sum(c.isupper() for c in pw)&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;    if caps >= 1:&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    if caps:&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;The most *significant* improvement: The bottom `if`/`elif` block can be completely removed by doing&#xD;&#xA;&#xD;&#xA;    i_strength = sum(map(bool,[caps,lower,nums])) - 1 #or sum(map(bool,r)) - 1&#xD;&#xA;    print('your password is {}'.format(scr[i_strength]))&#xD;&#xA;&#xD;&#xA;Explanation: `map(bool,[caps,lower,nums])` accumulates how many times each of `caps,lower,nums` is non-zero.  Adding them up with `sum` gives you your ""strength"", which you've conveniently already put into a list, which can be accessed by index.&#xD;&#xA;&#xD;&#xA;All of these improvements leverage the concept of ""falsiness"" in python, otherwise known as an object's value in a boolean context.  Generally empty and zero things are `False`, and summing booleans is equivalent to adding ones and zeroes, so there you go.";;added 8 characters in body
50121549;19599842;2581969;5;e2ee9d34-c9dd-405c-b3a2-b29f3637206a;2013-10-25 23:04:33.0;"    caps = sum(1 for c in pw if c.isupper())&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    caps = sum(c.isupper() for c in pw)&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;    if caps >= 1:&#xD;&#xA;&#xD;&#xA;can be:&#xD;&#xA;&#xD;&#xA;    if caps:&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;The most *significant* improvement: The bottom `if`/`elif` block can be completely removed by doing&#xD;&#xA;&#xD;&#xA;    i_strength = sum(map(bool,[caps,lower,nums])) - 1 #or sum(map(bool,r)) - 1&#xD;&#xA;    print('your password is {}'.format(scr[i_strength]))&#xD;&#xA;&#xD;&#xA;Explanation: `map(bool,[caps,lower,nums])` accumulates how many times each of `caps,lower,nums` is non-zero.  Adding them up with `sum` gives you your ""strength"", which you've conveniently already put into a list, which can be accessed by index.&#xD;&#xA;&#xD;&#xA;All of these improvements leverage the concept of ""falsiness"" in python, otherwise known as an object's value in a boolean context.  Generally empty and zero things are `False`, and summing booleans is equivalent to adding ones and zeroes, so there you go.&#xD;&#xA;&#xD;&#xA;-------&#xD;&#xA;&#xD;&#xA;Of course, it doesn't seem that you're *doing* anything with the counts of upper/lower/nums other than checking if they're nonzero.  So a cleanup would just be&#xD;&#xA;&#xD;&#xA;    caps = any(c.isupper() for c in pw)&#xD;&#xA;    ...&#xD;&#xA;&#xD;&#xA;and then&#xD;&#xA;&#xD;&#xA;    i_strength = sum([caps,lower,nums]) -1";;added 284 characters in body

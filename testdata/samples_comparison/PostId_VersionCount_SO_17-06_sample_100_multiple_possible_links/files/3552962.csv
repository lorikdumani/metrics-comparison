Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
7415316;3552962;30225;2;d19f1dee-6e01-48b3-a35a-e1e5b45d1dbd;2010-08-24 01:31:19.0;"I have the SP I call the following example ways&#xD;&#xA;&#xD;&#xA;or &#xD;&#xA;&#xD;&#xA;        -- run with a few grantees&#xD;&#xA;        exec someproc 99999, '<grantees><grantee id=""99""/><grantee id=""100""/><grantee id=""101""/></grantees>'&#xD;&#xA;       -- takes about 1 sec with > 59s on xml decomp&#xD;&#xA;&#xD;&#xA;or perhaps&#xD;&#xA;&#xD;&#xA;       -- run with lots of grantees (approx 2000)&#xD;&#xA;       exec someproc 99999, '<grantees><grantee id=""99""/><grantee id=""100""/>....<grantee id=""2001""/></grantees>'&#xD;&#xA;       -- takes about 5 sec with > 4s on xml decomp&#xD;&#xA;&#xD;&#xA;or perhaps&#xD;&#xA;&#xD;&#xA;       -- run with mega loads of grantees (approx 12000)&#xD;&#xA;       exec someproc 99999, '<grantees><grantee id=""99""/><grantee id=""100""/>....<grantee id=""12001""/></grantees>'&#xD;&#xA;       -- takes about 1 min with > 59s on xml decomp&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And I'm finding that the **xml decomposition is the slowest part** (about 96% of the query in each case - and believe me I'm inserting/deleting/altering tonnes of data in the rest of the proc). &#xD;&#xA;&#xD;&#xA;**I'm very curious if my way of decomposing XML is the most optimal way for the given input sets.&#xD;&#xA;My criteria for using XML is simply to pass the SP a number of integers - so any suggestions for better ways are gratefully received.**&#xD;&#xA;&#xD;&#xA;    create procedure someproc(@id int, @users xml = '<grantees/>') as&#xD;&#xA;    begin&#xD;&#xA;            -- decompose the users into a row set&#xD;&#xA;            declare @allUsers table (&#xD;&#xA;                id int&#xD;&#xA;            )&#xD;&#xA;    &#xD;&#xA;            insert into @allUsers (id)&#xD;&#xA;            select distinct grantee.value('@id', 'int') uno &#xD;&#xA;               from @users.nodes('/grantees/grantee') grantees(grantee)&#xD;&#xA;               where isnull(grantee.value('@id', 'int'), 0) > 0&#xD;&#xA;    &#xD;&#xA;    	select * from @allUsers&#xD;&#xA;    &#xD;&#xA;    	-- other stuff happens&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;";;
7742937;3552962;30225;5;2767201a-6c28-4253-9220-d028e5fb75fc;2010-09-13 13:09:11.0;"I have the SP I call the following example ways ***(the call is not from SQL rather it is from a .net program)***&#xD;&#xA;&#xD;&#xA;or &#xD;&#xA;&#xD;&#xA;        -- run with a few grantees&#xD;&#xA;        exec someproc 99999, '<grantees><grantee id=""99""/><grantee id=""100""/><grantee id=""101""/></grantees>'&#xD;&#xA;       -- takes about 1 sec with > 59s on xml decomp&#xD;&#xA;&#xD;&#xA;or perhaps&#xD;&#xA;&#xD;&#xA;       -- run with lots of grantees (approx 2000)&#xD;&#xA;       exec someproc 99999, '<grantees><grantee id=""99""/><grantee id=""100""/>....<grantee id=""2001""/></grantees>'&#xD;&#xA;       -- takes about 5 sec with > 4s on xml decomp&#xD;&#xA;&#xD;&#xA;or perhaps&#xD;&#xA;&#xD;&#xA;       -- run with mega loads of grantees (approx 12000)&#xD;&#xA;       exec someproc 99999, '<grantees><grantee id=""99""/><grantee id=""100""/>....<grantee id=""12001""/></grantees>'&#xD;&#xA;       -- takes about 1 min with > 59s on xml decomp&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And I'm finding that the **xml decomposition is the slowest part** (about 96% of the query in each case - and believe me I'm inserting/deleting/altering tonnes of data in the rest of the proc). &#xD;&#xA;&#xD;&#xA;**I'm very curious if my way of decomposing XML is the most optimal way for the given input sets.&#xD;&#xA;My criteria for using XML is simply to pass the SP a number of integers - so any suggestions for better ways are gratefully received.**&#xD;&#xA;&#xD;&#xA;    create procedure someproc(@id int, @users xml = '<grantees/>') as&#xD;&#xA;    begin&#xD;&#xA;            -- decompose the users into a row set&#xD;&#xA;            declare @allUsers table (&#xD;&#xA;                id int&#xD;&#xA;            )&#xD;&#xA;    &#xD;&#xA;            insert into @allUsers (id)&#xD;&#xA;            select distinct grantee.value('@id', 'int') uno &#xD;&#xA;               from @users.nodes('/grantees/grantee') grantees(grantee)&#xD;&#xA;               where isnull(grantee.value('@id', 'int'), 0) > 0&#xD;&#xA;    &#xD;&#xA;    	select * from @allUsers&#xD;&#xA;    &#xD;&#xA;    	-- other stuff happens&#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;";;added 66 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
92836091;30839754;3932998;2;9d4d6ef5-2a14-4204-be86-0f72bbcf5dc1;2015-06-15 07:41:58.0;"If outlook is sabotaging your links, then you need to make your links case agnostic. If you absolutely must keep upper and lowercase in your links for decryption, use a marker character:&#xD;&#xA;&#xD;&#xA; 1. Generate encrypted string.&#xD;&#xA; 2. Before each upper case character, insert marker character (pick a valid character your encryption scheme does not use).&#xD;&#xA; 3. Insert your new string into the link.&#xD;&#xA; 4. To decrypt, remove any marker characters as you parse the string and make uppercase/lowercase as appropriate.&#xD;&#xA;&#xD;&#xA;Here is a pair of helper methods if you find it easier reading code:&#xD;&#xA;&#xD;&#xA;        private static string EncryptString(string originalText, char markerChar)&#xD;&#xA;        {&#xD;&#xA;            StringBuilder sb = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            foreach(char c in originalText)&#xD;&#xA;            {&#xD;&#xA;                if (char.IsUpper(c))&#xD;&#xA;                    sb.Append(markerChar);&#xD;&#xA;&#xD;&#xA;                sb.Append(c);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return sb.ToString();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private static string DecryptString(string encryptedText, char markerChar)&#xD;&#xA;        {&#xD;&#xA;            StringBuilder sb = new StringBuilder();&#xD;&#xA;            bool nextCharIsUpper = false;&#xD;&#xA;&#xD;&#xA;            foreach(char c in encryptedText)&#xD;&#xA;            {&#xD;&#xA;                if(c == markerChar)&#xD;&#xA;                {&#xD;&#xA;                    nextCharIsUpper = true;&#xD;&#xA;                    continue;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                if(nextCharIsUpper)&#xD;&#xA;                    sb.Append(char.ToUpperInvariant(c));&#xD;&#xA;                else&#xD;&#xA;                    sb.Append(char.ToLowerInvariant(c));&#xD;&#xA;&#xD;&#xA;                nextCharIsUpper = c == markerChar;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return sb.ToString();&#xD;&#xA;        }";;
92836480;30839754;3932998;5;d1eec5b4-b79d-4bcb-a31a-567bf917d86a;2015-06-15 07:48:14.0;"If outlook is sabotaging your links, then you need to make your links case agnostic. If you absolutely must keep upper and lowercase in your links for decryption, use a marker character:&#xD;&#xA;&#xD;&#xA; 1. Generate encrypted string.&#xD;&#xA; 2. Before each upper case character, insert marker character (pick a valid character your encryption scheme does not use).&#xD;&#xA; 3. Insert your new string into the link.&#xD;&#xA; 4. To decrypt, remove any marker characters as you parse the string and make uppercase/lowercase as appropriate.&#xD;&#xA;&#xD;&#xA;Here is a pair of helper methods if you find it easier reading code:&#xD;&#xA;&#xD;&#xA;        private static string EncryptString(string originalText, char markerChar)&#xD;&#xA;        {&#xD;&#xA;            StringBuilder sb = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            foreach(char c in originalText)&#xD;&#xA;            {&#xD;&#xA;                if (char.IsUpper(c))&#xD;&#xA;                    sb.Append(markerChar);&#xD;&#xA;&#xD;&#xA;                sb.Append(c);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return sb.ToString();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private static string DecryptString(string encryptedText, char markerChar)&#xD;&#xA;        {&#xD;&#xA;            StringBuilder sb = new StringBuilder();&#xD;&#xA;            bool nextCharIsUpper = false;&#xD;&#xA;&#xD;&#xA;            foreach(char c in encryptedText)&#xD;&#xA;            {&#xD;&#xA;                if(c == markerChar)&#xD;&#xA;                {&#xD;&#xA;                    nextCharIsUpper = true;&#xD;&#xA;                    continue;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                if(nextCharIsUpper)&#xD;&#xA;                    sb.Append(char.ToUpperInvariant(c));&#xD;&#xA;                else&#xD;&#xA;                    sb.Append(char.ToLowerInvariant(c));&#xD;&#xA;&#xD;&#xA;                nextCharIsUpper = c == markerChar;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return sb.ToString();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;Passing your original link payload into the ""encrypt"" method with a dash ('-') as the marker character returns: `-Y-Lway3m-D-Mm-W-Mw`&#xD;&#xA;&#xD;&#xA;Passing `-y-lway3m-d-mn-w-mw` into the ""decrypt"" method with a dash ('-') as the marker character returns your original link payload";;Added usage/output of the sample methods.
92860353;30839754;3932998;5;5b63634e-6055-49ea-adbb-64ac9473ee71;2015-06-15 13:14:16.0;"If outlook is sabotaging your links, then you need to make your links case indifferent. If you absolutely must keep upper and lowercase in your links for decryption, use a marker character:&#xD;&#xA;&#xD;&#xA; 1. Generate encrypted string.&#xD;&#xA; 2. Before each upper case character, insert marker character (pick a valid character your encryption scheme does not use).&#xD;&#xA; 3. Insert your new string into the link.&#xD;&#xA; 4. To decrypt, remove any marker characters as you parse the string and make uppercase/lowercase as appropriate.&#xD;&#xA;&#xD;&#xA;Here is a pair of helper methods if you find it easier reading code:&#xD;&#xA;&#xD;&#xA;                private static string EncodeCasingIndifference(string originalText, char markerChar)&#xD;&#xA;        {&#xD;&#xA;            StringBuilder sb = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            foreach(char c in originalText)&#xD;&#xA;            {&#xD;&#xA;                if (char.IsUpper(c))&#xD;&#xA;                    sb.Append(markerChar);&#xD;&#xA;&#xD;&#xA;                sb.Append(c);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return sb.ToString();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private static string DecodeCasingIndifference(string encryptedText, char markerChar)&#xD;&#xA;        {&#xD;&#xA;            StringBuilder sb = new StringBuilder();&#xD;&#xA;            bool nextCharIsUpper = false;&#xD;&#xA;&#xD;&#xA;            foreach(char c in encryptedText)&#xD;&#xA;            {&#xD;&#xA;                if(c == markerChar)&#xD;&#xA;                {&#xD;&#xA;                    nextCharIsUpper = true;&#xD;&#xA;                    continue;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                if(nextCharIsUpper)&#xD;&#xA;                    sb.Append(char.ToUpperInvariant(c));&#xD;&#xA;                else&#xD;&#xA;                    sb.Append(char.ToLowerInvariant(c));&#xD;&#xA;&#xD;&#xA;                nextCharIsUpper = c == markerChar;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return sb.ToString();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;Passing your original link payload into the ""enode"" method with a dash ('-') as the marker character returns: `-Y-Lway3m-D-Mm-W-Mw`&#xD;&#xA;&#xD;&#xA;Passing `-y-lway3m-d-mn-w-mw` into the ""decode"" method with a dash ('-') as the marker character returns your original link payload";;Used a couple of terms incorrectly and corrected the text/method names to use the proper terminology.

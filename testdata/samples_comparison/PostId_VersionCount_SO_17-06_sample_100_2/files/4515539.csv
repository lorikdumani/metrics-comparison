Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
9534331;4515539;21239;2;44659d1e-b3a4-46c2-ba43-8aaf92aecea1;2010-12-23 02:56:28.0;"Lots of questions here! I'm not sure I can answer *all* of them, but I'll do as much as I can:&#xD;&#xA;&#xD;&#xA;1. Boo is not dynamic in the same sense that (Iron)Python is. It's mostly a statically typed language with strong type inference and pythonic syntax. This, coupled with its optional duck typing, give it a very dynamic feel, but it's certainly not the same as Python.&#xD;&#xA;&#xD;&#xA;1. DLR adds dynamic support for language implementors *on top of* the CLR, which is more geared towards statically typed languages (such as VB.NET, C# ,F#)&#xD;&#xA;&#xD;&#xA;1. Not really IMHO. It would become too similar to IronPython. Precisely one of the advantages of Boo is that it's statically typed.&#xD;&#xA;&#xD;&#xA;1. Runtimes *are* libraries which support basic constructs in the language. VB.NET, C#, F#, Boo, they all have runtime libraries. You usually never see VB.NET or C# runtimes because they come with the .NET framework.&#xD;&#xA;&#xD;&#xA;1. Can't comment on this, don't have much hands-on experience with IronPython.&#xD;&#xA;&#xD;&#xA;1. Don't know about the DaVinci project, can't comment on this.&#xD;&#xA;&#xD;&#xA;1. No. As far as I know Boo's macros and extensible compiler are quite unique for a .NET language ([Nemerle][1] has similar macro capabilities). I can't really say if Boo DSLs can be more or less powerful than IronPython DSLs. What I can say for sure is that the implementation of Boo DSLs is *wildly different* from the implentation of Python DSLs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://nemerle.org";;
9534383;4515539;21239;5;d57d238f-b3a5-4b40-8059-aaac8b01623c;2010-12-23 03:03:27.0;"Lots of questions here! I'm not sure I can answer *all* of them, but I'll do as much as I can:&#xD;&#xA;&#xD;&#xA;1. Boo is not dynamic in the same sense that (Iron)Python is. It's mostly a statically typed language with strong type inference and pythonic syntax. This, coupled with its optional duck typing, give it a very dynamic feel, but it's certainly not the same as Python. Boo is more similar (except for syntax) to C# 4 than Python.&#xD;&#xA;&#xD;&#xA;1. DLR adds dynamic support for language implementors *on top of* the CLR, which is more geared towards statically typed languages (such as VB.NET, C# ,F#)&#xD;&#xA;&#xD;&#xA;1. Not really IMHO. It would become too similar to IronPython. Precisely one of the characteristics of Boo is that it's statically typed.&#xD;&#xA;&#xD;&#xA;1. Runtimes *are* libraries which support some basic constructs in the language. VB.NET, C#, F#, Boo, they all have runtime libraries. You usually never see VB.NET or C# runtimes because they come with the .NET framework. There was a great answer on SO about this from Eric Lippert but I can't find it.&#xD;&#xA;&#xD;&#xA;1. Can't comment on this, don't have much hands-on experience with IronPython.&#xD;&#xA;&#xD;&#xA;1. Don't know about the DaVinci project, can't comment on this.&#xD;&#xA;&#xD;&#xA;1. No. As far as I know Boo's macros and extensible compiler are quite unique for a .NET language ([Nemerle][1] has similar macro capabilities). I can't really say if Boo DSLs can be more or less powerful than IronPython DSLs. What I can say for sure is that the implementation of Boo DSLs is *wildly different* from the implentation of Python DSLs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://nemerle.org";;"added 66 characters in body; added 86 characters in body"

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
11842018;5521321;91;2;6ebc3b5c-4173-4f96-bef6-222cfd0315e1;2011-04-02 05:14:17.0;"Depends on the usage scenario. A does not have Method4, so you no method that accepts an `A` as it's parameter can rely on it being existent.&#xD;&#xA;&#xD;&#xA;If you only need Method4 as a Helper internal to your class, implement it as an extension. Otherwise create a class B that derives from A so that external classes that need Method4 can reliably request a `B` as their parameter instead of an `A`.&#xD;&#xA;&#xD;&#xA;Of course, Exceptions always apply. LINQ is an example of where subclassing would be impractical.&#xD;&#xA;&#xD;&#xA;In a comment you mentioned the need for a property. In this case, creating a `class B : A` is your main option as there are no Extension Properties. The other option is creating a `class B { public A TheA {get; set;} }` which wraps around A.&#xD;&#xA;&#xD;&#xA;But as said, it depends on the real world case and usage. If you absolutely must work with an `A` and need to call methods on this `A`, then extension methods are your choice and you can't have properties. Instead, create Get/Set methods and store the property value somewhere else.";;
11842414;5521321;91;5;13936f06-2eba-49c6-94f1-b12882343db5;2011-04-02 05:56:53.0;"Depends on the usage scenario. `A` does not have Method4, so no method that accepts an `A` as it's parameter can rely on Method4 being existent.&#xD;&#xA;&#xD;&#xA;If you only need Method4 as a Helper internal to your class, implement it as an extension. Otherwise create a class `B` that derives from `A` so that external classes that need `Method4` can reliably request a `B` as their parameter instead of an `A`.&#xD;&#xA;&#xD;&#xA;Of course, Exceptions always apply. LINQ is an example of where subclassing would be impractical.&#xD;&#xA;&#xD;&#xA;In a comment you mentioned the need for a property. In this case, creating a `class B : A` is your main option as there are no Extension Properties. The other option is creating a `class B { public A TheA {get; set;} }` which wraps around A.&#xD;&#xA;&#xD;&#xA;But as said, it depends on the real world case and usage. If you absolutely must work with an `A` and need to call methods on this `A`, then extension methods are your choice and you can't have properties. Instead, create Get/Set methods and store the property value somewhere else.";;added 9 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
22200335;9721403;635608;2;4f9ced3a-6262-4a1c-b9ca-6085876930f1;2012-03-15 14:07:00.0;"You can reproduce the code from your function pretty much identically in your macro with something like:&#xD;&#xA;&#xD;&#xA;    #define GetBit(array,index) \\&#xD;&#xA;      do { \\&#xD;&#xA;        if ((index) >= array[0]) \\&#xD;&#xA;          exit(EXIT_FAILURE); \\&#xD;&#xA;        else \\&#xD;&#xA;          return (GetBit_wo_boundary_checks(array,index)); \\&#xD;&#xA;      } while(0)&#xD;&#xA;&#xD;&#xA;But this will evaluate `index` twice. You could create a temporary to work around that:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    #define GetBit(array,index) \\&#xD;&#xA;      do { \\&#xD;&#xA;        unsigned long ix = (index);&#xD;&#xA;        if (ix >= array[0]) \\&#xD;&#xA;          exit(EXIT_FAILURE); \\&#xD;&#xA;        else \\&#xD;&#xA;          return (GetBit_wo_boundary_checks(array,ix)); \\&#xD;&#xA;      } while(0)&#xD;&#xA;&#xD;&#xA;Note that `array` is evaluated multiple times too. You might want to fix that with a similar strategy.";;
22200592;9721403;635608;5;472c65ab-c6c1-4b69-aca2-55237ae068f9;2012-03-15 14:12:37.0;<!-- Rubbish, don't mind me :) -->;;deleted 730 characters in body
22200905;9721403;635608;5;3e053c68-6b19-499f-9ec3-9b2b4ec7fe38;2012-03-15 14:19:53.0;"You could use the `,` operator to do this:&#xD;&#xA;&#xD;&#xA;    #define GetBit(array,index) \\&#xD;&#xA;                (((index) >= array[0]) \\&#xD;&#xA;                 ? exit(EXIT_FAILURE), -1 \\&#xD;&#xA;                 : GetBit_wo_boundary_checks(array,(index)))&#xD;&#xA;&#xD;&#xA;Note that `index` is evaluated twice, which is not safe.";;deleted 730 characters in body

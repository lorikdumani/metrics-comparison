Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
105602596;34081280;3599890;2;b9ce868f-87f2-4b94-a286-8af8b6abd13a;2015-12-04 05:09:14.0;"I slightly modified your JSON string and added one more record to have diferent 'Hour' groups.&#xD;&#xA;&#xD;&#xA;    import pandas as pd&#xD;&#xA;    import numpy as np&#xD;&#xA;    import json&#xD;&#xA;    &#xD;&#xA;    jsondata = '''{&#xD;&#xA;    ""data"": [&#xD;&#xA;    {&#xD;&#xA;    ""time"": ""2015-10-14 15:01:10"",&#xD;&#xA;    ""values"": {&#xD;&#xA;    ""d1"": 3956.58,&#xD;&#xA;    ""d2"": 0,&#xD;&#xA;    ""d3"": 19,&#xD;&#xA;    ""d4"": 6.21,&#xD;&#xA;    ""d5"": 105.99,&#xD;&#xA;    ""d6"": 42,&#xD;&#xA;    ""d7"": 59.24&#xD;&#xA;    }&#xD;&#xA;    },&#xD;&#xA;    {&#xD;&#xA;    ""time"": ""2015-10-14 15:01:20"",&#xD;&#xA;    ""values"": {&#xD;&#xA;    ""d1"": 3956.58,&#xD;&#xA;    ""d2"": 0,&#xD;&#xA;    ""d3"": 1,&#xD;&#xA;    ""d4"": 0.81,&#xD;&#xA;    ""d5"": 121.57,&#xD;&#xA;    ""d6"": 42,&#xD;&#xA;    ""d7"": 59.24&#xD;&#xA;    }&#xD;&#xA;    },&#xD;&#xA;    {&#xD;&#xA;    ""time"": ""2015-10-14 16:01:20"",&#xD;&#xA;    ""values"": {&#xD;&#xA;    ""d1"": 31956.58,&#xD;&#xA;    ""d2"": 0,&#xD;&#xA;    ""d3"": 1,&#xD;&#xA;    ""d4"": 0.81,&#xD;&#xA;    ""d5"": 121.57,&#xD;&#xA;    ""d6"": 42,&#xD;&#xA;    ""d7"": 59.24&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;    ]&#xD;&#xA;    }&#xD;&#xA;    '''&#xD;&#xA;    &#xD;&#xA;    data = json.loads(jsondata)['data']&#xD;&#xA;    #If your JSON data is in a file, then do:&#xD;&#xA;    #data = json.load(jsonfile)['data']  &#xD;&#xA;    df = pd.DataFrame([record['values'] for record in data], index=[record['time'] for record in data])&#xD;&#xA;    df.index = pd.DatetimeIndex(df.index, name='time')&#xD;&#xA;    &#xD;&#xA;    print df&#xD;&#xA;    &#xD;&#xA;    print df.groupby(pd.Grouper(freq='H')).agg([np.mean, max, min])&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Output(`df`):&#xD;&#xA;&#xD;&#xA;                               d1  d2  d3    d4      d5  d6     d7&#xD;&#xA;    time                                                          &#xD;&#xA;    2015-10-14 15:01:10   3956.58   0  19  6.21  105.99  42  59.24&#xD;&#xA;    2015-10-14 15:01:20   3956.58   0   1  0.81  121.57  42  59.24&#xD;&#xA;    2015-10-14 16:01:20  31956.58   0   1  0.81  121.57  42  59.24&#xD;&#xA;&#xD;&#xA;Output statistics:&#xD;&#xA;&#xD;&#xA;                               d1                       d2           d3          \\&#xD;&#xA;                             mean       max       min mean max min mean max min   &#xD;&#xA;    time                                                                          &#xD;&#xA;    2015-10-14 15:00:00   3956.58   3956.58   3956.58    0   0   0   10  19   1   &#xD;&#xA;    2015-10-14 16:00:00  31956.58  31956.58  31956.58    0   0   0    1   1   1   &#xD;&#xA;    &#xD;&#xA;                           d4  ...              d5                   d6          \\&#xD;&#xA;                         mean  ...     min    mean     max     min mean max min   &#xD;&#xA;    time                       ...                                                &#xD;&#xA;    2015-10-14 15:00:00  3.51  ...    0.81  113.78  121.57  105.99   42  42  42   &#xD;&#xA;    2015-10-14 16:00:00  0.81  ...    0.81  121.57  121.57  121.57   42  42  42   &#xD;&#xA;    &#xD;&#xA;                            d7                &#xD;&#xA;                          mean    max    min  &#xD;&#xA;    time                                      &#xD;&#xA;    2015-10-14 15:00:00  59.24  59.24  59.24  &#xD;&#xA;    2015-10-14 16:00:00  59.24  59.24  59.24  &#xD;&#xA;    &#xD;&#xA;    [2 rows x 21 columns]&#xD;&#xA;&#xD;&#xA;Using `pd.read_json` directly seems not working because resulting dataframe has unexpected structure which is hard to use.&#xD;&#xA;";;
105602833;34081280;3599890;5;37f2e2fc-1435-4aad-a95e-4bce4e7b2051;2015-12-04 05:15:30.0;"I slightly modified your JSON string and added one more record to have diferent 'Hour' groups.&#xD;&#xA;&#xD;&#xA;    import pandas as pd&#xD;&#xA;    import numpy as np&#xD;&#xA;    import json&#xD;&#xA;    &#xD;&#xA;    jsondata = '''{&#xD;&#xA;    ""data"": [&#xD;&#xA;    {&#xD;&#xA;    ""time"": ""2015-10-14 15:01:10"",&#xD;&#xA;    ""values"": {&#xD;&#xA;    ""d1"": 3956.58,&#xD;&#xA;    ""d2"": 0,&#xD;&#xA;    ""d3"": 19,&#xD;&#xA;    ""d4"": 6.21,&#xD;&#xA;    ""d5"": 105.99,&#xD;&#xA;    ""d6"": 42,&#xD;&#xA;    ""d7"": 59.24&#xD;&#xA;    }&#xD;&#xA;    },&#xD;&#xA;    {&#xD;&#xA;    ""time"": ""2015-10-14 15:01:20"",&#xD;&#xA;    ""values"": {&#xD;&#xA;    ""d1"": 3956.58,&#xD;&#xA;    ""d2"": 0,&#xD;&#xA;    ""d3"": 1,&#xD;&#xA;    ""d4"": 0.81,&#xD;&#xA;    ""d5"": 121.57,&#xD;&#xA;    ""d6"": 42,&#xD;&#xA;    ""d7"": 59.24&#xD;&#xA;    }&#xD;&#xA;    },&#xD;&#xA;    {&#xD;&#xA;    ""time"": ""2015-10-14 16:01:20"",&#xD;&#xA;    ""values"": {&#xD;&#xA;    ""d1"": 31956.58,&#xD;&#xA;    ""d2"": 0,&#xD;&#xA;    ""d3"": 1,&#xD;&#xA;    ""d4"": 0.81,&#xD;&#xA;    ""d5"": 121.57,&#xD;&#xA;    ""d6"": 42,&#xD;&#xA;    ""d7"": 59.24&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;    ]&#xD;&#xA;    }&#xD;&#xA;    '''&#xD;&#xA;    &#xD;&#xA;    data = json.loads(jsondata)['data']&#xD;&#xA;    #If your JSON data is in a file, then do:&#xD;&#xA;    #data = json.load(jsonfile)['data']  &#xD;&#xA;&#xD;&#xA;    df = pd.DataFrame(data=[record['values'] for record in data], &#xD;&#xA;                      index=pd.DatetimeIndex([record['time'] for record in data], name='time'))&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    print df&#xD;&#xA;    &#xD;&#xA;    print df.groupby(pd.Grouper(freq='H')).agg([np.mean, max, min])&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Output(`df`):&#xD;&#xA;&#xD;&#xA;                               d1  d2  d3    d4      d5  d6     d7&#xD;&#xA;    time                                                          &#xD;&#xA;    2015-10-14 15:01:10   3956.58   0  19  6.21  105.99  42  59.24&#xD;&#xA;    2015-10-14 15:01:20   3956.58   0   1  0.81  121.57  42  59.24&#xD;&#xA;    2015-10-14 16:01:20  31956.58   0   1  0.81  121.57  42  59.24&#xD;&#xA;&#xD;&#xA;Output statistics:&#xD;&#xA;&#xD;&#xA;                               d1                       d2           d3          \\&#xD;&#xA;                             mean       max       min mean max min mean max min   &#xD;&#xA;    time                                                                          &#xD;&#xA;    2015-10-14 15:00:00   3956.58   3956.58   3956.58    0   0   0   10  19   1   &#xD;&#xA;    2015-10-14 16:00:00  31956.58  31956.58  31956.58    0   0   0    1   1   1   &#xD;&#xA;    &#xD;&#xA;                           d4  ...              d5                   d6          \\&#xD;&#xA;                         mean  ...     min    mean     max     min mean max min   &#xD;&#xA;    time                       ...                                                &#xD;&#xA;    2015-10-14 15:00:00  3.51  ...    0.81  113.78  121.57  105.99   42  42  42   &#xD;&#xA;    2015-10-14 16:00:00  0.81  ...    0.81  121.57  121.57  121.57   42  42  42   &#xD;&#xA;    &#xD;&#xA;                            d7                &#xD;&#xA;                          mean    max    min  &#xD;&#xA;    time                                      &#xD;&#xA;    2015-10-14 15:00:00  59.24  59.24  59.24  &#xD;&#xA;    2015-10-14 16:00:00  59.24  59.24  59.24  &#xD;&#xA;    &#xD;&#xA;    [2 rows x 21 columns]&#xD;&#xA;&#xD;&#xA;Using `pd.read_json` directly seems not working because resulting dataframe has unexpected structure which is hard to use.&#xD;&#xA;&#xD;&#xA;";;added 10 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
134160505;41221957;6354622;2;3a8eaa15-0156-4592-b408-fbb0ac536a02;2016-12-19 11:50:18.0;"**Problem Statement:**&#xD;&#xA;&#xD;&#xA;>There are N-counters available and each counter has a specified number of chicken nuggets.  &#xD;&#xA;The cost of each nugget being bought at any counter is same as the number of nuggets that are still remaining at the counter at that point of time( Inclusive of the nugget being bought ).&#xD;&#xA;&#xD;&#xA;>Pre wants to have M most costly nuggets. What will be the total amount required to buy M most costly nuggets.&#xD;&#xA;&#xD;&#xA;See [here](http://www.spoj.com/problems/FOODIES/) for a more detailed problem statement. &#xD;&#xA;&#xD;&#xA;Here is my JAVA code:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.lang.*;&#xD;&#xA;    import java.io.*;&#xD;&#xA;    class Main&#xD;&#xA;    {&#xD;&#xA;    	public static void main (String[] args) throws java.lang.Exception&#xD;&#xA;    	{&#xD;&#xA;    		int t,n,i;&#xD;&#xA;    		long ans,m,k;&#xD;&#xA;    		BufferedReader br= new BufferedReader( new InputStreamReader(System.in));&#xD;&#xA;    		t = Integer.parseInt(br.readLine());;&#xD;&#xA;    		while(t!=0)&#xD;&#xA;    		{&#xD;&#xA;    		  ans = 0;&#xD;&#xA;    		  n = Integer.parseInt(br.readLine());;&#xD;&#xA;    		  int a[] = new int[n];&#xD;&#xA;    		  int b[] = new int[100005];&#xD;&#xA;    		  int c[] = new int[100005];&#xD;&#xA;    		  StringTokenizer tk = new StringTokenizer(br.readLine());&#xD;&#xA;    		  i = 0;&#xD;&#xA;    		  while(tk.hasMoreTokens()){&#xD;&#xA;    		    a[i] =Integer.parseInt(tk.nextToken());&#xD;&#xA;    		    i++;&#xD;&#xA;    		  }&#xD;&#xA;    		  m = Long.parseLong(br.readLine());;&#xD;&#xA;    		  Arrays.sort(a);&#xD;&#xA;    		  int len = a.length;&#xD;&#xA;    		  for (i = 0; i < len / 2; i++) {&#xD;&#xA;            int tmp = a[i];&#xD;&#xA;            a[i] = a[len - 1 - i];&#xD;&#xA;            a[len - 1 - i] = tmp;&#xD;&#xA;    		  }&#xD;&#xA;    		  for(i=0;i<n;i++){&#xD;&#xA;    		    b[a[i]]++;&#xD;&#xA;    		  }&#xD;&#xA;    		  c[a[0]] = b[a[0]];&#xD;&#xA;    		  for(i=a[0]-1;i>=1;i--){&#xD;&#xA;    		    if(b[i]!=0){&#xD;&#xA;    		      c[i] = c[i+1] + b[i];&#xD;&#xA;    		    }&#xD;&#xA;    		    else{&#xD;&#xA;    		    c[i] = c[i+1];&#xD;&#xA;    		    }&#xD;&#xA;    		  }&#xD;&#xA;    		  k = 0;&#xD;&#xA;    		  for(i=a[0];i>=1;i--){&#xD;&#xA;    		    if(c[i]>=m-k){&#xD;&#xA;    		      ans = ans + (m-k)*i;&#xD;&#xA;    		      break;&#xD;&#xA;    		    }&#xD;&#xA;    		    else{&#xD;&#xA;    		      ans = ans + c[i]*i;&#xD;&#xA;    		      k = k + c[i];&#xD;&#xA;    		    }&#xD;&#xA;    		  }&#xD;&#xA;    		  System.out.println(ans);&#xD;&#xA;    		  t--;&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;It gives correct answers for simple test cases but giving **Wrong Answer** on SPOJ. Is there a problem with my logic or is JAVA itself producing wrong answer on SPOJ? If there is a problem with JAVA, then should I quit coding in JAVA for competitive coding problems?";;
134161143;41221957;6354622;5;98e31dac-718d-46db-ada0-74bc71d1f14e;2016-12-19 11:58:46.0;"**Problem Statement:**&#xD;&#xA;&#xD;&#xA;>There are N-counters available and each counter has a specified number of chicken nuggets.  &#xD;&#xA;The cost of each nugget being bought at any counter is same as the number of nuggets that are still remaining at the counter at that point of time( Inclusive of the nugget being bought ).&#xD;&#xA;&#xD;&#xA;>Pre wants to have M most costly nuggets. What will be the total amount required to buy M most costly nuggets.&#xD;&#xA;&#xD;&#xA;See [here](http://www.spoj.com/problems/FOODIES/) for a more detailed problem statement. &#xD;&#xA;&#xD;&#xA;Here is my JAVA code:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.lang.*;&#xD;&#xA;    import java.io.*;&#xD;&#xA;    class Main&#xD;&#xA;    {&#xD;&#xA;    	public static void main (String[] args) throws java.lang.Exception&#xD;&#xA;    	{&#xD;&#xA;    		int t,n,i;&#xD;&#xA;    		long ans,m,k;&#xD;&#xA;    		BufferedReader br= new BufferedReader( new InputStreamReader(System.in));&#xD;&#xA;    		t = Integer.parseInt(br.readLine());;&#xD;&#xA;    		while(t!=0)&#xD;&#xA;    		{&#xD;&#xA;    		  ans = 0;&#xD;&#xA;    		  n = Integer.parseInt(br.readLine());;&#xD;&#xA;    		  int a[] = new int[n];&#xD;&#xA;    		  int b[] = new int[100005];&#xD;&#xA;    		  int c[] = new int[100005];&#xD;&#xA;&#xD;&#xA;    		  StringTokenizer tk = new StringTokenizer(br.readLine());&#xD;&#xA;&#xD;&#xA;    		  i = 0;&#xD;&#xA;    		  while(tk.hasMoreTokens()){&#xD;&#xA;    		    a[i] =Integer.parseInt(tk.nextToken());&#xD;&#xA;    		    i++;&#xD;&#xA;    		  }&#xD;&#xA;&#xD;&#xA;    		  m = Long.parseLong(br.readLine());&#xD;&#xA;&#xD;&#xA;    		  Arrays.sort(a);&#xD;&#xA;&#xD;&#xA;    		  int len = a.length;&#xD;&#xA;              // arranging in descending order&#xD;&#xA;    		  for (i = 0; i < len / 2; i++) {&#xD;&#xA;                int tmp = a[i];&#xD;&#xA;                a[i] = a[len - 1 - i];&#xD;&#xA;                a[len - 1 - i] = tmp;&#xD;&#xA;    		  }&#xD;&#xA;&#xD;&#xA;    		  for(i=0;i<n;i++){&#xD;&#xA;    		    b[a[i]]++;&#xD;&#xA;    		  }&#xD;&#xA;&#xD;&#xA;    		  c[a[0]] = b[a[0]];&#xD;&#xA;&#xD;&#xA;    		  for(i=a[0]-1;i>=1;i--){&#xD;&#xA;    		    if(b[i]!=0){&#xD;&#xA;    		      c[i] = c[i+1] + b[i];&#xD;&#xA;    		    }&#xD;&#xA;    		    else{&#xD;&#xA;    		    c[i] = c[i+1];&#xD;&#xA;    		    }&#xD;&#xA;    		  }&#xD;&#xA;    		  k = 0;&#xD;&#xA;&#xD;&#xA;    		  for(i=a[0];i>=1;i--){&#xD;&#xA;    		    if(c[i]>=m-k){&#xD;&#xA;    		      ans = ans + (m-k)*i;&#xD;&#xA;    		      break;&#xD;&#xA;    		    }&#xD;&#xA;    		    else{&#xD;&#xA;    		      ans = ans + c[i]*i;&#xD;&#xA;    		      k = k + c[i];&#xD;&#xA;    		    }&#xD;&#xA;    		  }&#xD;&#xA;    		  System.out.println(ans);&#xD;&#xA;    		  t--;&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;It gives correct answers for simple test cases but giving **Wrong Answer** on SPOJ. Is there a problem with my logic or is JAVA itself producing wrong answer on SPOJ? If there is a problem with JAVA, then should I quit coding in JAVA for competitive coding problems?";;added 12 characters in body
134163502;41221957;6354622;5;40ba1351-08ed-49d6-b8dd-228cbd6a5104;2016-12-19 12:31:49.0;"**Problem Statement:**&#xD;&#xA;&#xD;&#xA;>There are N-counters available and each counter has a specified number of chicken nuggets.  &#xD;&#xA;The cost of each nugget being bought at any counter is same as the number of nuggets that are still remaining at the counter at that point of time( Inclusive of the nugget being bought ).&#xD;&#xA;&#xD;&#xA;>Pre wants to have M most costly nuggets. What will be the total amount required to buy M most costly nuggets.&#xD;&#xA;&#xD;&#xA;See [here](http://www.spoj.com/problems/FOODIES/) for a more detailed problem statement. &#xD;&#xA;&#xD;&#xA;Here is my JAVA code:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.lang.*;&#xD;&#xA;    import java.io.*;&#xD;&#xA;    class Main&#xD;&#xA;    {&#xD;&#xA;        public static void main (String[] args) throws java.lang.Exception&#xD;&#xA;        {&#xD;&#xA;            int t,n,i,max;&#xD;&#xA;            long ans,m,k;&#xD;&#xA;            BufferedReader br= new BufferedReader( new InputStreamReader(System.in));&#xD;&#xA;            t = Integer.parseInt(br.readLine());;&#xD;&#xA;            while(t!=0)&#xD;&#xA;            {&#xD;&#xA;              ans = 0;&#xD;&#xA;              n = Integer.parseInt(br.readLine());;&#xD;&#xA;              int a[] = new int[n];&#xD;&#xA;              int b[] = new int[100005];&#xD;&#xA;              int c[] = new int[100005];&#xD;&#xA;              StringTokenizer tk = new StringTokenizer(br.readLine());&#xD;&#xA;    &#xD;&#xA;              i = 0;&#xD;&#xA;              while(tk.hasMoreTokens()){&#xD;&#xA;                a[i] =Integer.parseInt(tk.nextToken());&#xD;&#xA;                i++;&#xD;&#xA;              }&#xD;&#xA;    &#xD;&#xA;              m = Long.parseLong(br.readLine());&#xD;&#xA;              max = a[0];&#xD;&#xA;              for(i=0;i<n;i++){&#xD;&#xA;                if(a[i]>max){&#xD;&#xA;                  max = a[i];&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;              for(i=0;i<n;i++){&#xD;&#xA;                b[a[i]]++;&#xD;&#xA;              }&#xD;&#xA;    &#xD;&#xA;              c[max] = b[max];&#xD;&#xA;    &#xD;&#xA;              for(i=max-1;i>=1;i--){&#xD;&#xA;                if(b[i]!=0){&#xD;&#xA;                  c[i] = c[i+1] + b[i];&#xD;&#xA;                }&#xD;&#xA;                else{&#xD;&#xA;                c[i] = c[i+1];&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;              k = 0;&#xD;&#xA;    &#xD;&#xA;              for(i=max;i>=1;i--){&#xD;&#xA;                if(c[i]>=m-k){&#xD;&#xA;                  ans = ans + (m-k)*i;&#xD;&#xA;                  break;&#xD;&#xA;                }&#xD;&#xA;                else{&#xD;&#xA;                  ans = ans + c[i]*i;&#xD;&#xA;                  k = k + c[i];&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;              System.out.println(ans);&#xD;&#xA;              t--;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;It gives correct answers for simple test cases but giving **Wrong Answer** on SPOJ. Is there a problem with my logic or is JAVA itself producing wrong answer on SPOJ? If there is a problem with JAVA, then should I quit coding in JAVA for competitive coding problems?&#xD;&#xA;&#xD;&#xA;**Edit:** Removed `Arrays.sort()`. Replaced with Counting Sort. Updated the code. Still getting **WA**";;added 283 characters in body
134165053;41221957;6354622;5;052bf204-c164-4273-994a-dbb0bc6442a8;2016-12-19 12:52:40.0;"**Problem Statement:**&#xD;&#xA;&#xD;&#xA;>There are N-counters available and each counter has a specified number of chicken nuggets.  &#xD;&#xA;The cost of each nugget being bought at any counter is same as the number of nuggets that are still remaining at the counter at that point of time( Inclusive of the nugget being bought ).&#xD;&#xA;&#xD;&#xA;>Pre wants to have M most costly nuggets. What will be the total amount required to buy M most costly nuggets.&#xD;&#xA;&#xD;&#xA;See [here](http://www.spoj.com/problems/FOODIES/) for a more detailed problem statement. &#xD;&#xA;&#xD;&#xA;Here is my JAVA code:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import java.lang.*;&#xD;&#xA;    import java.io.*;&#xD;&#xA;    class Main&#xD;&#xA;    {&#xD;&#xA;        public static void main (String[] args) throws java.lang.Exception&#xD;&#xA;        {&#xD;&#xA;            int t,n,i,max;&#xD;&#xA;            long ans,m,k;&#xD;&#xA;            BufferedReader br= new BufferedReader( new InputStreamReader(System.in));&#xD;&#xA;            t = Integer.parseInt(br.readLine());;&#xD;&#xA;            while(t!=0)&#xD;&#xA;            {&#xD;&#xA;              ans = 0;&#xD;&#xA;              n = Integer.parseInt(br.readLine());;&#xD;&#xA;              int a[] = new int[n];&#xD;&#xA;              int b[] = new int[100005];&#xD;&#xA;              int c[] = new int[100005];&#xD;&#xA;              StringTokenizer tk = new StringTokenizer(br.readLine());&#xD;&#xA;    &#xD;&#xA;              i = 0;&#xD;&#xA;              while(tk.hasMoreTokens()){&#xD;&#xA;                a[i] =Integer.parseInt(tk.nextToken());&#xD;&#xA;                i++;&#xD;&#xA;              }&#xD;&#xA;    &#xD;&#xA;              m = Long.parseLong(br.readLine());&#xD;&#xA;              max = a[0];&#xD;&#xA;              for(i=0;i<n;i++){&#xD;&#xA;                if(a[i]>max){&#xD;&#xA;                  max = a[i];&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;              for(i=0;i<n;i++){&#xD;&#xA;                b[a[i]]++;&#xD;&#xA;              }&#xD;&#xA;    &#xD;&#xA;              c[max] = b[max];&#xD;&#xA;    &#xD;&#xA;              for(i=max-1;i>=1;i--){&#xD;&#xA;                if(b[i]!=0){&#xD;&#xA;                  c[i] = c[i+1] + b[i];&#xD;&#xA;                }&#xD;&#xA;                else{&#xD;&#xA;                c[i] = c[i+1];&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;              k = 0;&#xD;&#xA;    &#xD;&#xA;              for(i=max;i>=1;i--){&#xD;&#xA;                if(c[i]>=m-k){&#xD;&#xA;                  ans = ans + (m-k)*i;&#xD;&#xA;                  break;&#xD;&#xA;                }&#xD;&#xA;                else{&#xD;&#xA;                  ans = ans + c[i]*i;&#xD;&#xA;                  k = k + c[i];&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;              System.out.println(ans);&#xD;&#xA;              t--;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;It gives correct answers for simple test cases but giving **Wrong Answer** on SPOJ. Is there a problem with my logic or is JAVA itself producing wrong answer on SPOJ? If there is a problem with JAVA, then should I quit coding in JAVA for competitive coding problems?&#xD;&#xA;&#xD;&#xA;**Edit:** Removed `Arrays.sort()`. Replaced with Counting Sort. Updated the code. Still getting **WA**&#xD;&#xA;&#xD;&#xA;**Edit2:** Converted all the arrays to `long` type. Passes all tests. Can't figure out why. Can anyone tell **Why??**";;added 121 characters in body

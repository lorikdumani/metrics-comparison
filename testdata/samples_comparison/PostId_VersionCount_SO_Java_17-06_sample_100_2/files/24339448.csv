Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
67753368;24339448;2659741;2;a04dd1af-17e5-4447-9983-dcc871e96ed4;2014-06-21 07:32:19.0;"I am using a 2 way ssl authentication to post data securely. The client has given me their certificates which i loaded into the truststore and my server certificate which they generated after i gave them my CSR. I have loaded my server cert into the keystore. My code is accepting their certificates, sending the key but not the server certificate.&#xD;&#xA;Code used is as below. Kindly assist;&#xD;&#xA;&#xD;&#xA;Error: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure.&#xD;&#xA;&#xD;&#xA;Reason: Empty certificate passed.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public static String DoMyPost(String URL, String requestData, String transactID)&#xD;&#xA;            throws MalformedURLException, Exception {&#xD;&#xA;        System.out.println(""DoMyPost(): Start"");&#xD;&#xA;        String strResponse = """";&#xD;&#xA;        URL url = new URL(URL);&#xD;&#xA;        try {&#xD;&#xA;            HostnameVerifier hv = new HostnameVerifier() {&#xD;&#xA;             @Override&#xD;&#xA;             public boolean verify(String urlHostName, SSLSession session) {&#xD;&#xA;             return true;&#xD;&#xA;             }&#xD;&#xA;             };&#xD;&#xA;            //set necessary keystore properties - using a jks file&#xD;&#xA;            System.setProperty(""javax.net.ssl.keyStore"", ""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1.jks"");&#xD;&#xA;            System.setProperty(""javax.net.ssl.keyStorePassword"", ""x123"");&#xD;&#xA;            System.setProperty(""javax.net.ssl.keyStoreType"", ""JKS"");&#xD;&#xA;			&#xD;&#xA;            //set necessary truststore properties - using JKS&#xD;&#xA;            System.setProperty(""javax.net.ssl.trustStore"", ""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1.jks"");&#xD;&#xA;            System.setProperty(""javax.net.ssl.trustStorePassword"", ""x123"");&#xD;&#xA;			&#xD;&#xA;            // register a https protocol handler  &#xD;&#xA;            System.setProperty(""java.protocol.handler.pkgs"", ""com.sun.net.ssl.internal.www.protocol"");&#xD;&#xA;            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");&#xD;&#xA;            //KeyStore keyStorex = KeyStore.getInstance(""JKS"");  &#xD;&#xA;            KeyStore keyStorex = KeyStore.getInstance(""JKS"");&#xD;&#xA;            InputStream keyInput = new FileInputStream(""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1.jks"");&#xD;&#xA;            keyStorex.load(keyInput, ""x123"".toCharArray());&#xD;&#xA;            keyInput.close();&#xD;&#xA;            keyManagerFactory.init(keyStorex, ""x123"".toCharArray());&#xD;&#xA;            SSLContext context = SSLContext.getInstance(""TLS"");&#xD;&#xA;            context.init(keyManagerFactory.getKeyManagers(), null, new SecureRandom());&#xD;&#xA;            SSLSocketFactory sockFact = context.getSocketFactory();&#xD;&#xA;            // Open a secure connection.&#xD;&#xA;            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();&#xD;&#xA;            con.setSSLSocketFactory(sockFact);&#xD;&#xA;            con.setHostnameVerifier(hv);&#xD;&#xA;            // Set up the connection properties&#xD;&#xA;            con.setRequestProperty(""Connection"", ""close"");&#xD;&#xA;            con.setDoInput(true);&#xD;&#xA;            con.setDoOutput(true);&#xD;&#xA;            con.setUseCaches(false);&#xD;&#xA;            con.setConnectTimeout(10000);&#xD;&#xA;            con.setReadTimeout(10000);&#xD;&#xA;            con.setRequestMethod(""POST"");&#xD;&#xA;            con.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");&#xD;&#xA;            con.setRequestProperty(""Content-Length"", Integer.toString(requestData.length()));&#xD;&#xA;&#xD;&#xA;            // Send the request&#xD;&#xA;            OutputStream outputStream = con.getOutputStream();&#xD;&#xA;            outputStream.write(requestData.getBytes(""UTF-8""));&#xD;&#xA;            outputStream.close();&#xD;&#xA;&#xD;&#xA;            // Check for errors&#xD;&#xA;            int responseCode = con.getResponseCode();&#xD;&#xA;            InputStream inputStream;&#xD;&#xA;            if (responseCode == HttpURLConnection.HTTP_OK) {&#xD;&#xA;                inputStream = con.getInputStream();&#xD;&#xA;            } else {&#xD;&#xA;                inputStream = con.getErrorStream();&#xD;&#xA;            }&#xD;&#xA;            System.out.println(inputStream);&#xD;&#xA;            inputStream.close();            &#xD;&#xA;            InputStreamReader isr = new InputStreamReader(con.getInputStream());&#xD;&#xA;            BufferedReader in = new BufferedReader(isr);&#xD;&#xA;            StringBuilder out = new StringBuilder();&#xD;&#xA;            String inputLine;&#xD;&#xA;            while ((inputLine = in.readLine()) != null) {&#xD;&#xA;                out.append(inputLine.replace(""<![CDATA["", """").replace(""]]>"", """").replace(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>"", """"));&#xD;&#xA;            }&#xD;&#xA;            in.close();&#xD;&#xA;            String result = out.toString();&#xD;&#xA;            System.out.println(result);&#xD;&#xA;            strResponse = result;&#xD;&#xA;        } catch (Exception ex) {&#xD;&#xA;            strResponse = ""Connection Error "" + ex;&#xD;&#xA;            System.out.println(ex);&#xD;&#xA;        }&#xD;&#xA;        return strResponse;&#xD;&#xA;    }";;
68008906;24339448;2659741;5;923d3bc8-2fb8-4eec-be2b-49fcd9024da7;2014-06-25 09:03:48.0;"I am using a 2 way ssl authentication to post data securely. The client has given me their certificates which i loaded into the truststore and my server certificate which they generated after i gave them my CSR. I have loaded my server cert into the keystore. My code is accepting their certificates, sending the key but not the server certificate.&#xD;&#xA;Code used is as below. Kindly assist;&#xD;&#xA;&#xD;&#xA;Error: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure.&#xD;&#xA;&#xD;&#xA;Reason: Empty certificate passed.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public static String DoMyPost(String URL, String requestData, String transactID)&#xD;&#xA;            throws MalformedURLException, Exception {&#xD;&#xA;        System.out.println(""DoMyPost(): Start"");&#xD;&#xA;        String strResponse = """";&#xD;&#xA;        URL url = new URL(URL);&#xD;&#xA;        try {&#xD;&#xA;            HostnameVerifier hv = new HostnameVerifier() {&#xD;&#xA;             @Override&#xD;&#xA;             public boolean verify(String urlHostName, SSLSession session) {&#xD;&#xA;             return true;&#xD;&#xA;             }&#xD;&#xA;             };&#xD;&#xA;            System.setProperty(""javax.net.ssl.keyStore"", ""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1.jks"");&#xD;&#xA;            System.setProperty(""javax.net.ssl.keyStorePassword"", ""wasp123"");&#xD;&#xA;            System.setProperty(""javax.net.ssl.keyStoreType"", ""JKS"");&#xD;&#xA;            &#xD;&#xA;            System.setProperty(""javax.net.ssl.trustStore"", ""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1TrustStore"");&#xD;&#xA;            System.setProperty(""javax.net.ssl.trustStorePassword"", ""wasp123"");&#xD;&#xA;            System.setProperty(""javax.net.debug"", ""all"");&#xD;&#xA;            &#xD;&#xA;            //CertificateFactory factory2 = CertificateFactory.getInstance(""X.509"");&#xD;&#xA;            //Certificate generateCertificate = factory2.generateCertificate(new FileInputStream(""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1.cer""));&#xD;&#xA;            KeyStore ks = KeyStore.getInstance(""JKS"");&#xD;&#xA;            InputStream certK = new FileInputStream(""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1.jks"");&#xD;&#xA;            ks.load(certK, ""wasp123"".toCharArray());&#xD;&#xA;            //ks.setCertificateEntry(""testserver1cert"", generateCertificate);&#xD;&#xA;            KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");&#xD;&#xA;            kmf.init(ks, ""wasp123"".toCharArray());&#xD;&#xA;            &#xD;&#xA;            KeyStore truststore = KeyStore.getInstance(""JKS"");&#xD;&#xA;            InputStream truststorex = new FileInputStream(""C:\\\\Program Files (x86)\\\\Java\\\\jre7\\\\bin\\\\testserver1TrustStore"");&#xD;&#xA;            truststore.load(truststorex, ""wasp123"".toCharArray());&#xD;&#xA;            TrustManager[] tm;&#xD;&#xA;            TrustManagerFactory tmf = TrustManagerFactory.getInstance(""SunX509"");&#xD;&#xA;            tmf.init(truststore);&#xD;&#xA;            tm = tmf.getTrustManagers();&#xD;&#xA;            SSLContext sslContext = SSLContext.getInstance(""SSL"");&#xD;&#xA;            sslContext.init(kmf.getKeyManagers(), tm, null);&#xD;&#xA;            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();&#xD;&#xA;            // Open a secure connection.&#xD;&#xA;            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();&#xD;&#xA;            con.setSSLSocketFactory(sockFact);&#xD;&#xA;            con.setHostnameVerifier(hv);&#xD;&#xA;            // Set up the connection properties&#xD;&#xA;            con.setRequestProperty(""Connection"", ""close"");&#xD;&#xA;            con.setDoInput(true);&#xD;&#xA;            con.setDoOutput(true);&#xD;&#xA;            con.setUseCaches(false);&#xD;&#xA;            con.setConnectTimeout(10000);&#xD;&#xA;            con.setReadTimeout(10000);&#xD;&#xA;            con.setRequestMethod(""POST"");&#xD;&#xA;            con.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");&#xD;&#xA;            con.setRequestProperty(""Content-Length"", Integer.toString(requestData.length()));&#xD;&#xA;&#xD;&#xA;            // Send the request&#xD;&#xA;            OutputStream outputStream = con.getOutputStream();&#xD;&#xA;            outputStream.write(requestData.getBytes(""UTF-8""));&#xD;&#xA;            outputStream.close();&#xD;&#xA;&#xD;&#xA;            // Check for errors&#xD;&#xA;            int responseCode = con.getResponseCode();&#xD;&#xA;            InputStream inputStream;&#xD;&#xA;            if (responseCode == HttpURLConnection.HTTP_OK) {&#xD;&#xA;                inputStream = con.getInputStream();&#xD;&#xA;            } else {&#xD;&#xA;                inputStream = con.getErrorStream();&#xD;&#xA;            }&#xD;&#xA;            System.out.println(inputStream);&#xD;&#xA;            inputStream.close();            &#xD;&#xA;            InputStreamReader isr = new InputStreamReader(con.getInputStream());&#xD;&#xA;            BufferedReader in = new BufferedReader(isr);&#xD;&#xA;            StringBuilder out = new StringBuilder();&#xD;&#xA;            String inputLine;&#xD;&#xA;            while ((inputLine = in.readLine()) != null) {&#xD;&#xA;                out.append(inputLine.replace(""<![CDATA["", """").replace(""]]>"", """").replace(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>"", """"));&#xD;&#xA;            }&#xD;&#xA;            in.close();&#xD;&#xA;            String result = out.toString();&#xD;&#xA;            System.out.println(result);&#xD;&#xA;            strResponse = result;&#xD;&#xA;        } catch (Exception ex) {&#xD;&#xA;            strResponse = ""Connection Error "" + ex;&#xD;&#xA;            System.out.println(ex);&#xD;&#xA;        }&#xD;&#xA;        return strResponse;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;The debug shows;&#xD;&#xA;&#xD;&#xA;    *AWT-EventQueue-0, READ: TLSv1 Handshake, length = 4&#xD;&#xA;    *** ServerHelloDone&#xD;&#xA;    [read] MD5 and SHA1 hashes:  len = 4&#xD;&#xA;    0000: 0E 00 00 00                                        ....&#xD;&#xA;    *** Certificate chain&#xD;&#xA;    ***&#xD;&#xA;    *** ClientKeyExchange, RSA PreMasterSecret, TLSv1&#xD;&#xA;    [write] MD5 and SHA1 hashes:  len = 269&#xD;&#xA;    0000: 0B 00 00 03 00 00 00 10   00 01 02 01 00 A3 CE 04  ................&#xD;&#xA;    0010: FD F7 31 F4 CD 0E C5 F3   44 B9 BA 55 0E FE 1F 53  ..1.....D..U...S&#xD;&#xA;    0020: A7 11 55 02 DF 61 1E 55   A8 4E DB FF E9 EA E1 95  ..U..a.U.N......&#xD;&#xA;    0030: 7A 2C 86 4D 64 37 37 19   8F 5C AF 2D FF 31 AD 2E  z,.Md77..\\.-.1..&#xD;&#xA;    0040: B9 62 00 6D 89 DC CB 3E   66 1E 3B 22 06 04 89 CE  .b.m...>f.;""....&#xD;&#xA;    0050: 52 99 73 8A FC FD 81 03   32 86 26 0B 3C 90 D6 85  R.s.....2.&.<...&#xD;&#xA;    0060: 03 71 47 0E C7 FE C6 25   DA DD 8D 5F D7 A0 A1 15  .qG....%..._....&#xD;&#xA;    0070: 1E 4C C4 17 ED 62 B5 E7   1E AF A1 4F 70 0B AF 89  .L...b.....Op...&#xD;&#xA;    0080: 72 02 62 DC 0F 8C C7 9C   D5 D2 32 35 08 4C 4E 2E  r.b.......25.LN.&#xD;&#xA;    0090: 8C 9A F8 4B 1F 41 3D F0   E8 B9 2A 48 13 59 44 D7  ...K.A=...*H.YD.&#xD;&#xA;    00A0: 8F A0 FE DC 3E 72 4F F6   FE 18 BF B9 6E 0B 8E 13  ....>rO.....n...&#xD;&#xA;    00B0: 21 12 A5 54 D0 43 EC BD   D2 37 91 7E DD BA 86 E3  !..T.C...7......&#xD;&#xA;    00C0: F8 67 4F F5 61 19 5B 15   71 7F 32 69 02 7E CC 2E  .gO.a.[.q.2i....&#xD;&#xA;    00D0: 04 A2 9D 7F 55 8C 46 49   DC 2F E1 E3 82 D0 92 BC  ....U.FI./......&#xD;&#xA;    00E0: 66 2A 1C AE 6A 9C C2 89   9D FF 23 75 E3 92 00 94  f*..j.....#u....&#xD;&#xA;    00F0: 2B 3A 03 A0 B6 3B 49 CA   09 8F 13 7B 3E C5 07 BA  +:...;I.....>...&#xD;&#xA;    0100: 23 FD CB 86 99 C7 01 75   93 7E B6 5F 14           #......u..._.&#xD;&#xA;    AWT-EventQueue-0, WRITE: TLSv1 Handshake, length = 269&#xD;&#xA;    [Raw write]: length = 274&#xD;&#xA;    0000: 16 03 01 01 0D 0B 00 00   03 00 00 00 10 00 01 02  ................&#xD;&#xA;    0010: 01 00 A3 CE 04 FD F7 31   F4 CD 0E C5 F3 44 B9 BA  .......1.....D..&#xD;&#xA;    0020: 55 0E FE 1F 53 A7 11 55   02 DF 61 1E 55 A8 4E DB  U...S..U..a.U.N.&#xD;&#xA;    0030: FF E9 EA E1 95 7A 2C 86   4D 64 37 37 19 8F 5C AF  .....z,.Md77..\\.&#xD;&#xA;    0040: 2D FF 31 AD 2E B9 62 00   6D 89 DC CB 3E 66 1E 3B  -.1...b.m...>f.;&#xD;&#xA;    0050: 22 06 04 89 CE 52 99 73   8A FC FD 81 03 32 86 26  ""....R.s.....2.&&#xD;&#xA;    0060: 0B 3C 90 D6 85 03 71 47   0E C7 FE C6 25 DA DD 8D  .<....qG....%...&#xD;&#xA;    0070: 5F D7 A0 A1 15 1E 4C C4   17 ED 62 B5 E7 1E AF A1  _.....L...b.....&#xD;&#xA;    0080: 4F 70 0B AF 89 72 02 62   DC 0F 8C C7 9C D5 D2 32  Op...r.b.......2&#xD;&#xA;    0090: 35 08 4C 4E 2E 8C 9A F8   4B 1F 41 3D F0 E8 B9 2A  5.LN....K.A=...*&#xD;&#xA;    00A0: 48 13 59 44 D7 8F A0 FE   DC 3E 72 4F F6 FE 18 BF  H.YD.....>rO....&#xD;&#xA;    00B0: B9 6E 0B 8E 13 21 12 A5   54 D0 43 EC BD D2 37 91  .n...!..T.C...7.&#xD;&#xA;    00C0: 7E DD BA 86 E3 F8 67 4F   F5 61 19 5B 15 71 7F 32  ......gO.a.[.q.2&#xD;&#xA;    00D0: 69 02 7E CC 2E 04 A2 9D   7F 55 8C 46 49 DC 2F E1  i........U.FI./.&#xD;&#xA;    00E0: E3 82 D0 92 BC 66 2A 1C   AE 6A 9C C2 89 9D FF 23  .....f*..j.....#&#xD;&#xA;    00F0: 75 E3 92 00 94 2B 3A 03   A0 B6 3B 49 CA 09 8F 13  u....+:...;I....&#xD;&#xA;    0100: 7B 3E C5 07 BA 23 FD CB   86 99 C7 01 75 93 7E B6  .>...#......u...&#xD;&#xA;    0110: 5F 14                                              _.&#xD;&#xA;    SESSION KEYGEN:&#xD;&#xA;    PreMaster Secret:&#xD;&#xA;    0000: 03 01 87 D8 D9 C4 7A 0E   70 71 79 EB 45 13 D4 3C  ......z.pqy.E..<&#xD;&#xA;    0010: 6B 6C 39 46 B3 9A 74 1C   F1 E1 C5 40 D0 9E 31 8A  kl9F..t....@..1.&#xD;&#xA;    0020: 2E 62 7D 30 C2 DF 52 20   57 B3 8E 3E 49 93 39 58  .b.0..R W..>I.9X&#xD;&#xA;    CONNECTION KEYGEN:&#xD;&#xA;    Client Nonce:&#xD;&#xA;    0000: 53 AA 8D 7D AE 5C 8B 32   20 6A 21 7B B0 27 14 D8  S....\\.2 j!..'..&#xD;&#xA;    0010: 35 04 E3 1C 5B 0C 42 BA   9A 5D 57 4B D1 5B 7B B3  5...[.B..]WK.[..&#xD;&#xA;    Server Nonce:&#xD;&#xA;    0000: 0B 61 3E 18 09 7C 4F 9A   77 E9 DD D5 67 D2 57 4D  .a>...O.w...g.WM&#xD;&#xA;    0010: 46 86 89 BA 73 44 95 1B   EB B2 BF E7 87 71 E4 15  F...sD.......q..&#xD;&#xA;    Master Secret:&#xD;&#xA;    0000: 75 69 ED F5 6F B0 C1 91   98 6E BF B0 07 0E 55 5F  ui..o....n....U_&#xD;&#xA;    0010: 35 B6 84 1E 80 86 98 85   5E EB C9 C3 26 D0 2F 67  5.......^...&./g&#xD;&#xA;    0020: 38 68 D9 9E ED 5F AD CC   1F D0 53 99 0A BC 66 FC  8h..._....S...f.&#xD;&#xA;    Client MAC write Secret:&#xD;&#xA;    0000: EF DB 37 8A 29 EC 22 DB   CB EC BB 82 0C 02 2A 64  ..7.)."".......*d&#xD;&#xA;    0010: 00 82 6C 73                                        ..ls&#xD;&#xA;    Server MAC write Secret:&#xD;&#xA;    0000: 9D A3 A7 F7 3C DC 7C F0   57 69 93 D2 03 ED 65 6E  ....<...Wi....en&#xD;&#xA;    0010: 93 B9 2B 09                                        ..+.&#xD;&#xA;    Client write key:&#xD;&#xA;    0000: EA C1 F1 E6 08 EC C9 D2   71 9D F7 CA D2 9F 27 FC  ........q.....'.&#xD;&#xA;    Server write key:&#xD;&#xA;    0000: 2D 4D AD 16 80 F2 F4 AB   0B FD 8C 34 B7 55 98 35  -M.........4.U.5&#xD;&#xA;    ... no IV used for this cipher&#xD;&#xA;    AWT-EventQueue-0, WRITE: TLSv1 Change Cipher Spec, length = 1&#xD;&#xA;    [Raw write]: length = 6&#xD;&#xA;    0000: 14 03 01 00 01 01                                  ......&#xD;&#xA;    *** Finished&#xD;&#xA;    verify_data:  { 150, 115, 119, 114, 39, 77, 15, 131, 88, 3, 74, 11 }&#xD;&#xA;    ***&#xD;&#xA;    [write] MD5 and SHA1 hashes:  len = 16&#xD;&#xA;    0000: 14 00 00 0C 96 73 77 72   27 4D 0F 83 58 03 4A 0B  .....swr'M..X.J.&#xD;&#xA;    Padded plaintext before ENCRYPTION:  len = 36&#xD;&#xA;    0000: 14 00 00 0C 96 73 77 72   27 4D 0F 83 58 03 4A 0B  .....swr'M..X.J.&#xD;&#xA;    0010: 65 5E 4B 60 1B 76 B9 8A   A1 99 5B E8 D9 DE 4E 99  e^K`.v....[...N.&#xD;&#xA;    0020: 37 C3 00 0D                                        7...&#xD;&#xA;    AWT-EventQueue-0, WRITE: TLSv1 Handshake, length = 36&#xD;&#xA;    [Raw write]: length = 41&#xD;&#xA;    0000: 16 03 01 00 24 B9 AF 28   41 17 44 C0 9E DD 6B 03  ....$..(A.D...k.&#xD;&#xA;    0010: 92 55 85 6E F8 8E 9A F1   42 67 79 7F 19 8E DB 28  .U.n....Bgy....(&#xD;&#xA;    0020: CB A7 32 DA A3 06 A7 81   07                       ..2......&#xD;&#xA;    [Raw read]: length = 5&#xD;&#xA;    0000: 15 03 01 00 02                                     .....&#xD;&#xA;    [Raw read]: length = 2&#xD;&#xA;    0000: 02 28                                              .(&#xD;&#xA;    AWT-EventQueue-0, READ: TLSv1 Alert, length = 2&#xD;&#xA;    AWT-EventQueue-0, RECV TLSv1 ALERT:  fatal, handshake_failure&#xD;&#xA;    %% Invalidated:  [Session-1, SSL_RSA_WITH_RC4_128_SHA]&#xD;&#xA;    AWT-EventQueue-0, called closeSocket()&#xD;&#xA;    AWT-EventQueue-0, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure&#xD;&#xA;    AWT-EventQueue-0, called close()&#xD;&#xA;    AWT-EventQueue-0, called closeInternal(true)&#xD;&#xA;    Received fatal alert: handshake_failure*";;added 6783 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
80864485;27757202;2576703;2;78dc89f8-f1c6-40c0-8cbd-5f12d851b4bb;2015-01-03 16:56:39.0;"I currently develop a fairly large application which, amongst other things, calculates mathematical problems. Calculations are made in classes, let’s call them A and B, which have some random final attributes and a  (unique) final int id as instance variables. &#xD;&#xA;&#xD;&#xA;I want to be able to run the program in a test mode, where in each execution, the random variables are exactly the same and allow me, for example, to compare the results with hand-made calculations, using Junit tests. Obviously, I don't want to re-calculate my sample solutions after every code change (for example, if an earlier access to the prng is inserted which would shift all random numbers). &#xD;&#xA;&#xD;&#xA;Note that I currently use Java.util.Random as prng, but am open to suggestions. &#xD;&#xA;&#xD;&#xA;The question is now: **How should I structure the instantiation and accessing of the prng?** To point out the problem, note that following would be very bad approaches:&#xD;&#xA;&#xD;&#xA; - I cannot make it a **singleton** and access from everywhere, as then, the random numbers within the classes would depend on the order of instantiation.&#xD;&#xA; - I obviously cannot instantiate a new Random(seed) with a **hardcoded seed**, as the numbers would not be different if the programm is run multiple times (outside of test mode).&#xD;&#xA;&#xD;&#xA;I came up with the following solution (largely based on [this answer][1]), but not identical, as the programming language and test seed generation is different.&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-java -->&#xD;&#xA;&#xD;&#xA;    public class PRNGeneratorGenerator{&#xD;&#xA;    	&#xD;&#xA;    	//Make class a singleton&#xD;&#xA;    	private PRNGeneratorGenerator instance;&#xD;&#xA;        private PRNGeneratorGenerator() {}&#xD;&#xA;    	public PRNGeneratorGenerator getInstance(){&#xD;&#xA;    		if (instance == null) instance = new PRNGeneratorGenerator();&#xD;&#xA;    		return instance;&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	//RandomNumberGenerator-Methods and Attributes&#xD;&#xA;        private boolean isTestMode = false;&#xD;&#xA;        private Random seedRng = new Random();&#xD;&#xA;        &#xD;&#xA;        public void setTestMode(boolean testMode){ &#xD;&#xA;           isTestMode = testMode; &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public Random getPseudorandomNumberGenerator(long testSeed){&#xD;&#xA;          if(isTestMode) return new Random(testSeed); &#xD;&#xA;          return new Random(seedRng.nextLong());&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;The classes (named A and B above) with the final random numbers would then look as follows:&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: java -->&#xD;&#xA;&#xD;&#xA;    public class A{&#xD;&#xA;      private final static long CLASS_SEED = 872349;&#xD;&#xA;      private final int randomNumberOne;&#xD;&#xA;      private final int randomNumberTwo;&#xD;&#xA;      private final int id;&#xD;&#xA;        	&#xD;&#xA;      public A(int id){&#xD;&#xA;        this.id = id;&#xD;&#xA;        long testSeed = CLASS_SEED + id;&#xD;&#xA;        Random rnd = PRNGeneratorGenerator.getInstance().getPseudorandomNumberGenerator(testSeed);&#xD;&#xA;        randomNumberOne = rnd.nextInt();&#xD;&#xA;        randomNumberTwo = rnd.nextInt();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;In the test mode, I would call `PRNGeneratorGenerator.getInstance().setTestMode(true)` before starting any instantiations.&#xD;&#xA;&#xD;&#xA;Is this a good way to solve my problem in java or are there any downsides of this approach? I have read a number of similiar questions, but have found no equivalent ones which answers my question. Thanks in advance for your answer. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/a/12780170/2576703";;
146730496;27757202;-1;5;cdc2839b-21ec-426d-840d-334fc0e6656b;2017-05-23 11:57:54.0;"I currently develop a fairly large application which, amongst other things, calculates mathematical problems. Calculations are made in classes, let’s call them A and B, which have some random final attributes and a  (unique) final int id as instance variables. &#xD;&#xA;&#xD;&#xA;I want to be able to run the program in a test mode, where in each execution, the random variables are exactly the same and allow me, for example, to compare the results with hand-made calculations, using Junit tests. Obviously, I don't want to re-calculate my sample solutions after every code change (for example, if an earlier access to the prng is inserted which would shift all random numbers). &#xD;&#xA;&#xD;&#xA;Note that I currently use Java.util.Random as prng, but am open to suggestions. &#xD;&#xA;&#xD;&#xA;The question is now: **How should I structure the instantiation and accessing of the prng?** To point out the problem, note that following would be very bad approaches:&#xD;&#xA;&#xD;&#xA; - I cannot make it a **singleton** and access from everywhere, as then, the random numbers within the classes would depend on the order of instantiation.&#xD;&#xA; - I obviously cannot instantiate a new Random(seed) with a **hardcoded seed**, as the numbers would not be different if the programm is run multiple times (outside of test mode).&#xD;&#xA;&#xD;&#xA;I came up with the following solution (largely based on [this answer][1]), but not identical, as the programming language and test seed generation is different.&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-java -->&#xD;&#xA;&#xD;&#xA;    public class PRNGeneratorGenerator{&#xD;&#xA;    	&#xD;&#xA;    	//Make class a singleton&#xD;&#xA;    	private PRNGeneratorGenerator instance;&#xD;&#xA;        private PRNGeneratorGenerator() {}&#xD;&#xA;    	public PRNGeneratorGenerator getInstance(){&#xD;&#xA;    		if (instance == null) instance = new PRNGeneratorGenerator();&#xD;&#xA;    		return instance;&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	//RandomNumberGenerator-Methods and Attributes&#xD;&#xA;        private boolean isTestMode = false;&#xD;&#xA;        private Random seedRng = new Random();&#xD;&#xA;        &#xD;&#xA;        public void setTestMode(boolean testMode){ &#xD;&#xA;           isTestMode = testMode; &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public Random getPseudorandomNumberGenerator(long testSeed){&#xD;&#xA;          if(isTestMode) return new Random(testSeed); &#xD;&#xA;          return new Random(seedRng.nextLong());&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;The classes (named A and B above) with the final random numbers would then look as follows:&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: java -->&#xD;&#xA;&#xD;&#xA;    public class A{&#xD;&#xA;      private final static long CLASS_SEED = 872349;&#xD;&#xA;      private final int randomNumberOne;&#xD;&#xA;      private final int randomNumberTwo;&#xD;&#xA;      private final int id;&#xD;&#xA;        	&#xD;&#xA;      public A(int id){&#xD;&#xA;        this.id = id;&#xD;&#xA;        long testSeed = CLASS_SEED + id;&#xD;&#xA;        Random rnd = PRNGeneratorGenerator.getInstance().getPseudorandomNumberGenerator(testSeed);&#xD;&#xA;        randomNumberOne = rnd.nextInt();&#xD;&#xA;        randomNumberTwo = rnd.nextInt();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;In the test mode, I would call `PRNGeneratorGenerator.getInstance().setTestMode(true)` before starting any instantiations.&#xD;&#xA;&#xD;&#xA;Is this a good way to solve my problem in java or are there any downsides of this approach? I have read a number of similiar questions, but have found no equivalent ones which answers my question. Thanks in advance for your answer. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://stackoverflow.com/a/12780170/2576703";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

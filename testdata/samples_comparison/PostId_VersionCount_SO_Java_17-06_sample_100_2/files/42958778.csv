Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
141280451;42958778;613198;2;0e359c78-b469-45b7-b4a3-66117a6b9d80;2017-03-22 17:30:00.0;"This is a very reasonable project. You can access any RESTful service from an Android app. You can even go realtime and use WebSocket or TCP or whatever you want. Your service just needs to be accessible over the Internet.&#xD;&#xA;&#xD;&#xA;Using a good framework will help you with that. Some frameworks to consider: Express, Hapi, Restify, LoopBack, ActionHero. More options here: http://nodeframework.com/&#xD;&#xA;&#xD;&#xA;The usual REST architecture looks like this: Your server listens for HTTP connections from your client, using REST conventions. The data in requests can be passed as JSON or form-urlencoded. The data returned in responses is usually JSON. Your client connects to various endpoints and gets responses.&#xD;&#xA;&#xD;&#xA;But to have microservices you actually need to have multiple Node applications, each responsible for a fraction of the functionality.";;
141280925;42958778;613198;5;3f223f63-e38b-4239-a7b3-3990c3494009;2017-03-22 17:36:30.0;"This is a very reasonable project. You can access any RESTful service from an Android app. You can even go realtime and use WebSocket or TCP or whatever you want. Your service just needs to be accessible over the Internet.&#xD;&#xA;&#xD;&#xA;Using a good framework will help you with that. Some frameworks to consider: Express, Hapi, Restify, LoopBack, ActionHero. More options here: http://nodeframework.com/&#xD;&#xA;&#xD;&#xA;The usual REST architecture looks like this: Your server listens for HTTP connections from your client, using REST conventions. The data in requests can be passed as JSON or form-urlencoded. The data returned in responses is usually JSON. Your client connects to various endpoints and gets responses.&#xD;&#xA;&#xD;&#xA;But to have microservices you actually need to have multiple Node applications, each responsible for a fraction of the functionality. Otherwise you have just a service, not microservices.&#xD;&#xA;&#xD;&#xA;When you have multiple Node apps each listening on a different port, or running on a different host, then you can use some reverse proxy server in front of them to dispatch the requests to the right microservice, so that your client wouldn't have to know your internal architecture. What is usually used for that is nginx but you could also write another Node app to act as a proxy, it's up to you.";;added 456 characters in body

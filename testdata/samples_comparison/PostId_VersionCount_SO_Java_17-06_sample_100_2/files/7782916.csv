Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
17272110;7782916;985906;2;e5a61a66-b44f-44e7-8d77-80b852544606;2011-10-16 07:18:58.0;"The answer is that it really depends on how much you use of FOP.&#xD;&#xA;&#xD;&#xA;When we updated from a .2* version to the .9, then 1.0 version, we had to revise quite a bit, but we generated a large variety of FO (we transformed FO to PostScript) and we needed to generate a variety of PostScripts to see what worked and what failed in the newer versions.  You will likely find an easy replacement for anything that might have vanished based on what you used to do.&#xD;&#xA;&#xD;&#xA;We had, luckily, consolidated references to the Driver and Fop classes to a custom utility and therefore it wasn't so bad a transition to simply swap out a new utility reference that used the FopFactory.&#xD;&#xA;&#xD;&#xA;Your first step should be to write an abstract Facade as @Wivani suggests to consolidate your older fop reference calls, make sure that works in your code, then move forward by replacing your older Facade with an implementation that uses the newer code.&#xD;&#xA;&#xD;&#xA;The only thing that has displeased me about Fop is that the community takes quite a while to apply bug patches and generate new releases.  We used v1 in production with XML Graphics 1.4 with no problems (basic FO to generate PostScript and TIFF files).&#xD;&#xA;&#xD;&#xA;I will supplement this post on Monday with some helper code if you need it.";;
17314736;7782916;985906;5;be2f6309-93bc-4640-849f-f392b4563d76;2011-10-17 22:23:31.0;"The answer is that it really depends on how much you use of FOP.&#xD;&#xA;&#xD;&#xA;When we updated from a .2* version to the .9, then 1.0 version, we had to revise quite a bit, but we generated a large variety of FO (we transformed FO to PostScript) and we needed to generate a variety of PostScripts to see what worked and what failed in the newer versions.  You will likely find an easy replacement for anything that might have vanished based on what you used to do.&#xD;&#xA;&#xD;&#xA;We had, luckily, consolidated references to the Driver and Fop classes to a custom utility and therefore it wasn't so bad a transition to simply swap out a new utility reference that used the FopFactory.&#xD;&#xA;&#xD;&#xA;Your first step should be to write an abstract Facade as @Wivani suggests to consolidate your older fop reference calls, make sure that works in your code, then move forward by replacing your older Facade with an implementation that uses the newer code.&#xD;&#xA;&#xD;&#xA;The only thing that has displeased me about Fop is that the community takes quite a while to apply bug patches and generate new releases.  We used v1 in production with XML Graphics 1.4 with no problems (basic FO to generate PostScript and TIFF files).&#xD;&#xA;&#xD;&#xA;I will supplement this post on Monday with some helper code if you need it.&#xD;&#xA;&#xD;&#xA;UPDATE&#xD;&#xA;Here is what we used to use to convert a FO file to PostScript:&#xD;&#xA;&#xD;&#xA;    String foAsString = ""your_fo_as_string"";&#xD;&#xA;    File destination = new File(""path_to_file"""");&#xD;&#xA;&#xD;&#xA;    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));&#xD;&#xA;    Driver driver = new Driver(new InputSource(new StringReader(foAsString)), out);&#xD;&#xA;    driver.setRenderer(Driver.RENDER_PS);&#xD;&#xA;    driver.run();&#xD;&#xA;&#xD;&#xA;    out.close();&#xD;&#xA;&#xD;&#xA;    return destination;&#xD;&#xA;&#xD;&#xA;Here is an abstract of what we use now.&#xD;&#xA;&#xD;&#xA;FopFactory is created as instance-level as&#xD;&#xA;&#xD;&#xA;    this.fopFactory = FopFactory.newInstance();&#xD;&#xA;&#xD;&#xA;code:&#xD;&#xA; &#xD;&#xA;    String foAsString = ""your_fo_as_string"";&#xD;&#xA;    File destination = new File(""path_to_file"""");&#xD;&#xA;&#xD;&#xA;    OutputStream outStream = new BufferedOutputStream(new FileOutputStream(destination));&#xD;&#xA;    Fop fop = fopFactory.newFop(MimeConstants.MIME_POSTSCRIPT, outStream);&#xD;&#xA;&#xD;&#xA;    Transformer transformer = transformerFactory.newTransformer();&#xD;&#xA;    Source source = new StreamSource(new StringReader(foAsString));&#xD;&#xA;    Result result = new SAXResult(fop.getDefaultHandler());&#xD;&#xA;&#xD;&#xA;    transformer.transform(source, result);&#xD;&#xA;&#xD;&#xA;    outStream.close();&#xD;&#xA;			&#xD;&#xA;    return destination;&#xD;&#xA;";;added code as promised
17315007;7782916;985906;5;8fde702f-d3b4-4546-826b-c86fed334ee7;2011-10-17 22:36:30.0;"The answer is that it really depends on how much you use of FOP.&#xD;&#xA;&#xD;&#xA;When we updated from a .2* version to the .9, then 1.0 version, we had to revise quite a bit, but we generated a large variety of FO (we transformed FO to PostScript) and we needed to generate a variety of PostScripts to see what worked and what failed in the newer versions.  You will likely find an easy replacement for anything that might have vanished based on what you used to do.&#xD;&#xA;&#xD;&#xA;We had, luckily, consolidated references to the Driver and Fop classes to a custom utility and therefore it wasn't so bad a transition to simply swap out a new utility reference that used the FopFactory.&#xD;&#xA;&#xD;&#xA;Your first step should be to write an abstract Facade as @Wivani suggests to consolidate your older fop reference calls, make sure that works in your code, then move forward by replacing your older Facade with an implementation that uses the newer code.&#xD;&#xA;&#xD;&#xA;The only thing that has displeased me about Fop is that the community takes quite a while to apply bug patches and generate new releases.  We used v1 in production with XML Graphics 1.4 with no problems (basic FO to generate PostScript and TIFF files).&#xD;&#xA;&#xD;&#xA;I will supplement this post on Monday with some helper code if you need it.&#xD;&#xA;&#xD;&#xA;UPDATE&#xD;&#xA;Here is what we used to use to convert a FO file to PostScript:&#xD;&#xA;&#xD;&#xA;    String foAsString = ""your_fo_as_string"";&#xD;&#xA;    File destination = new File(""path_to_file"""");&#xD;&#xA;&#xD;&#xA;    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destination));&#xD;&#xA;    Driver driver = new Driver(new InputSource(new StringReader(foAsString)), out);&#xD;&#xA;    driver.setRenderer(Driver.RENDER_PS);&#xD;&#xA;    driver.run();&#xD;&#xA;&#xD;&#xA;    out.close();&#xD;&#xA;&#xD;&#xA;    return destination;&#xD;&#xA;&#xD;&#xA;Here is an abstract of what we use now.&#xD;&#xA;&#xD;&#xA;FopFactory is created as instance-level as&#xD;&#xA;&#xD;&#xA;    this.fopFactory = FopFactory.newInstance();&#xD;&#xA;&#xD;&#xA;code:&#xD;&#xA;&#xD;&#xA;    import javax.xml.transform.Source;&#xD;&#xA;    import javax.xml.transform.Templates;&#xD;&#xA;    import javax.xml.transform.Transformer;&#xD;&#xA;    import javax.xml.transform.TransformerException;&#xD;&#xA;    import javax.xml.transform.TransformerFactory;&#xD;&#xA;    import javax.xml.transform.dom.DOMResult;&#xD;&#xA;    import javax.xml.transform.dom.DOMSource;&#xD;&#xA;    import javax.xml.transform.sax.SAXResult;&#xD;&#xA;    import javax.xml.transform.stream.StreamResult;&#xD;&#xA;    import javax.xml.transform.stream.StreamSource;&#xD;&#xA;&#xD;&#xA;    import org.apache.fop.apps.Fop;&#xD;&#xA;    import org.apache.fop.apps.FopFactory;&#xD;&#xA;    import org.apache.fop.apps.MimeConstants;&#xD;&#xA;    &#xD;&#xA;    // ...&#xD;&#xA;    &#xD;&#xA;    String foAsString = ""your_fo_as_string"";&#xD;&#xA;    File destination = new File(""path_to_file"""");&#xD;&#xA;&#xD;&#xA;    OutputStream outStream = new BufferedOutputStream(new FileOutputStream(destination));&#xD;&#xA;    Fop fop = fopFactory.newFop(MimeConstants.MIME_POSTSCRIPT, outStream);&#xD;&#xA;&#xD;&#xA;    Transformer transformer = transformerFactory.newTransformer();&#xD;&#xA;    Source source = new StreamSource(new StringReader(foAsString));&#xD;&#xA;    Result result = new SAXResult(fop.getDefaultHandler());&#xD;&#xA;&#xD;&#xA;    transformer.transform(source, result);&#xD;&#xA;&#xD;&#xA;    outStream.close();&#xD;&#xA;			&#xD;&#xA;    return destination;&#xD;&#xA;";;added includes for later code

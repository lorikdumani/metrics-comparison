Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
16466713;7456304;859762;2;991543f2-aa16-4f71-bec0-8ec77474867f;2011-09-17 16:43:56.0;"They render so differently because you set different css properties and use different elements in every example.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/";;
16467055;7456304;859762;5;a8b2ea13-1610-4129-9233-64bc6ea8dade;2011-09-17 17:08:38.0;"They render so differently because you set different css properties and use different elements in every example. Also adding the `float` to label but not to any other elements, and not giving any other elements the css `clear` property creates this rendering issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;Inline: `An inline element only takes up as much width as necessary, and does not force line breaks.`&#xD;&#xA;&#xD;&#xA;Block: `A block element is an element that takes up the full width available, and has a line break before and after it.`&#xD;&#xA;&#xD;&#xA;from [w3schools][2]&#xD;&#xA;&#xD;&#xA;The `label` element is a inline element. Because you change it to be a block element, it will try and take up a full row. However, adding the float: left removes it from the document flow.&#xD;&#xA;&#xD;&#xA;1. - Both the `label` and `input` are inline elements. The `input` takes up a newline because it will never be able to fit next to anything. The size of the input is larger then its parent. &#xD;&#xA;- The css `display: block` doesnt really do much for a label in this case. Because it has a float and no other element does. In a good browser, you should not see any difference between the label with or without `display:block` except for the last example where the label will actually align left instead of against the previous `label`&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/&#xD;&#xA;  [2]: http://www.w3schools.com/css/css_display_visibility.asp";;added 937 characters in body
16467139;7456304;859762;5;d427d8d1-dd8b-4276-9a18-2b5a85d9dc2e;2011-09-17 17:13:55.0;"They render so differently because you set different css properties and use different elements in every example. Also adding the `float` to label but not to any other elements, and not giving any other elements the css `clear` property creates this rendering issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;Inline: `An inline element only takes up as much width as necessary, and does not force line breaks.`&#xD;&#xA;&#xD;&#xA;Block: `A block element is an element that takes up the full width available, and has a line break before and after it.`&#xD;&#xA;&#xD;&#xA;from [w3schools][2]&#xD;&#xA;&#xD;&#xA;The `label` element is a inline element. Because you change it to be a block element, it will try and take up a full row. However, adding the float: left removes it from the document flow.&#xD;&#xA;&#xD;&#xA;1. - Both the `label` and `input` are inline elements. The `input` takes up a newline because it will never be able to fit next to anything. The size of the input is larger then its parent. &#xD;&#xA;- The css `display: block` doesnt really do much for a label in this case. Because it has a float and no other element does. In a good browser, you should not see any difference between the label with or without `display:block` except for the last example where the label will actually be on the left against instead of floating against the previous `label`&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/&#xD;&#xA;  [2]: http://www.w3schools.com/css/css_display_visibility.asp";;added 937 characters in body
16467307;7456304;859762;5;535faabf-44fc-4431-9374-b453c7ca6b70;2011-09-17 17:25:08.0;"They render so differently because you set different css properties and use different elements in every example. Also adding the `float` to label but not to any other elements, and not giving any other elements the css `clear` property creates this rendering issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;Inline: `An inline element only takes up as much width as necessary, and does not force line breaks.`&#xD;&#xA;&#xD;&#xA;Block: `A block element is an element that takes up the full width available, and has a line break before and after it.`&#xD;&#xA;&#xD;&#xA;from [w3schools][2]&#xD;&#xA;&#xD;&#xA;The `label` element is a inline element. Because you change it to be a block element, it will try and take up a full row. However, adding the float: left removes it from the document flow.&#xD;&#xA;&#xD;&#xA;1. - Both the `label` and `input` are inline elements. The `input` takes up a newline because it will never be able to fit next to anything. The size of the input is larger then its parent. &#xD;&#xA;- The css `display: block` doesnt really do much for a label in this case. Because it has a float and no other element does. In a good browser, you should not see any difference between the label with or without `display:block` except for the last example where the label will actually be on the left against instead of floating against the previous `label`&#xD;&#xA;&#xD;&#xA;2. - The div is displayed ontop of the label. This is because with the `float: left` the label is outside of the normal document flow. The div element is ontop of it, because the div is inside the normal document flow. &#xD;&#xA;- The text inside the div is next to the label and not ontop of it, because text has a default inline display. If you would remove the text from the label the text inside the div would align on the left.&#xD;&#xA;Adding a clear: left to the div would restore the normal document flow, putting the div on a new line&#xD;&#xA;&#xD;&#xA;3. - The label both float left and the span is displayed after them.  The `width: 300px;` on the span doesnt really do anything on inline elements. If you want it to have a width you should either `float` it, give it a `display: block` or `display: inline-block`&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/&#xD;&#xA;  [2]: http://www.w3schools.com/css/css_display_visibility.asp";;added 937 characters in body
16467440;7456304;859762;5;22c80383-2951-4b49-98cb-0bfe072318fe;2011-09-17 17:33:06.0;"They render so differently because you set different css properties and use different elements in every example. Also adding the `float` to label but not to any other elements, and not giving any other elements the css `clear` property creates this rendering issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;Inline: `An inline element only takes up as much width as necessary, and does not force line breaks.`&#xD;&#xA;&#xD;&#xA;Block: `A block element is an element that takes up the full width available, and has a line break before and after it.`&#xD;&#xA;&#xD;&#xA;from [w3schools][2]&#xD;&#xA;&#xD;&#xA;The `label` element is a inline element. Because you change it to be a block element, it will try and take up a full row. However, adding the float: left removes it from the document flow.&#xD;&#xA;&#xD;&#xA;Most properties you use on a `span` element are useless unless you set it to `display: block`, `float: left` or `display: inline-block`. Right now the set height, width and margin are ignored. I you would want to adjust the size of the span you can only use: `line-height` and `padding`&#xD;&#xA;&#xD;&#xA;1. - Both the `label` and `input` are inline elements. The `input` takes up a newline because it will never be able to fit next to anything. The size of the input is larger then its parent. &#xD;&#xA;- The css `display: block` doesnt really do much for a label in this case. Because it has a float and no other element does. In a good browser, you should not see any difference between the label with or without `display:block` except for the last example where the label will actually be on the left against instead of floating against the previous `label`&#xD;&#xA;&#xD;&#xA;2. - The div is displayed ontop of the label. This is because with the `float: left` the label is outside of the normal document flow. The div element is ontop of it, because the div is inside the normal document flow. &#xD;&#xA;- The text inside the div is next to the label and not ontop of it, because text has a default inline display. If you would remove the text from the label the text inside the div would align on the left.&#xD;&#xA;Adding a clear: left to the div would restore the normal document flow, putting the div on a new line&#xD;&#xA;3. - The label both float left and the span is displayed after them.  The `width: 300px;` on the span doesnt really do anything on inline elements. If you want it to have a width you should either `float` it, give it a `display: block` or `display: inline-block`&#xD;&#xA;- The height of the pink area is determined only by the span because this is the only element inside the document flow. adding `overflow:hidden` to the parent div or a empty div with `clear:both` after the last label will both fix the box to go around all elements inside it.&#xD;&#xA;4. - The labels still both float on the left, only this time the inline span is so big the email label cant float left of it, so it is positioned next to email but lower, where there is room. The room is there because the span is only 15 pixels high while the label is 20px high, this is for both elements determined by the `line-height` property &#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/&#xD;&#xA;  [2]: http://www.w3schools.com/css/css_display_visibility.asp";;added 937 characters in body
16467528;7456304;859762;5;9b605e7c-58a0-44d2-9c15-8ac729b44681;2011-09-17 17:38:17.0;"They render so differently because you set different css properties and use different elements in every example. Also adding the `float` to label but not to any other elements, and not giving any other elements the css `clear` property creates this rendering issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;Inline: `An inline element only takes up as much width as necessary, and does not force line breaks.`&#xD;&#xA;&#xD;&#xA;Block: `A block element is an element that takes up the full width available, and has a line break before and after it.`&#xD;&#xA;&#xD;&#xA;from [w3schools][2]&#xD;&#xA;&#xD;&#xA;The `label` element is a inline element. Because you change it to be a block element, it will try and take up a full row. However, adding the float: left removes it from the document flow.&#xD;&#xA;&#xD;&#xA;Most properties you use on a `span` element are useless unless you set it to `display: block`, `float: left` or `display: inline-block`. Right now the set height, width and margin are ignored. If you want to adjust the size of the span you can only use: `line-height` and `padding`&#xD;&#xA;&#xD;&#xA;1. - Both the `label` and `input` are inline elements. The `input` takes up a newline because it will never be able to fit next to anything. The size of the input is larger then its parent. &#xD;&#xA;- The css `display: block` doesnt really do much for a label in this case. Because it has a float and no other element does. In a good browser, you should not see any difference between the label with or without `display:block` except for the last example where the label will actually be on the left against instead of floating against the previous `label`&#xD;&#xA;&#xD;&#xA;2. - The div is displayed ontop of the label. This is because with the `float: left` the label is outside of the normal document flow. The div element is ontop of it, because the div is inside the normal document flow. &#xD;&#xA;- The text inside the div is next to the label and not ontop of it, because text has a default inline display. If you would remove the text from the label the text inside the div would align on the left.&#xD;&#xA;Adding a clear: left to the div would restore the normal document flow, putting the div on a new line&#xD;&#xA;3. - The label both float left and the span is displayed after them.  The `width: 300px;` on the span doesnt really do anything on inline elements. If you want it to have a width you should either `float` it, give it a `display: block` or `display: inline-block`&#xD;&#xA;- The height of the pink area is determined only by the span because this is the only element inside the document flow. adding `overflow:hidden` to the parent div or a empty div with `clear:both` after the last label will both fix the box to go around all elements inside it.&#xD;&#xA;4. - The labels still both float on the left, only this time the inline span is so big the email label cant float left of it, so it is positioned next to email but lower, where there is room. The room is there because the span is only 15 pixels high while the label is 20px high, this is for both elements determined by the `line-height` property &#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/&#xD;&#xA;  [2]: http://www.w3schools.com/css/css_display_visibility.asp";;deleted 5 characters in body
16467605;7456304;859762;5;999e6699-b013-41d7-a49a-31a2269e79b8;2011-09-17 17:44:22.0;"They render so differently because you set different css properties and use different elements in every example. Also adding the `float` to label but not to any other elements, and not giving any other elements the css `clear` property creates this rendering issue.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;A proper explenation of floats is done on [A List Apart][1]&#xD;&#xA;&#xD;&#xA;Inline: `An inline element only takes up as much width as necessary, and does not force line breaks.`&#xD;&#xA;&#xD;&#xA;Block: `A block element is an element that takes up the full width available, and has a line break before and after it.`&#xD;&#xA;&#xD;&#xA;from [w3schools][2]&#xD;&#xA;&#xD;&#xA;The `label` element is a inline element. Adding the float: left removes it from the document flow and makes it a block element. The explicit `display:block` isnt necessary.&#xD;&#xA;&#xD;&#xA;Most properties you use on a `span` element are useless unless you set it to `display: block`, `float: left` or `display: inline-block`. Right now the set height, width and margin are ignored. If you want to adjust the size of the span you can only use: `line-height` and `padding`&#xD;&#xA;&#xD;&#xA;1. - Both the `label` and `input` are inline elements. The `input` takes up a newline because it will never be able to fit next to anything. The size of the input is larger then its parent. &#xD;&#xA;- The css `display: block` doesnt really do much for a label in this case. Because it has a float and no other element does. In a good browser, you should not see any difference between the label with or without `display:block` except for the last example where the label will actually be on the left against instead of floating against the previous `label`&#xD;&#xA;&#xD;&#xA;2. - The div is displayed ontop of the label. This is because with the `float: left` the label is outside of the normal document flow. The div element is ontop of it, because the div is inside the normal document flow. &#xD;&#xA;- The text inside the div is next to the label and not ontop of it, because text has a default inline display. If you would remove the text from the label the text inside the div would align on the left.&#xD;&#xA;Adding a clear: left to the div would restore the normal document flow, putting the div on a new line&#xD;&#xA;3. - The label both float left and the span is displayed after them.  The `width: 300px;` on the span doesnt really do anything on inline elements. If you want it to have a width you should either `float` it, give it a `display: block` or `display: inline-block`&#xD;&#xA;- The height of the pink area is determined only by the span because this is the only element inside the document flow. adding `overflow:hidden` to the parent div or a empty div with `clear:both` after the last label will both fix the box to go around all elements inside it.&#xD;&#xA;4. - The labels still both float on the left, only this time the inline span is so big the email label cant float left of it, so it is positioned next to email but lower, where there is room. The room is there because the span is only 15 pixels high while the label is 20px high, this is for both elements determined by the `line-height` property &#xD;&#xA;&#xD;&#xA;  [1]: http://www.alistapart.com/articles/css-floats-101/&#xD;&#xA;  [2]: http://www.w3schools.com/css/css_display_visibility.asp";;deleted 16 characters in body

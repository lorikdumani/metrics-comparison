Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
80516855;27668576;1415724;2;7dcde632-e7b1-4118-a158-dd5c7b682e95;2014-12-27 15:17:03.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which should read as `echo $result;`&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](http://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;";;
80517672;27668576;1415724;5;c175350d-a242-4527-a461-5284caf4214a;2014-12-27 15:39:39.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which should read as `echo $result;`&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](http://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Footnotes:&#xD;&#xA;&#xD;&#xA;Since your code seems to run on the same page, I suggest you also add a conditional statement to check if the submit button was also clicked:&#xD;&#xA;&#xD;&#xA;	if ( isset($_POST['submitButton']) &#xD;&#xA;		&& isset($_POST['username']) &#xD;&#xA;		&& isset($_POST['password']) ){&#xD;&#xA;&#xD;&#xA;If by adding that and it doesn't work, try changing your `<button>` to an `<input>`&#xD;&#xA;&#xD;&#xA;I.e.:&#xD;&#xA;&#xD;&#xA;	<input type=""submit"" class=""btn btn-success"" name=""submitButton"" value=""Sign in"">&#xD;&#xA;&#xD;&#xA;";;added 272 characters in body
80517915;27668576;1415724;5;bc091050-faa2-48a9-9ccf-0b910567b20f;2014-12-27 15:48:00.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which should read as `echo $result;`&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](http://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Footnotes:&#xD;&#xA;&#xD;&#xA;Since your code seems to run on the same page, I suggest you also add a conditional statement to check if the submit button was also clicked:&#xD;&#xA;&#xD;&#xA;	if ( isset($_POST['submitButton']) &#xD;&#xA;		&& isset($_POST['username']) &#xD;&#xA;		&& isset($_POST['password']) ){&#xD;&#xA;&#xD;&#xA;If by adding that and it doesn't work, try changing your `<button>` to an `<input>`&#xD;&#xA;&#xD;&#xA;I.e.:&#xD;&#xA;&#xD;&#xA;	<input type=""submit"" class=""btn btn-success"" name=""submitButton"" value=""Sign in"">&#xD;&#xA;&#xD;&#xA;>*I'm aware that i may need an action command*&#xD;&#xA;&#xD;&#xA;If your entire code is inside the same page and an action is omitted from `<form>`, it defaults to self, which is equivalent to doing `<form action="""" method=""post"">`.&#xD;&#xA;&#xD;&#xA;If your form and PHP/MySQL are not part of your form and is in a different page, then you would need to specify its action to a file `<form action=""handler.php"" method=""post"">`&#xD;&#xA;&#xD;&#xA;";;added 391 characters in body
80520575;27668576;1415724;5;6612c4af-d5cd-43f3-b618-b211fd6d5694;2014-12-27 17:11:02.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which should read as `echo $result;`&#xD;&#xA;&#xD;&#xA;However, you should remove that line, because it will throw the following error:&#xD;&#xA;&#xD;&#xA;>Catchable fatal error: Object of class mysqli_result could not be converted to string in...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](http://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Footnotes:&#xD;&#xA;&#xD;&#xA;Since your code seems to run on the same page, I suggest you also add a conditional statement to check if the submit button was also clicked:&#xD;&#xA;&#xD;&#xA;	if ( isset($_POST['submitButton']) &#xD;&#xA;		&& isset($_POST['username']) &#xD;&#xA;		&& isset($_POST['password']) ){&#xD;&#xA;&#xD;&#xA;If by adding that and it doesn't work, try changing your `<button>` to an `<input>`&#xD;&#xA;&#xD;&#xA;I.e.:&#xD;&#xA;&#xD;&#xA;	<input type=""submit"" class=""btn btn-success"" name=""submitButton"" value=""Sign in"">&#xD;&#xA;&#xD;&#xA;>*I'm aware that i may need an action command*&#xD;&#xA;&#xD;&#xA;If your entire code is inside the same page and an action is omitted from `<form>`, it defaults to self, which is equivalent to doing `<form action="""" method=""post"">`.&#xD;&#xA;&#xD;&#xA;If your form and PHP/MySQL are not part of your form and is in a different page, then you would need to specify its action to a file `<form action=""handler.php"" method=""post"">`&#xD;&#xA;&#xD;&#xA;";;added 182 characters in body
80520800;27668576;1415724;5;7475797e-eb03-4b92-9bd9-2e46794e05d6;2014-12-27 17:17:44.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which *technically*, should read as  &#xD;&#xA;`echo $result;`&#xD;&#xA;&#xD;&#xA;However, you should remove that line, because it will throw the following error:&#xD;&#xA;&#xD;&#xA;>Catchable fatal error: Object of class mysqli_result could not be converted to string in...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](http://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Footnotes:&#xD;&#xA;&#xD;&#xA;Since your code seems to run on the same page, I suggest you also add a conditional statement to check if the submit button was also clicked:&#xD;&#xA;&#xD;&#xA;	if ( isset($_POST['submitButton']) &#xD;&#xA;		&& isset($_POST['username']) &#xD;&#xA;		&& isset($_POST['password']) ){&#xD;&#xA;&#xD;&#xA;If by adding that and it doesn't work, try changing your `<button>` to an `<input>`&#xD;&#xA;&#xD;&#xA;I.e.:&#xD;&#xA;&#xD;&#xA;	<input type=""submit"" class=""btn btn-success"" name=""submitButton"" value=""Sign in"">&#xD;&#xA;&#xD;&#xA;>*I'm aware that i may need an action command*&#xD;&#xA;&#xD;&#xA;If your entire code is inside the same page and an action is omitted from `<form>`, it defaults to self, which is equivalent to doing `<form action="""" method=""post"">`.&#xD;&#xA;&#xD;&#xA;If your form and PHP/MySQL are not part of your form and is in a different page, then you would need to specify its action to a file `<form action=""handler.php"" method=""post"">`&#xD;&#xA;&#xD;&#xA;";;added 18 characters in body
80524881;27668576;1415724;5;cfaacb7d-cbb5-4565-b509-5be60600aa53;2014-12-27 19:09:31.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which *technically*, should read as  &#xD;&#xA;`echo $result;`&#xD;&#xA;&#xD;&#xA;However, you should remove that line, because it will throw the following error:&#xD;&#xA;&#xD;&#xA;>Catchable fatal error: Object of class mysqli_result could not be converted to string in...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](http://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Footnotes:&#xD;&#xA;&#xD;&#xA;Since your code seems to run on the same page, I suggest you also add a conditional statement to check if the submit button was also clicked:&#xD;&#xA;&#xD;&#xA;	if ( isset($_POST['submitButton']) &#xD;&#xA;		&& isset($_POST['username']) &#xD;&#xA;		&& isset($_POST['password']) ){&#xD;&#xA;&#xD;&#xA;If by adding that and it doesn't work, try changing your `<button>` to an `<input>`&#xD;&#xA;&#xD;&#xA;I.e.:&#xD;&#xA;&#xD;&#xA;	<input type=""submit"" class=""btn btn-success"" name=""submitButton"" value=""Sign in"">&#xD;&#xA;&#xD;&#xA;>*I'm aware that i may need an action command*&#xD;&#xA;&#xD;&#xA;If your entire code is inside the same page and an action is omitted from `<form>`, it defaults to self, which is equivalent to doing `<form action="""" method=""post"">`.&#xD;&#xA;&#xD;&#xA;If your form and PHP/MySQL are not part of your form and is in a different page, then you would need to specify its action to a file `<form action=""handler.php"" method=""post"">`&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;**Edit:**&#xD;&#xA;&#xD;&#xA;Connecting to a DB using the `mysqli_` functions example:&#xD;&#xA;&#xD;&#xA;As per http://php.net/manual/en/function.mysqli-connect.php&#xD;&#xA;&#xD;&#xA;	<?php&#xD;&#xA;	//conection:&#xD;&#xA;	$link = mysqli_connect(""myhost"",""myuser"",""mypassw"",""mybd"") &#xD;&#xA;	&#xD;&#xA;	     or die(""Error "" . mysqli_error($link)); &#xD;&#xA;&#xD;&#xA; - Replace/use `$link` respectively or change accordingly.&#xD;&#xA;&#xD;&#xA;while making sure you've chosen the correct table and database.&#xD;&#xA;&#xD;&#xA;";;added DB connection example  using mysqli_ functions
140877928;27668576;-1;5;38bf2c32-ece6-46b0-80c8-dd420e934a75;2017-03-17 13:14:46.0;"There are a few things wrong with your code.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	echo log in script has run&#xD;&#xA;&#xD;&#xA;Needs to read as (missing quotes and semi-colon)&#xD;&#xA;&#xD;&#xA;	echo ""log in script has run"";&#xD;&#xA;&#xD;&#xA;Then there's a missing semi-colon for `echo $result` which *technically*, should read as  &#xD;&#xA;`echo $result;`&#xD;&#xA;&#xD;&#xA;However, you should remove that line, because it will throw the following error:&#xD;&#xA;&#xD;&#xA;>Catchable fatal error: Object of class mysqli_result could not be converted to string in...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Then, you're not connecting to your DB with your query.&#xD;&#xA;&#xD;&#xA;Since you didn't mention what variable you're using to connect with, I used `$con` as an example.&#xD;&#xA;&#xD;&#xA;This line:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($query) or die(mysqli_error());&#xD;&#xA;&#xD;&#xA;should read as, and using the DB connection variable as the first parameter:&#xD;&#xA;&#xD;&#xA;	$result = mysqli_query($con, $query) or die(mysqli_error($con));&#xD;&#xA;&#xD;&#xA;**Sidenote:** Make sure that your connection API is `mysqli_` and not `mysql_` or PDO-based. Those APIs do not intermix with each other.&#xD;&#xA;&#xD;&#xA;If that is your actual code, where it contains spaces before your opening `<?php` tag; remove them.&#xD;&#xA;&#xD;&#xA;In using sessions, that would count as output before header.&#xD;&#xA;&#xD;&#xA;Add [**error reporting**](http://php.net/manual/en/function.error-reporting.php) to the top of your file(s) which will help find errors and would have signaled a parse error to start with.&#xD;&#xA;&#xD;&#xA;    <?php &#xD;&#xA;	error_reporting(E_ALL);&#xD;&#xA;	ini_set('display_errors', 1);&#xD;&#xA;&#xD;&#xA;    // rest of your code&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Sidenote:** Error reporting should only be done in staging, and never production.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;I noticed you may be storing passwords in plain text. If this is the case, it is highly discouraged.&#xD;&#xA;&#xD;&#xA;It is recommended to use [**CRYPT_BLOWFISH**](https://security.stackexchange.com/q/36471) or PHP 5.5's [`password_hash()`](http://www.php.net/manual/en/function.password-hash.php) function. For PHP < 5.5 use the [`password_hash() compatibility pack`](https://github.com/ircmaxell/password_compat). &#xD;&#xA;&#xD;&#xA;Plus, in regards to SQL injection,  [**use `mysqli` with prepared statements**](http://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php), or [**PDO with prepared statements**](http://php.net/pdo.prepared-statements), *they're much safer*.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;Footnotes:&#xD;&#xA;&#xD;&#xA;Since your code seems to run on the same page, I suggest you also add a conditional statement to check if the submit button was also clicked:&#xD;&#xA;&#xD;&#xA;	if ( isset($_POST['submitButton']) &#xD;&#xA;		&& isset($_POST['username']) &#xD;&#xA;		&& isset($_POST['password']) ){&#xD;&#xA;&#xD;&#xA;If by adding that and it doesn't work, try changing your `<button>` to an `<input>`&#xD;&#xA;&#xD;&#xA;I.e.:&#xD;&#xA;&#xD;&#xA;	<input type=""submit"" class=""btn btn-success"" name=""submitButton"" value=""Sign in"">&#xD;&#xA;&#xD;&#xA;>*I'm aware that i may need an action command*&#xD;&#xA;&#xD;&#xA;If your entire code is inside the same page and an action is omitted from `<form>`, it defaults to self, which is equivalent to doing `<form action="""" method=""post"">`.&#xD;&#xA;&#xD;&#xA;If your form and PHP/MySQL are not part of your form and is in a different page, then you would need to specify its action to a file `<form action=""handler.php"" method=""post"">`&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;**Edit:**&#xD;&#xA;&#xD;&#xA;Connecting to a DB using the `mysqli_` functions example:&#xD;&#xA;&#xD;&#xA;As per http://php.net/manual/en/function.mysqli-connect.php&#xD;&#xA;&#xD;&#xA;	<?php&#xD;&#xA;	//conection:&#xD;&#xA;	$link = mysqli_connect(""myhost"",""myuser"",""mypassw"",""mybd"") &#xD;&#xA;	&#xD;&#xA;	     or die(""Error "" . mysqli_error($link)); &#xD;&#xA;&#xD;&#xA; - Replace/use `$link` respectively or change accordingly.&#xD;&#xA;&#xD;&#xA;while making sure you've chosen the correct table and database.&#xD;&#xA;&#xD;&#xA;";;replaced http://security.stackexchange.com/ with https://security.stackexchange.com/

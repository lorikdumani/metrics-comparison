Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
108904826;34907365;157247;2;eebdfa42-92c6-4383-bd30-bc7d9dcedad0;2016-01-20 18:08:21.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;I don't think so.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;
108905426;34907365;157247;5;bc18f4cb-1b21-46e5-b806-ff94b6c216c4;2016-01-20 18:16:06.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;<s>I don't think so.</s>&#xD;&#xA;&#xD;&#xA;Foolish me, of course you can if you work hard enough. See under the line below.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;You *can* freeze a `Date`, or effectively so anyway: Replace all its mutator methods with no-ops and then `freeze` it.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;added 219 characters in body
108905898;34907365;157247;5;f1756b75-2802-4408-b500-699ab686a112;2016-01-20 18:22:36.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;<s>I don't think so.</s>&#xD;&#xA;&#xD;&#xA;Foolish me, of course you can if you work hard enough. See under the line below.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;You *can* freeze a `Date`, or effectively so anyway: Replace all its mutator methods with no-ops and then `freeze` it. Like this (I'm using ES2015 features here, since I saw that `let` in your code, so you'll need a recent browser to run it; but this can be done with ES5-only features as well):&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    ""use strict"";&#xD;&#xA;&#xD;&#xA;    let d = new Date();&#xD;&#xA;    freezeDate(d);&#xD;&#xA;    d.setTime(0);&#xD;&#xA;    snippet.log(d);&#xD;&#xA;&#xD;&#xA;    function nop() {&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function freezeDate(d) {&#xD;&#xA;      allNames(d).forEach(name => {&#xD;&#xA;        if (name.startsWith(""set"") && typeof d[name] === ""function"") {&#xD;&#xA;          d[name] = nop;&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      Object.freeze(d);&#xD;&#xA;      return d;&#xD;&#xA;    }&#xD;&#xA;    function allNames(obj) {&#xD;&#xA;      var names = Object.create(null); // Or use Map here&#xD;&#xA;      var thisObj;&#xD;&#xA;      &#xD;&#xA;      for (thisObj = obj; thisObj; thisObj = Object.getPrototypeOf(thisObj)) {&#xD;&#xA;        Object.getOwnPropertyNames(thisObj).forEach(name => {&#xD;&#xA;          names[name] = 1;&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      return Object.keys(names);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->&#xD;&#xA;    <script src=""//tjcrowder.github.io/simple-snippets-console/snippet.js""></script>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;I *think* all the mutator methods of `Date` start with `set`, but if not it's easy to tweak the above.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;added 219 characters in body
108906071;34907365;157247;5;f64cb5da-0a20-49e9-9a87-b977c628bc40;2016-01-20 18:24:57.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;I don't think so. You can get *close*, though, see under the line below. But first let's see why just `Object.freeze` doesn't work.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;You *can* freeze a `Date`, or effectively so anyway: Replace all its mutator methods with no-ops and then `freeze` it. But as [observed](http://stackoverflow.com/questions/34907311/is-there-a-way-to-object-freeze-a-javascript-date/34907365#comment57551167_34907365) by [zzzzBov](http://stackoverflow.com/users/497418/zzzzbov) *(nice one!)*, that doesn't prevent someone from maliciously doing `Date.prototype.setTime.call(d, 0)`. So it's *close*, but no cigar.&#xD;&#xA;&#xD;&#xA;Here's an example (I'm using ES2015 features here, since I saw that `let` in your code, so you'll need a recent browser to run it; but this can be done with ES5-only features as well):&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    ""use strict"";&#xD;&#xA;&#xD;&#xA;    let d = new Date();&#xD;&#xA;    freezeDate(d);&#xD;&#xA;    d.setTime(0);&#xD;&#xA;    snippet.log(d);&#xD;&#xA;&#xD;&#xA;    function nop() {&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function freezeDate(d) {&#xD;&#xA;      allNames(d).forEach(name => {&#xD;&#xA;        if (name.startsWith(""set"") && typeof d[name] === ""function"") {&#xD;&#xA;          d[name] = nop;&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      Object.freeze(d);&#xD;&#xA;      return d;&#xD;&#xA;    }&#xD;&#xA;    function allNames(obj) {&#xD;&#xA;      var names = Object.create(null); // Or use Map here&#xD;&#xA;      var thisObj;&#xD;&#xA;      &#xD;&#xA;      for (thisObj = obj; thisObj; thisObj = Object.getPrototypeOf(thisObj)) {&#xD;&#xA;        Object.getOwnPropertyNames(thisObj).forEach(name => {&#xD;&#xA;          names[name] = 1;&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      return Object.keys(names);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->&#xD;&#xA;    <script src=""//tjcrowder.github.io/simple-snippets-console/snippet.js""></script>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;I *think* all the mutator methods of `Date` start with `set`, but if not it's easy to tweak the above.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;added 312 characters in body
108942063;34907365;157247;5;2c51705f-b030-404a-93c7-1b33bc488a8a;2016-01-21 06:46:34.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;I don't think so. You can get *close*, though, see under the line below. But first let's see why just `Object.freeze` doesn't work.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;You *can* freeze a `Date`, or effectively so anyway: Replace all its mutator methods with no-op functions (or functions that throw an error) and then `freeze` it. But as [observed](http://stackoverflow.com/questions/34907311/is-there-a-way-to-object-freeze-a-javascript-date/34907365#comment57551167_34907365) by [zzzzBov](http://stackoverflow.com/users/497418/zzzzbov) *(nice one!)*, that doesn't prevent someone from maliciously doing `Date.prototype.setTime.call(d, 0)`. So it's *close*, but no cigar.&#xD;&#xA;&#xD;&#xA;Here's an example (I'm using ES2015 features here, since I saw that `let` in your code, so you'll need a recent browser to run it; but this can be done with ES5-only features as well):&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    ""use strict"";&#xD;&#xA;&#xD;&#xA;    let d = new Date();&#xD;&#xA;    freezeDate(d);&#xD;&#xA;    d.setTime(0);&#xD;&#xA;    snippet.log(d);&#xD;&#xA;&#xD;&#xA;    function nop() {&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function freezeDate(d) {&#xD;&#xA;      allNames(d).forEach(name => {&#xD;&#xA;        if (name.startsWith(""set"") && typeof d[name] === ""function"") {&#xD;&#xA;          d[name] = nop;&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      Object.freeze(d);&#xD;&#xA;      return d;&#xD;&#xA;    }&#xD;&#xA;    function allNames(obj) {&#xD;&#xA;      var names = Object.create(null); // Or use Map here&#xD;&#xA;      var thisObj;&#xD;&#xA;      &#xD;&#xA;      for (thisObj = obj; thisObj; thisObj = Object.getPrototypeOf(thisObj)) {&#xD;&#xA;        Object.getOwnPropertyNames(thisObj).forEach(name => {&#xD;&#xA;          names[name] = 1;&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      return Object.keys(names);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->&#xD;&#xA;    <script src=""//tjcrowder.github.io/simple-snippets-console/snippet.js""></script>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;I *think* all the mutator methods of `Date` start with `set`, but if not it's easy to tweak the above.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;added 44 characters in body
108957399;34907365;157247;5;9b0b3cad-8a36-49b8-ac38-6ea1a1cc7472;2016-01-21 10:25:00.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;I don't think so. You can get *close*, though, see under the line below. But first let's see why just `Object.freeze` doesn't work.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;You *can* freeze a `Date`, or effectively so anyway: Replace all its mutator methods with no-op functions (or functions that throw an error) and then `freeze` it. But as [observed](http://stackoverflow.com/questions/34907311/is-there-a-way-to-object-freeze-a-javascript-date/34907365#comment57551167_34907365) by [zzzzBov](http://stackoverflow.com/users/497418/zzzzbov) *(nice one!)*, that doesn't prevent someone from doing `Date.prototype.setTime.call(d, 0)` (in a deliberate attempt to get around the frozen object, or as a byproduct of some complicated code they're using). So it's *close*, but no cigar.&#xD;&#xA;&#xD;&#xA;Here's an example (I'm using ES2015 features here, since I saw that `let` in your code, so you'll need a recent browser to run it; but this can be done with ES5-only features as well):&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    ""use strict"";&#xD;&#xA;&#xD;&#xA;    let d = new Date();&#xD;&#xA;    freezeDate(d);&#xD;&#xA;    d.setTime(0);&#xD;&#xA;    snippet.log(d);&#xD;&#xA;&#xD;&#xA;    function nop() {&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function freezeDate(d) {&#xD;&#xA;      allNames(d).forEach(name => {&#xD;&#xA;        if (name.startsWith(""set"") && typeof d[name] === ""function"") {&#xD;&#xA;          d[name] = nop;&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      Object.freeze(d);&#xD;&#xA;      return d;&#xD;&#xA;    }&#xD;&#xA;    function allNames(obj) {&#xD;&#xA;      var names = Object.create(null); // Or use Map here&#xD;&#xA;      var thisObj;&#xD;&#xA;      &#xD;&#xA;      for (thisObj = obj; thisObj; thisObj = Object.getPrototypeOf(thisObj)) {&#xD;&#xA;        Object.getOwnPropertyNames(thisObj).forEach(name => {&#xD;&#xA;          names[name] = 1;&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      return Object.keys(names);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->&#xD;&#xA;    <script src=""//tjcrowder.github.io/simple-snippets-console/snippet.js""></script>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;I *think* all the mutator methods of `Date` start with `set`, but if not it's easy to tweak the above.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;added 104 characters in body
147472408;34907365;-1;5;3ae7ca18-a64e-402a-a31f-14041cd00d26;2017-05-23 12:25:31.0;"> Is there a way to Object.freeze() a JavaScript Date?&#xD;&#xA;&#xD;&#xA;I don't think so. You can get *close*, though, see under the line below. But first let's see why just `Object.freeze` doesn't work.&#xD;&#xA;&#xD;&#xA;> I was expecting that calling freeze on a date would prevent changes to that date...&#xD;&#xA;&#xD;&#xA;It would **if** `Date` used an object property to hold its internal time value, but it doesn't. It uses a [`[[DateValue]]` *internal slot*][1] instead. [Internal slots](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object-internal-methods-and-internal-slots) aren't properties:&#xD;&#xA;&#xD;&#xA;> Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties...&#xD;&#xA;&#xD;&#xA;So freezing the object doesn't have any effect on its ability to mutate its `[[DateValue]]` internal slot.&#xD;&#xA;&#xD;&#xA;----&#xD;&#xA;&#xD;&#xA;You *can* freeze a `Date`, or effectively so anyway: Replace all its mutator methods with no-op functions (or functions that throw an error) and then `freeze` it. But as [observed](https://stackoverflow.com/questions/34907311/is-there-a-way-to-object-freeze-a-javascript-date/34907365#comment57551167_34907365) by [zzzzBov](https://stackoverflow.com/users/497418/zzzzbov) *(nice one!)*, that doesn't prevent someone from doing `Date.prototype.setTime.call(d, 0)` (in a deliberate attempt to get around the frozen object, or as a byproduct of some complicated code they're using). So it's *close*, but no cigar.&#xD;&#xA;&#xD;&#xA;Here's an example (I'm using ES2015 features here, since I saw that `let` in your code, so you'll need a recent browser to run it; but this can be done with ES5-only features as well):&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: true -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    ""use strict"";&#xD;&#xA;&#xD;&#xA;    let d = new Date();&#xD;&#xA;    freezeDate(d);&#xD;&#xA;    d.setTime(0);&#xD;&#xA;    snippet.log(d);&#xD;&#xA;&#xD;&#xA;    function nop() {&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function freezeDate(d) {&#xD;&#xA;      allNames(d).forEach(name => {&#xD;&#xA;        if (name.startsWith(""set"") && typeof d[name] === ""function"") {&#xD;&#xA;          d[name] = nop;&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      Object.freeze(d);&#xD;&#xA;      return d;&#xD;&#xA;    }&#xD;&#xA;    function allNames(obj) {&#xD;&#xA;      var names = Object.create(null); // Or use Map here&#xD;&#xA;      var thisObj;&#xD;&#xA;      &#xD;&#xA;      for (thisObj = obj; thisObj; thisObj = Object.getPrototypeOf(thisObj)) {&#xD;&#xA;        Object.getOwnPropertyNames(thisObj).forEach(name => {&#xD;&#xA;          names[name] = 1;&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      return Object.keys(names);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->&#xD;&#xA;    <script src=""//tjcrowder.github.io/simple-snippets-console/snippet.js""></script>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;I *think* all the mutator methods of `Date` start with `set`, but if not it's easy to tweak the above.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.ecma-international.org/ecma-262/6.0/index.html#sec-date-constructor";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

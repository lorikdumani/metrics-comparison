Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
96328950;31733844;1235698;2;d2e6a3ca-0fc3-436b-aa2b-69886217ecd1;2015-07-30 20:54:01.0;"I am using [IntDef][1] annotation in my code (but my question is wider in scope so keep reading :) and let say it looks like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;then I got some other methods annotated with this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`.&#xD;&#xA;&#xD;&#xA;I am almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` happy. Sure, I could write:&#xD;&#xA;&#xD;&#xA;    @UiLockMode.AllowedValues&#xD;&#xA;    protected int myGetInt(Parcel in) {&#xD;&#xA;        return in.getInt();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;and then replace above `in.getInt()` with `setLockMode(myGetInt(in));` but politely speaking this simply sucks and I do not want to do that. Is there any more or less elegant way of solving this problem? Maybe I am missing something obvious about annotations? Or the way is to fill bug report to make Google address this problem? Any input appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html";;
96329850;31733844;1235698;5;b1cac818-c3da-40f6-8753-324bdd3eeec5;2015-07-30 21:08:58.0;"I am using [IntDef][1] annotation in my code (but my question is wider in scope so keep reading :) and let say it looks like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;then I got some other methods annotated with this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. Sure, I could add some code and write:&#xD;&#xA;&#xD;&#xA;    @UiLockMode.AllowedValues&#xD;&#xA;    protected int myGetInt(Parcel in) {&#xD;&#xA;        return in.getInt();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;and then replace above `setLockMethood(in.getInt());` above with `setLockMode(myGetInt(in));` but politely speaking this simply sucks and I do not want to do that really, really. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any more or less elegant way of solving this problem? Maybe I am missing something obvious about annotations? Or the way is to fill bug report to make Google address this problem? &#xD;&#xA;&#xD;&#xA;Any input appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**EDIT**&#xD;&#xA;&#xD;&#xA;As @fractalwrench suggested in his answer, I can suppress the warning. Sure, that would work. But is it the only way?&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html";;"added 330 characters in body; edited tags"
96331021;31733844;1235698;5;2d639816-9637-4569-9d70-d22636cf8b25;2015-07-30 21:28:46.0;"I am using [IntDef][1] annotation in my code (but my question is wider in scope so keep reading :) and let say it looks like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;then I got some other methods annotated with this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. Sure, I could add some code and write:&#xD;&#xA;&#xD;&#xA;    @UiLockMode.AllowedValues&#xD;&#xA;    protected int myGetInt(Parcel in) {&#xD;&#xA;        return in.getInt();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;and then replace above `setLockMethood(in.getInt());` above with `setLockMode(myGetInt(in));` but politely speaking this simply sucks and I do not want to do that really, really. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any more or less elegant way of solving this problem? Maybe I am missing something obvious about annotations? Or the way is to fill bug report to make Google address this problem? &#xD;&#xA;&#xD;&#xA;Any input appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**EDIT 1**&#xD;&#xA;&#xD;&#xA;As @fractalwrench suggested in his answer, I can suppress the warning. Sure, that would work. But is it the only way?&#xD;&#xA;&#xD;&#xA;**EDIT 2**&#xD;&#xA;&#xD;&#xA;Extending `Parcelable`. As per my comment below:  if I you got many classes implementing Parcelable then this is not the best way to go I think. Either you end with one class (`MyParcelable`) that is annotated with every possible `AllowedValues` annotations I created for other classes) or you end with bunch of classes, each one extending `Parcelable` just because of annotation. Far from simplification :)&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html";;added 423 characters in body
96334271;31733844;1235698;5;d0804e29-270a-467c-be18-53174e5d9beb;2015-07-30 22:43:29.0;"I am using [IntDef][1] annotation in my code (but my question is wider in scope so keep reading :) and let say it looks like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;then I got some other methods annotated with this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any more or less elegant way of solving this problem? Maybe I am missing something obvious about annotations? Or the way is to fill bug report to make Google address this problem? &#xD;&#xA;&#xD;&#xA;Any input appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**EDIT 1**&#xD;&#xA;&#xD;&#xA;As @fractalwrench suggested in his answer, I can suppress the warning. Sure, that would work. But is it the only way?&#xD;&#xA;android/support/annotation/IntDef.html";;deleted 331 characters in body
96336035;31733844;1235698;5;63fb6d0a-0435-4d23-8eea-61e160b835b9;2015-07-30 23:34:28.0;"I am using [IntDef][1] annotation in my code (but my question is wider in scope so please keep reading :) like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Next, I got some other methods annotated with it like this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any way of solving this problem? Maybe I am missing something obvious about annotations but maybe I shall be creating bug report to make Google address this problem instead? &#xD;&#xA;&#xD;&#xA;Any input or thought appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**EDIT 1**&#xD;&#xA;&#xD;&#xA;As @fractalwrench suggested in his answer, I can suppress the warning. Sure, that works still, not the nicest approach. I do not want to surpress the warning. I'd like to make it understand the value returned by `getInt()` at this point is correct, and that's imho is a significant difference. So is there any way?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html";;added 51 characters in body
96355282;31733844;1235698;5;d42d8e18-f0fc-4361-af3e-10f392283e8e;2015-07-31 07:48:21.0;"I am using [IntDef][1] from [Android Support annotation][2] in my code (but my question is wider in scope so please keep reading :) like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Next, I got some other methods annotated with it like this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any way of solving this problem? Maybe I am missing something obvious about annotations but maybe I shall be creating bug report to make Google address this problem instead? &#xD;&#xA;&#xD;&#xA;Any input or thought appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**EDIT 1**&#xD;&#xA;&#xD;&#xA;As @fractalwrench suggested in his answer, I can suppress the warning. Sure, that works still, not the nicest approach. I do not want to surpress the warning. I'd like to make it understand the value returned by `getInt()` at this point is correct, and that's imho is a significant difference. So is there any way?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html&#xD;&#xA;  [2]: https://sites.google.com/a/android.com/tools/tech-docs/support-annotations";;added 109 characters in body
96367702;31733844;1235698;5;d63ffa0c-50b9-42b5-9102-245357ed301e;2015-07-31 10:36:39.0;"I am using [IntDef][1] from [Android Support annotation][2] in my code (but my question is wider in scope so please keep reading :) like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Next, I got some other methods annotated with it like this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any way of solving this problem? Maybe I am missing something obvious about annotations but maybe I shall be creating bug report to make Google address this problem instead? &#xD;&#xA;&#xD;&#xA;Any input or thought appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**EDIT**&#xD;&#xA;&#xD;&#xA;As @fractalwrench suggested in his answer, I can suppress the warning. Sure, that works, but getting rid of this warning  is not my intention. I do not want to suppress the warning but, if possible, I'd like to make it understand the value returned by `getInt()` at is correct, and that's IMHO pretty significant difference.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html&#xD;&#xA;  [2]: https://sites.google.com/a/android.com/tools/tech-docs/support-annotations";;added 8 characters in body
126390568;31733844;1235698;5;023fba54-e9cc-44da-aa13-4254c9c61eb5;2016-09-04 14:19:26.0;"I am using [IntDef][1] from [Android Support annotation][2] in my code (but my question is wider in scope so please keep reading :) like this:&#xD;&#xA;&#xD;&#xA;    public class UiLockMode&#xD;&#xA;    {&#xD;&#xA;    	@IntDef({DEFAULT, NONE, VISIBLE, TRANSPARENT})&#xD;&#xA;    	@Retention(RetentionPolicy.SOURCE)&#xD;&#xA;    	public @interface AllowedValues {}&#xD;&#xA;    &#xD;&#xA;    	public static final int DEFAULT 	= 0;&#xD;&#xA;    	public static final int NONE 		= 1;&#xD;&#xA;    	public static final int VISIBLE 	= 2;&#xD;&#xA;    	public static final int TRANSPARENT = 3;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Next, I got some other methods annotated with it like this:&#xD;&#xA;&#xD;&#xA;    protected void setLockMode(@UiLockMode.AllowedValues int lockMode) {&#xD;&#xA;        ...&#xD;&#xA;&#xD;&#xA;At that point is all fine and nice but the problem shows up whenever I'd like to pass return value from other methods to `setLockMode()`, like i.e. from Parcelable implementation:&#xD;&#xA;&#xD;&#xA;    private Foo(Parcel in) {&#xD;&#xA;        ...&#xD;&#xA;        setLockMode(in.getInt());&#xD;&#xA;&#xD;&#xA;In such case my IDE complains that I am only allowed to use `DEFAULT, NONE, VISIBLE, TRANSPARENT` with `setLockMode()`. But `getInt()` is not my method so I cannot annotate its return value and make all this happy. I am also almost sure this is not unique use case but I failed to find the way to either temporarily disable `AllowedValues` annotation from complaining here or to ""cast"" return value from `getInt()` to make `AllowedValue` not complaining. &#xD;&#xA;&#xD;&#xA;So my questions are: is there any way of solving this problem? Maybe I am missing something obvious about annotations but maybe I shall be creating bug report to make Google address this problem instead? &#xD;&#xA;&#xD;&#xA;Any input or thought appreciated.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://developer.android.com/reference/android/support/annotation/IntDef.html&#xD;&#xA;  [2]: https://sites.google.com/a/android.com/tools/tech-docs/support-annotations";;"deleted 342 characters in body; edited tags"

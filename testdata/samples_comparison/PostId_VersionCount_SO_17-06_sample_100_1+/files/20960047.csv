Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
55045581;20960047;1155209;2;07fc2e25-df3d-4da8-a018-e7d6b76bf026;2014-01-06 21:57:58.0;"Here is quick test application which [initializes the owners][1] of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29";;
55046332;20960047;1155209;5;07128f0c-c0d3-4a52-a534-70832657913d;2014-01-06 22:12:09.0;"**Solution**&#xD;&#xA;&#xD;&#xA;Use [stage.setOwner(parentStage)][1].&#xD;&#xA;&#xD;&#xA;**Sample App**&#xD;&#xA;&#xD;&#xA;Here is quick test application which initializes the owners of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;**Additional Questions**&#xD;&#xA;&#xD;&#xA;> So basically initOwner ""links"" the children to the main stage? &#xD;&#xA; 	&#xD;&#xA;Yes, [MSDN explains how window ownage works on Windows][2].  Behaviour may differ slighty on other platforms (which is why the JavaFX Javadoc on the matter is deliberately vague), but I think most of the principles are the same and it should work on OS X and Linux is a similar manner.&#xD;&#xA;&#xD;&#xA;From MSDN:&#xD;&#xA;&#xD;&#xA;> To allow you to create a relationship between a child window and a parent window, Window supports the notion of ownership. Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).&#xD;&#xA;>&#xD;&#xA;> Once this relationship is established, the following behaviors are exhibited:&#xD;&#xA;>&#xD;&#xA;> * If an owner window is minimized, all its owned windows are minimized as well.&#xD;&#xA;> * If an owned window is minimized, its owner is not minimized.&#xD;&#xA;> * If an owner window is maximized, both the owner window and its owned windows are restored.&#xD;&#xA;> * An owner window can never cover an owned window.&#xD;&#xA;> * Owned windows that were not opened using ShowDialog are not modal. The user can still interact with the owner window.&#xD;&#xA;> * If you close an owner window, its owned windows are also closed.&#xD;&#xA;> * If an owned window was opened by its owner window using Show, and the owner window is closed, the owned window's Closing event is not raised.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;> Can that work with children such as `child = new Stage(UNDECORATED); child.initModality(Modality.NONE);`?&#xD;&#xA;&#xD;&#xA;Yes, it should work (I haven't verified it), just edit this answer if you verify it.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/system.windows.window.owner%28v=vs.110%29.aspx";;added 1731 characters in body
55046665;20960047;829571;5;1280d5c6-6d43-4de2-9db0-9106e586e4f2;2014-01-06 22:19:24.0;"**Solution**&#xD;&#xA;&#xD;&#xA;Use [stage.setOwner(parentStage)][1].&#xD;&#xA;&#xD;&#xA;**Sample App**&#xD;&#xA;&#xD;&#xA;Here is quick test application which initializes the owners of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;**Additional Questions**&#xD;&#xA;&#xD;&#xA;> So basically initOwner ""links"" the children to the main stage? &#xD;&#xA; 	&#xD;&#xA;Yes, [MSDN explains how window ownage works on Windows][2].  Behaviour may differ slighty on other platforms (which is why the JavaFX Javadoc on the matter is deliberately vague), but I think most of the principles are the same and it should work on OS X and Linux is a similar manner.&#xD;&#xA;&#xD;&#xA;From MSDN:&#xD;&#xA;&#xD;&#xA;> To allow you to create a relationship between a child window and a parent window, Window supports the notion of ownership. Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).&#xD;&#xA;>&#xD;&#xA;> Once this relationship is established, the following behaviors are exhibited:&#xD;&#xA;>&#xD;&#xA;> * If an owner window is minimized, all its owned windows are minimized as well.&#xD;&#xA;> * If an owned window is minimized, its owner is not minimized.&#xD;&#xA;> * If an owner window is maximized, both the owner window and its owned windows are restored.&#xD;&#xA;> * An owner window can never cover an owned window.&#xD;&#xA;> * Owned windows that were not opened using ShowDialog are not modal. The user can still interact with the owner window.&#xD;&#xA;> * If you close an owner window, its owned windows are also closed.&#xD;&#xA;> * If an owned window was opened by its owner window using Show, and the owner window is closed, the owned window's Closing event is not raised.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;> Can that work with children such as `child = new Stage(UNDECORATED); child.initModality(Modality.NONE);`?&#xD;&#xA;&#xD;&#xA;Yes, it does.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/system.windows.window.owner%28v=vs.110%29.aspx";;deleted 71 characters in body
55046667;20960047;1155209;5;2467263b-cddc-42b5-a6f2-4f5d85f6d380;2014-01-06 22:19:26.0;"**Solution**&#xD;&#xA;&#xD;&#xA;Use [stage.setOwner(parentStage)][1].&#xD;&#xA;&#xD;&#xA;**Sample App**&#xD;&#xA;&#xD;&#xA;Here is quick test application which initializes the owners of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;**Additional Questions**&#xD;&#xA;&#xD;&#xA;> So basically initOwner ""links"" the children to the main stage? &#xD;&#xA; 	&#xD;&#xA;Yes, [MSDN explains how window ownage works on Windows][2].  Behaviour may differ slighty on other platforms (which is why the JavaFX Javadoc on the matter is deliberately vague), but I think most of the principles are the same and it should work on OS X and Linux is a similar manner.&#xD;&#xA;&#xD;&#xA;From MSDN:&#xD;&#xA;&#xD;&#xA;> To allow you to create a relationship between a child window and a parent window, Window supports the notion of ownership. Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).&#xD;&#xA;>&#xD;&#xA;> Once this relationship is established, the following behaviors are exhibited:&#xD;&#xA;>&#xD;&#xA;> * If an owner window is minimized, all its owned windows are minimized as well.&#xD;&#xA;> * If an owned window is minimized, its owner is not minimized.&#xD;&#xA;> * If an owner window is maximized, both the owner window and its owned windows are restored.&#xD;&#xA;> * An owner window can never cover an owned window.&#xD;&#xA;> * Owned windows that were not opened using ShowDialog are not modal. The user can still interact with the owner window.&#xD;&#xA;> * If you close an owner window, its owned windows are also closed.&#xD;&#xA;> * If an owned window was opened by its owner window using Show, and the owner window is closed, the owned window's Closing event is not raised.&#xD;&#xA;>&#xD;&#xA;> When you open a child window by calling ShowDialog, you should also set the Owner property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;> Can that work with children such as `child = new Stage(UNDECORATED); child.initModality(Modality.NONE);`?&#xD;&#xA;&#xD;&#xA;Yes, it should work (I haven't verified it), just edit this answer if you verify it.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/system.windows.window.owner%28v=vs.110%29.aspx";;added some more context info.
55046680;20960047;829571;5;eaaf4b0f-14b0-4bb3-a407-c4a7f5d517ff;2014-01-06 22:19:55.0;"**Solution**&#xD;&#xA;&#xD;&#xA;Use [stage.setOwner(parentStage)][1].&#xD;&#xA;&#xD;&#xA;**Sample App**&#xD;&#xA;&#xD;&#xA;Here is quick test application which initializes the owners of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;**Additional Questions**&#xD;&#xA;&#xD;&#xA;> So basically initOwner ""links"" the children to the main stage? &#xD;&#xA; 	&#xD;&#xA;Yes, [MSDN explains how window ownage works on Windows][2].  Behaviour may differ slighty on other platforms (which is why the JavaFX Javadoc on the matter is deliberately vague), but I think most of the principles are the same and it should work on OS X and Linux is a similar manner.&#xD;&#xA;&#xD;&#xA;From MSDN:&#xD;&#xA;&#xD;&#xA;> To allow you to create a relationship between a child window and a parent window, Window supports the notion of ownership. Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).&#xD;&#xA;>&#xD;&#xA;> Once this relationship is established, the following behaviors are exhibited:&#xD;&#xA;>&#xD;&#xA;> * If an owner window is minimized, all its owned windows are minimized as well.&#xD;&#xA;> * If an owned window is minimized, its owner is not minimized.&#xD;&#xA;> * If an owner window is maximized, both the owner window and its owned windows are restored.&#xD;&#xA;> * An owner window can never cover an owned window.&#xD;&#xA;> * Owned windows that were not opened using ShowDialog are not modal. The user can still interact with the owner window.&#xD;&#xA;> * If you close an owner window, its owned windows are also closed.&#xD;&#xA;> * If an owned window was opened by its owner window using Show, and the owner window is closed, the owned window's Closing event is not raised.&#xD;&#xA;>&#xD;&#xA;> When you open a child window by calling ShowDialog, you should also set the Owner property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;> Can that work with children such as `child = new Stage(UNDECORATED); child.initModality(Modality.NONE);`?&#xD;&#xA;&#xD;&#xA;Yes, it does.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/system.windows.window.owner%28v=vs.110%29.aspx";;deleted 71 characters in body
55046719;20960047;1155209;5;52f25937-0ba5-4c70-bd84-a03825791fcb;2014-01-06 22:20:44.0;"**Solution**&#xD;&#xA;&#xD;&#xA;Use [stage.setOwner(parentStage)][1].&#xD;&#xA;&#xD;&#xA;**Sample App**&#xD;&#xA;&#xD;&#xA;Here is quick test application which initializes the owners of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;**Additional Questions**&#xD;&#xA;&#xD;&#xA;> So basically initOwner ""links"" the children to the main stage? &#xD;&#xA; 	&#xD;&#xA;Yes, [MSDN explains how window ownage works on Windows][2].  Behaviour may differ slighty on other platforms (which is why the JavaFX Javadoc on the matter is deliberately vague), but I think most of the principles are the same and it should work on OS X and Linux is a similar manner.&#xD;&#xA;&#xD;&#xA;From MSDN:&#xD;&#xA;&#xD;&#xA;> To allow you to create a relationship between a child window and a parent window, Window supports the notion of ownership. Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).&#xD;&#xA;>&#xD;&#xA;> Once this relationship is established, the following behaviors are exhibited:&#xD;&#xA;>&#xD;&#xA;> * If an owner window is minimized, all its owned windows are minimized as well.&#xD;&#xA;> * If an owned window is minimized, its owner is not minimized.&#xD;&#xA;> * If an owner window is maximized, both the owner window and its owned windows are restored.&#xD;&#xA;> * An owner window can never cover an owned window.&#xD;&#xA;> * Owned windows that were not opened using ShowDialog are not modal. The user can still interact with the owner window.&#xD;&#xA;> * If you close an owner window, its owned windows are also closed.&#xD;&#xA;> * If an owned window was opened by its owner window using Show, and the owner window is closed, the owned window's Closing event is not raised.&#xD;&#xA;>&#xD;&#xA;> When you open a child window by calling ShowDialog, you should also set the Owner property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;> Can that work with children such as `child = new Stage(UNDECORATED); child.initModality(Modality.NONE);`?&#xD;&#xA;&#xD;&#xA;Yes, it does.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/system.windows.window.owner%28v=vs.110%29.aspx";;deleted 71 characters in body
55114241;20960047;1155209;5;46097bd6-2aaf-48c5-8735-11245fee910a;2014-01-07 18:23:48.0;"**Solution**&#xD;&#xA;&#xD;&#xA;Use [stage.initOwner(parentStage)][1].&#xD;&#xA;&#xD;&#xA;**Sample App**&#xD;&#xA;&#xD;&#xA;Here is quick test application which initializes the owners of all of the created stages to the primary application stage.&#xD;&#xA;&#xD;&#xA;The test app seems to fulfill all of your requirements (tested on Windows 7, JavaFX 8b122).  &#xD;&#xA;&#xD;&#xA;    import javafx.application.Application;&#xD;&#xA;    import javafx.scene.*;&#xD;&#xA;    import javafx.scene.paint.Color;&#xD;&#xA;    import javafx.scene.shape.Rectangle;&#xD;&#xA;    import javafx.stage.Stage;&#xD;&#xA;    import javafx.stage.StageStyle;&#xD;&#xA;    &#xD;&#xA;    public class LotsaStages extends Application {&#xD;&#xA;        private static final Color[] STAGE_COLORS = { &#xD;&#xA;            Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW &#xD;&#xA;        };&#xD;&#xA;        private static final double  STAGE_OFFSET = 50;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void start(Stage primaryStage) throws Exception {&#xD;&#xA;            addContent(primaryStage, Color.LIGHTBLUE);&#xD;&#xA;            primaryStage.show();&#xD;&#xA;    &#xD;&#xA;            double offset = STAGE_OFFSET;&#xD;&#xA;            for (Color color: STAGE_COLORS) {&#xD;&#xA;                Stage child = new Stage();&#xD;&#xA;                child.initOwner(primaryStage);&#xD;&#xA;                child.initStyle(StageStyle.UTILITY);&#xD;&#xA;    &#xD;&#xA;                child.setX(primaryStage.getX() + offset);&#xD;&#xA;                child.setY(primaryStage.getY() + offset);&#xD;&#xA;    &#xD;&#xA;                addContent(child, color);&#xD;&#xA;    &#xD;&#xA;                child.show();&#xD;&#xA;    &#xD;&#xA;                offset += STAGE_OFFSET;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void addContent(Stage child, Color color) {&#xD;&#xA;            child.setScene(&#xD;&#xA;                new Scene(&#xD;&#xA;                    new Group(&#xD;&#xA;                        new Rectangle(150, 70, color)&#xD;&#xA;                    )&#xD;&#xA;                )&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) { launch(args); }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The test app is pretty simple and I didn't try to replicate your menu based issues, so I'm not sure if it will pass correctly for the menu based processing or other requirements you may have.&#xD;&#xA;&#xD;&#xA;**Additional Questions**&#xD;&#xA;&#xD;&#xA;> So basically initOwner ""links"" the children to the main stage? &#xD;&#xA; 	&#xD;&#xA;Yes, [MSDN explains how window ownage works on Windows][2].  Behaviour may differ slighty on other platforms (which is why the JavaFX Javadoc on the matter is deliberately vague), but I think most of the principles are the same and it should work on OS X and Linux is a similar manner.&#xD;&#xA;&#xD;&#xA;From MSDN:&#xD;&#xA;&#xD;&#xA;> To allow you to create a relationship between a child window and a parent window, Window supports the notion of ownership. Ownership is established when the Owner property of a window (the owned window) is set with a reference to another window (the owner window).&#xD;&#xA;>&#xD;&#xA;> Once this relationship is established, the following behaviors are exhibited:&#xD;&#xA;>&#xD;&#xA;> * If an owner window is minimized, all its owned windows are minimized as well.&#xD;&#xA;> * If an owned window is minimized, its owner is not minimized.&#xD;&#xA;> * If an owner window is maximized, both the owner window and its owned windows are restored.&#xD;&#xA;> * An owner window can never cover an owned window.&#xD;&#xA;> * Owned windows that were not opened using ShowDialog are not modal. The user can still interact with the owner window.&#xD;&#xA;> * If you close an owner window, its owned windows are also closed.&#xD;&#xA;> * If an owned window was opened by its owner window using Show, and the owner window is closed, the owned window's Closing event is not raised.&#xD;&#xA;>&#xD;&#xA;> When you open a child window by calling ShowDialog, you should also set the Owner property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;&#xD;&#xA;> Can that work with children such as `child = new Stage(UNDECORATED); child.initModality(Modality.NONE);`?&#xD;&#xA;&#xD;&#xA;Yes, it does.&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javafx/2/api/javafx/stage/Stage.html#initOwner%28javafx.stage.Window%29&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/system.windows.window.owner%28v=vs.110%29.aspx";;Fixed method name.

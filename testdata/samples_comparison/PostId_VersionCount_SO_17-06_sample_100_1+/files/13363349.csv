Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
31769882;13363349;1133011;2;61f0a7f9-fe02-4491-87ab-0c2f7a1c0184;2012-11-13 15:16:03.0;"- Use [`Keybindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- dont create your own `JFrame` for an `JApplet` simply call `getContentPane()` on applet instance and add all you components there.&#xD;&#xA;&#xD;&#xA;- All componnets should be created in `JApplet` overriden `init()` method wrapped in a `SwingUtilities#invokeAndWait(..)` block&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html";;
31770237;13363349;1133011;5;f826a90b-2bf7-43d8-974a-6bab8c84487f;2012-11-13 15:22:34.0;"- Use [`Keybindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- dont create your own `JFrame` for an `JApplet` simply call `getContentPane()` on applet instance and add all you components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html";;added 195 characters in body
31770918;13363349;1133011;5;d3c7cd5a-0037-48e7-b9bd-573586ad22c5;2012-11-13 15:35:25.0;"- Use [`Keybindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- dont create your own `JFrame` for an `JApplet` simply call `getContentPane()` on applet instance and add all you components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html";;added 27 characters in body
31771347;13363349;1057230;5;75c8d0d3-e945-4e08-9597-16c80de62e0f;2012-11-13 15:42:51.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html";;Corrected spellings
31771539;13363349;1133011;5;69f3dea9-cb53-4f46-a1ef-e683bcb4b8a7;2012-11-13 15:45:59.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;- Use `requestFocusInWindow()` instead of `requestFocus()`&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;Here is an example works for me:&#xD;&#xA;    &#xD;&#xA;![enter image description here][5]    &#xD;&#xA;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.lang.reflect.InvocationTargetException;&#xD;&#xA;    import java.util.logging.Level;&#xD;&#xA;    import java.util.logging.Logger;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class BinaryCalc extends JApplet {&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void init() {&#xD;&#xA;            try {&#xD;&#xA;                SwingUtilities.invokeAndWait(new Runnable() {&#xD;&#xA;                    @Override&#xD;&#xA;                    public void run() {&#xD;&#xA;    &#xD;&#xA;                        JPanel panel = new JPanel();&#xD;&#xA;                        setKeyBindings(panel);&#xD;&#xA;                        getContentPane().add(panel);&#xD;&#xA;                        panel.requestFocusInWindow();//request focus or keybindings wont work (only for applets)&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            } catch (InterruptedException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            } catch (InvocationTargetException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings(final JPanel panel) {&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0, 0), ""0"");&#xD;&#xA;            panel.getActionMap().put(""0"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    JOptionPane.showMessageDialog(null, ""0"");//testing only&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html&#xD;&#xA;  [5]: http://i.stack.imgur.com/bxXio.png";;added 1962 characters in body
31772025;13363349;1133011;5;75caef5e-65f6-4306-b83d-2a05db6e294c;2012-11-13 15:55:09.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;- Use `requestFocusInWindow()` instead of `requestFocus()`&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;Here is an example works for me:&#xD;&#xA;    &#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;    import java.awt.BorderLayout;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.lang.reflect.InvocationTargetException;&#xD;&#xA;    import java.util.logging.Level;&#xD;&#xA;    import java.util.logging.Logger;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class BinaryCalc extends JApplet {&#xD;&#xA;    &#xD;&#xA;        private JTextField jtf;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void init() {&#xD;&#xA;            try {&#xD;&#xA;                SwingUtilities.invokeAndWait(new Runnable() {&#xD;&#xA;                    @Override&#xD;&#xA;                    public void run() {&#xD;&#xA;    &#xD;&#xA;                        JPanel panel = new JPanel();&#xD;&#xA;                        setKeyBindings(panel);&#xD;&#xA;                        jtf = new JTextField(10);&#xD;&#xA;                        panel.add(jtf);&#xD;&#xA;                        getContentPane().add(panel, BorderLayout.CENTER);&#xD;&#xA;                        panel.requestFocusInWindow();&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            } catch (InterruptedException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            } catch (InvocationTargetException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings(final JPanel panel) {&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0, 0), ""0"");&#xD;&#xA;            panel.getActionMap().put(""0"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""0"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_1, 0), ""1"");&#xD;&#xA;            panel.getActionMap().put(""1"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""1"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html&#xD;&#xA;  [5]: http://i.stack.imgur.com/sMMVy.png";;added 531 characters in body
31772618;13363349;1133011;5;cac08e31-c628-45bf-a8c1-4189e05f549e;2012-11-13 16:05:51.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;- Use `requestFocusInWindow()` instead of `requestFocus()`&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;Here is an example works for me. It simply adds an un-editable `JTextField` to the `JPanel` and then adds `KeyBinding`s for `KeyEvent.VK_0` and `KeyEvent.VK_1` to the `JPanel`. If the user types either *0* or *1* it will be displayed in un-edtiable `JTextField`:&#xD;&#xA;    &#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;    import java.awt.BorderLayout;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.lang.reflect.InvocationTargetException;&#xD;&#xA;    import java.util.logging.Level;&#xD;&#xA;    import java.util.logging.Logger;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class BinaryCalc extends JApplet {&#xD;&#xA;    &#xD;&#xA;        private JTextField jtf;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void init() {&#xD;&#xA;            try {&#xD;&#xA;                SwingUtilities.invokeAndWait(new Runnable() {&#xD;&#xA;                    @Override&#xD;&#xA;                    public void run() {&#xD;&#xA;    &#xD;&#xA;                        JPanel panel = new JPanel();&#xD;&#xA;                        setKeyBindings(panel);&#xD;&#xA;                        jtf = new JTextField(10);&#xD;&#xA;                        //so we cant edited it without pressing a key&#xD;&#xA;                        jtf.setEditable(false);&#xD;&#xA;                        &#xD;&#xA;                        panel.add(jtf);&#xD;&#xA;                        getContentPane().add(panel, BorderLayout.CENTER);&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            } catch (InterruptedException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            } catch (InvocationTargetException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings(final JPanel panel) {&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0,0), ""0"");&#xD;&#xA;            panel.getActionMap().put(""0"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""0"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_1,0), ""1"");&#xD;&#xA;            panel.getActionMap().put(""1"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""1"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html&#xD;&#xA;  [5]: http://i.stack.imgur.com/c3pEq.png";;added 89 characters in body
31773068;13363349;1133011;5;2cd91b7d-23db-4899-ba04-66fdb569570d;2012-11-13 16:14:55.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;Here is an example works for me. It simply adds an un-editable `JTextField` to the `JPanel` and then adds `KeyBinding`s for `KeyEvent.VK_0` and `KeyEvent.VK_1` to the `JPanel`. If the user types either *0* or *1* it will be displayed in un-edtiable `JTextField`:&#xD;&#xA;    &#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;    import java.awt.BorderLayout;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.lang.reflect.InvocationTargetException;&#xD;&#xA;    import java.util.logging.Level;&#xD;&#xA;    import java.util.logging.Logger;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class BinaryCalc extends JApplet {&#xD;&#xA;    &#xD;&#xA;        private JTextField jtf;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void init() {&#xD;&#xA;            try {&#xD;&#xA;                SwingUtilities.invokeAndWait(new Runnable() {&#xD;&#xA;                    @Override&#xD;&#xA;                    public void run() {&#xD;&#xA;    &#xD;&#xA;                        JPanel panel = new JPanel();&#xD;&#xA;                        setKeyBindings(panel);&#xD;&#xA;                        jtf = new JTextField(10);&#xD;&#xA;                        //so we cant edited it without pressing a key&#xD;&#xA;                        jtf.setEditable(false);&#xD;&#xA;                        &#xD;&#xA;                        panel.add(jtf);&#xD;&#xA;                        getContentPane().add(panel, BorderLayout.CENTER);&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            } catch (InterruptedException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            } catch (InvocationTargetException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings(final JPanel panel) {&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0,0), ""0"");&#xD;&#xA;            panel.getActionMap().put(""0"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""0"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_1,0), ""1"");&#xD;&#xA;            panel.getActionMap().put(""1"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""1"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html&#xD;&#xA;  [5]: http://i.stack.imgur.com/c3pEq.png";;deleted 62 characters in body
31777695;13363349;1133011;5;0ec3f9b3-1eb5-4d7a-91dc-b57cc8452258;2012-11-13 17:52:11.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html";;deleted 2545 characters in body
31779139;13363349;1133011;8;0f181dfb-2d9a-4677-80c5-80645c964be9;2012-11-13 18:27:59.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;- Use `requestFocusInWindow()` instead of `requestFocus()`&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;Here is an example works for me. It simply adds an un-editable `JTextField` to the `JPanel` and then adds `KeyBinding`s for `KeyEvent.VK_0` and `KeyEvent.VK_1` to the `JPanel`. If the user types either *0* or *1* it will be displayed in un-edtiable `JTextField`:&#xD;&#xA;    &#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;    import java.awt.BorderLayout;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.lang.reflect.InvocationTargetException;&#xD;&#xA;    import java.util.logging.Level;&#xD;&#xA;    import java.util.logging.Logger;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class BinaryCalc extends JApplet {&#xD;&#xA;    &#xD;&#xA;        private JTextField jtf;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void init() {&#xD;&#xA;            try {&#xD;&#xA;                SwingUtilities.invokeAndWait(new Runnable() {&#xD;&#xA;                    @Override&#xD;&#xA;                    public void run() {&#xD;&#xA;    &#xD;&#xA;                        JPanel panel = new JPanel();&#xD;&#xA;                        setKeyBindings(panel);&#xD;&#xA;                        jtf = new JTextField(10);&#xD;&#xA;                        //so we cant edited it without pressing a key&#xD;&#xA;                        jtf.setEditable(false);&#xD;&#xA;                        &#xD;&#xA;                        panel.add(jtf);&#xD;&#xA;                        getContentPane().add(panel, BorderLayout.CENTER);&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            } catch (InterruptedException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            } catch (InvocationTargetException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings(final JPanel panel) {&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0,0), ""0"");&#xD;&#xA;            panel.getActionMap().put(""0"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""0"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_1,0), ""1"");&#xD;&#xA;            panel.getActionMap().put(""1"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""1"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html&#xD;&#xA;  [5]: http://i.stack.imgur.com/c3pEq.png";;Rollback to [cac08e31-c628-45bf-a8c1-4189e05f549e]
31779184;13363349;1133011;5;d433b37b-9770-44b1-b092-b642288d5da9;2012-11-13 18:29:03.0;"- Use [`KeyBindings`][1] and not `KeyListener`&#xD;&#xA;&#xD;&#xA;- Do not create your own `JFrame` for a `JApplet` simply call `getContentPane()` on applet instance and add all your components there.&#xD;&#xA;&#xD;&#xA;- All components should be created in `JApplet` overriden `init()` method wrapped in a [`SwingUtilities#invokeAndWait(..)`][2] block&#xD;&#xA;&#xD;&#xA;- `JApplet`s and `Applet`s do not have a `main(..)` method (besides testing purposes)&#xD;&#xA;&#xD;&#xA;- Use `requestFocusInWindow()` instead of `requestFocus()`&#xD;&#xA;&#xD;&#xA;I would highly suggest you read:&#xD;&#xA;&#xD;&#xA;- [How to Make Applets][3]&#xD;&#xA;- [JApplet tutorial][4]&#xD;&#xA;&#xD;&#xA;Here is an example works for me. It simply adds an un-editable `JTextField` to the `JPanel` and then adds `KeyBinding`s for `KeyEvent.VK_0` and `KeyEvent.VK_1` to the `JPanel`. If the user types either *0* or *1* it will be displayed in un-edtiable `JTextField`:&#xD;&#xA;    &#xD;&#xA;![enter image description here][5]&#xD;&#xA;&#xD;&#xA;    import java.awt.BorderLayout;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.lang.reflect.InvocationTargetException;&#xD;&#xA;    import java.util.logging.Level;&#xD;&#xA;    import java.util.logging.Logger;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class BinaryCalc extends JApplet {&#xD;&#xA;    &#xD;&#xA;        private JTextField jtf;&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void init() {&#xD;&#xA;            try {&#xD;&#xA;                SwingUtilities.invokeAndWait(new Runnable() {&#xD;&#xA;                    @Override&#xD;&#xA;                    public void run() {&#xD;&#xA;    &#xD;&#xA;                        JPanel panel = new JPanel();&#xD;&#xA;                        setKeyBindings(panel);&#xD;&#xA;                        jtf = new JTextField(10);&#xD;&#xA;                        //so we cant edited it without pressing a key&#xD;&#xA;                        jtf.setEditable(false);&#xD;&#xA;                        &#xD;&#xA;                        panel.add(jtf);&#xD;&#xA;                        getContentPane().add(panel, BorderLayout.CENTER);&#xD;&#xA;                        panel.requestFocusInWindow();//incase we lost focus&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            } catch (InterruptedException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            } catch (InvocationTargetException ex) {&#xD;&#xA;                Logger.getLogger(BinaryCalc.class.getName()).log(Level.SEVERE, null, ex);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings(final JPanel panel) {&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_0,0), ""0"");&#xD;&#xA;            panel.getActionMap().put(""0"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""0"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_1,0), ""1"");&#xD;&#xA;            panel.getActionMap().put(""1"", new AbstractAction() {&#xD;&#xA;                @Override&#xD;&#xA;                public void actionPerformed(ActionEvent ae) {&#xD;&#xA;                    String tmp = jtf.getText();&#xD;&#xA;                    jtf.setText(tmp + ""1"");&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html&#xD;&#xA;  [4]: http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-JApplet.html&#xD;&#xA;  [5]: http://i.stack.imgur.com/c3pEq.png";;added 77 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
1231650;673654;3043;2;97705b45-2caf-4e25-9ff0-a06574c64a6c;2009-03-23 14:46:30.0;"Given the volatile nature of file systems, under normal circumstances the best course of action is to not even try to check if a file or directory exist. Something could always happen between when you check and when you try to access it that renders the check moot.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are it's because you already know something could happen to the file in that short span.  And the nature of development environments make this less likely to happen during your testing.  So you have an instant bug that you can't reproduce. &#xD;&#xA;&#xD;&#xA;Therefore it's much better to just have a good exception handler here. Attempt to open the resource and put your development time into handling the exception when it fails.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But lately I've had some doubts.  If that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you expect your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application install a default user-config file to it's home directory, and the first time the user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  It expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;
1231651;673654;3043;5;a83b9b9e-ca94-49a7-8ded-c97c94935236;2009-03-23 14:53:17.0;"Given the volatile nature of file systems, under normal circumstances the best course of action is to not even try to check if a file or directory exist. Something could always happen between when you check and when you try to access it that renders the check moot.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are it's because you already know something could happen to the file in that short span.  And the nature of development environments make this less likely to happen during your testing.  So you have an instant bug that you can't reproduce. &#xD;&#xA;&#xD;&#xA;Therefore it's much better to just have a good exception handler here. Attempt to open the resource and put your development time into handling the exception when it fails.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But lately I've had some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you expect your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application install a default user-config file to it's home directory, and the first time the user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  It expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;added 22 characters in body
1231652;673654;3043;5;1139c7ed-5ccc-4ee2-aaee-18da7ba253f1;2009-03-23 15:27:53.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are it's because you already know something could happen to the file in that short span.  And the nature of development environments make this less likely to happen during your testing.  So you have an instant bug that you can't reproduce. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exist.  Instead, it's much better to just have a good exception handler here. Attempt to open the resource and put your development time into handling the exception when it fails.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But lately I've had some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you expect your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application install a default user-config file to it's home directory, and the first time the user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  It expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;added 368 characters in body
1231653;673654;3043;5;037bbf0d-15c2-40d5-a7c9-014dd147665f;2009-03-23 17:02:16.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are it's because you already worried that something could happen to the file that you don't control.  The nature of development environments make this event less likely to happen during your testing.  So you have an instant bug that you can't reproduce. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exist.  Instead, it's much better to just have a good exception handler here. Attempt to open the resource and put your development time into handling the exception when it fails.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But lately I've had some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you expect your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application installs a default user-config file to it's home directory, and the first time each user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  Is expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;added 14 characters in body
1231654;673654;3043;5;058367c0-274c-48a9-bb7c-2b91dfab23ec;2009-03-29 22:03:04.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are it's because you already worried or aware that something you don't control is likely to happen to the file.  The nature of development environments make this event less likely to happen during your testing and very difficult to reproduce.  So not only do you have an bug, but the bug won't show up while testing. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exist.  Instead, put your development time into handling exceptions from the file system.  You have to handle these exceptions anyway, so this is a much better use of your resources.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But lately I have some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you _expect_ your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application installs a default user-config file to it's home directory, and the first time each user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  Is expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;added 73 characters in body
1231655;673654;3043;5;fd001f12-7565-49b7-857a-d01c60d3c63f;2009-04-01 18:55:16.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are you're already worried or aware that something you don't control is likely to happen to the file.  The nature of development environments make this event less likely to happen during your testing and very difficult to reproduce.  So not only do you have a bug, but the bug won't show up while testing. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exists.  Instead, put your development time into handling exceptions from the file system.  You have to handle these exceptions anyway, so this is a much better use of your resources.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But I'm having some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you _expect_ your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application installs a default user-config file to it's home directory, and the first time each user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  Is expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;deleted 11 characters in body
1622895;673654;3043;5;c05145a2-3c40-4b98-8440-598d59da2633;2009-05-08 15:04:44.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are distinct: not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are you're already worried or aware that something you don't control is likely to happen to the file.  The nature of development environments make this event less likely to happen during your testing and very difficult to reproduce.  So not only do you have a bug, but the bug won't show up while testing. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exists.  Instead, put your development time into handling exceptions from the file system.  You have to handle these exceptions anyway, so this is a much better use of your resources.  I even have a well-voted [answer][1] to this effect in another question.&#xD;&#xA;&#xD;&#xA;But I'm having some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you _expect_ your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application installs a default user-config file to it's home directory, and the first time each user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  Is expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;added 10 characters in body
37155084;673654;3043;5;1281f1e3-053f-4865-911e-14afd39b197c;2013-03-08 21:57:47.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are distinct: not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are you're already worried or aware that something you don't control is likely to happen to the file.  The nature of development environments make this event less likely to happen during your testing and very difficult to reproduce.  So not only do you have a bug, but the bug won't show up while testing. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exists.  Instead, put your development time into handling exceptions from the file system. You have to handle these exceptions anyway, so this is a much better use of your resources. Even though exceptions are slow, checking the existence of a file requires an extra trip to disk, and disk access is _much_ slower. I even have a well-voted [answer][1] to this effect in another question. &#xD;&#xA;&#xD;&#xA;But I'm having some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you _expect_ your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application installs a default user-config file to it's home directory, and the first time each user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  Is expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;added 131 characters in body
146966950;673654;-1;5;4f528bb1-27b5-4dcc-8351-fcdd62a9828c;2017-05-23 12:06:41.0;"File systems are volatile.  This means that you can't trust the result of one operation to still be valid for the next one, even if it's the next line of code.  You can't just say `if (some file exists and I have permissions for it) open the file`, and you can't say `if (some file does not exist) create the file`.  There is always the possibility that the result of your `if` condition will _change_ in between the two parts of your code.  The operations are distinct: not atomic.&#xD;&#xA;&#xD;&#xA;To make matters worse, the nature of the problem means that if you're tempted to make this check, odds are you're already worried or aware that something you don't control is likely to happen to the file.  The nature of development environments make this event less likely to happen during your testing and very difficult to reproduce.  So not only do you have a bug, but the bug won't show up while testing. &#xD;&#xA;&#xD;&#xA;Therefore under normal circumstances the best course of action is to not even try to check if a file or directory exists.  Instead, put your development time into handling exceptions from the file system. You have to handle these exceptions anyway, so this is a much better use of your resources. Even though exceptions are slow, checking the existence of a file requires an extra trip to disk, and disk access is _much_ slower. I even have a well-voted [answer][1] to this effect in another question. &#xD;&#xA;&#xD;&#xA;But I'm having some doubts.  In .Net, for example, if that's really _always_ true, the `.Exists()` methods wouldn't be in the API in the first place.  Also consider scenarios where you _expect_ your program to need to the create file.  The first example that comes to mind is for a desktop application.  This application installs a default user-config file to it's home directory, and the first time each user starts the application it copies this file to that user's application data folder.  It expects the file not to exist on that first startup. &#xD;&#xA;&#xD;&#xA;So when is it acceptable to check in advance for the existence (or other attributes, like size and permissions) of a file?  Is expecting failure rather than success on the first attempt a good enough rule of thumb?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://stackoverflow.com/questions/265953/c-how-can-you-easily-check-if-access-is-denied-for-a-file/265958#265958";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

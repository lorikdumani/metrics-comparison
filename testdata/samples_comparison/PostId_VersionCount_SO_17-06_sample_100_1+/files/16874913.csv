Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
41525612;16874913;2443583;2;3748c509-0ac6-4a73-92f3-0609ee0295c0;2013-06-01 16:46:13.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.&#xD;&#xA;    &#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i=0; i<8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (state[0] + legalMoves[i][0] );&#xD;&#xA;            int y = (state[1] + legalMoves[i][1] );&#xD;&#xA;            if( (x>-1) and (x<9) and (y<9) and (y>-1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                int childState[2] = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;                cout<<""Child made it: ""<<children.back().print()<<endl; //works fine&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        cout<<""Children found: "";&#xD;&#xA;        for(int i=0;i<children.size();i++)&#xD;&#xA;        {&#xD;&#xA;            cout << children[i].print(); //All the same!&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }";;
41525823;16874913;1577580;5;12fb3376-3c76-499a-8ecc-9080ae066ee3;2013-06-01 16:54:54.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.&#xD;&#xA;    &#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i = 0; i < 8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x > -1) and (x < 9) and (y < 9) and (y > -1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                int childState[2] = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;                cout << ""Child made it: "" << children.back().print() << endl; //works fine&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        cout << ""Children found: "";&#xD;&#xA;        for(int i = 0; i < children.size(); i++)&#xD;&#xA;        {&#xD;&#xA;            cout << children[i].print(); //All the same!&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }";;formatting the code
41526890;16874913;2443583;5;988e9323-d7a2-4caa-ba3e-0e8e58b7f63f;2013-06-01 17:37:13.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.&#xD;&#xA;    &#xD;&#xA;    //Search class&#xD;&#xA;    class SearchNode&#xD;&#xA;    {&#xD;&#xA;    public:&#xD;&#xA;    SearchNode *parent;&#xD;&#xA;    int *state;&#xD;&#xA;&#xD;&#xA;    // Constructors&#xD;&#xA;    SearchNode()&#xD;&#xA;    {&#xD;&#xA;        //do nothing&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Normal Constructor&#xD;&#xA;    SearchNode(int *state,SearchNode* parent)&#xD;&#xA;    {&#xD;&#xA;        this->parent = parent;&#xD;&#xA;        this->state = state;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Start Node constructor. Still looking for an equivalent for null.&#xD;&#xA;    SearchNode(int *state)&#xD;&#xA;    {&#xD;&#xA;        int genericStartState[2] = {-1,-1};&#xD;&#xA;        SearchNode blankParent = SearchNode();&#xD;&#xA;        SearchNode genericStart = SearchNode(genericStartState,&blankParent);&#xD;&#xA;        this->parent = &genericStart;&#xD;&#xA;        this->state=state;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method to get Next reachable states. Returns instances of SearchNode.&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i = 0; i < 8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x > -1) and (x < 9) and (y < 9) and (y > -1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                int childState[2] = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;                cout << ""Child made it: "" << children.back().print() << endl; //works fine&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        cout << ""Children found: "";&#xD;&#xA;        for(int i = 0; i < children.size(); i++)&#xD;&#xA;        {&#xD;&#xA;            cout << children[i].print(); //All the same!&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }";;added 809 characters in body
41537708;16874913;2443583;5;a7678c04-24d5-42d4-8c56-9aa239e68f86;2013-06-02 02:29:45.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.&#xD;&#xA;    &#xD;&#xA;    //Search class&#xD;&#xA;    class SearchNode&#xD;&#xA;    {&#xD;&#xA;    public:&#xD;&#xA;    SearchNode *parent;&#xD;&#xA;    int *state;&#xD;&#xA;&#xD;&#xA;    // Constructors&#xD;&#xA;    SearchNode()&#xD;&#xA;    {&#xD;&#xA;        //do nothing&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Copy Constructor&#xD;&#xA;    SearchNode(const SearchNode& other)&#xD;&#xA;    {&#xD;&#xA;        state = new int[2];&#xD;&#xA;        state[0] = other.state[0];&#xD;&#xA;        state[1] = other.state[1];&#xD;&#xA;        SearchNode *parent = other.parent;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Normal Constructor&#xD;&#xA;    SearchNode(int *state,SearchNode* parent)&#xD;&#xA;    {&#xD;&#xA;        this->parent = parent;&#xD;&#xA;        this->state = state;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Start Node constructor. Still looking for an equivalent for null.&#xD;&#xA;    SearchNode(int *state)&#xD;&#xA;    {&#xD;&#xA;        int genericStartState[2] = {-1,-1};&#xD;&#xA;        SearchNode blankParent = SearchNode();&#xD;&#xA;        SearchNode genericStart = SearchNode(genericStartState,&blankParent);&#xD;&#xA;        this->parent = &genericStart;&#xD;&#xA;        this->state=state;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method to get Next reachable states. Returns instances of SearchNode.&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i = 0; i < 8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x > -1) and (x < 9) and (y < 9) and (y > -1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                int childState[2] = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;                cout << ""Child made it: "" << children.back().print() << endl; //works fine&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        cout << ""Children found: "";&#xD;&#xA;        for(int i = 0; i < children.size(); i++)&#xD;&#xA;        {&#xD;&#xA;            cout << children[i].print(); //All the same!&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }";;added 228 characters in body
41597884;16874913;2443583;5;df0db5d9-f684-4b1f-98c3-89058f7b97f3;2013-06-03 15:35:38.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;<strike>That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.</strike>&#xD;&#xA;&#xD;&#xA;**UPDATE**&#xD;&#xA;&#xD;&#xA;I got rid of the int*, and used array<int,2> for my state. Now, I can't reconstruct the path successfully.&#xD;&#xA;&#xD;&#xA;To test, I started at {0,0} and could find {4,4}, but the path, according to the getPath method was {4,4}, {3,6}, {3,6}, {3,6} ... and I watched it gracefully dive into an infinite loop :D. I then added that counter, to make sure my loop don't go too far. Is there something wrong with my parent pointers, or my getPath function? Thanks for all you support. :D&#xD;&#xA;    &#xD;&#xA;    //Search class&#xD;&#xA;    class SearchNode&#xD;&#xA;    {&#xD;&#xA;    public:&#xD;&#xA;    //Variables&#xD;&#xA;    SearchNode *m_parent;&#xD;&#xA;    array<int,2> m_state; //I don't understand typedef's yet, will use them when I'm clearer with them :)&#xD;&#xA;&#xD;&#xA;    //Normal Constructor&#xD;&#xA;    SearchNode(array<int,2>& state_, SearchNode *parent_=nullptr) :&#xD;&#xA;    m_state(state_),&#xD;&#xA;    m_parent(parent_)&#xD;&#xA;    {}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method to get Next reachable states. Returns instances of SearchNode.&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i=0; i<8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (m_state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (m_state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x>-1) and (x<9) and (y<9) and (y>-1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                array<int,2> childState = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    void getPath()&#xD;&#xA;    {&#xD;&#xA;        cout<<""\\nPath: "";&#xD;&#xA;        cout<<  this->print();&#xD;&#xA;        SearchNode current = *this;&#xD;&#xA;        unsigned int counter = 1;&#xD;&#xA;        while(current.m_parent and counter< 10)&#xD;&#xA;        {&#xD;&#xA;            counter++;&#xD;&#xA;            cout<< (current.m_parent)->print();&#xD;&#xA;            current = *(current.m_parent);&#xD;&#xA;        }&#xD;&#xA;        cout << (current.m_parent)->print();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string print()&#xD;&#xA;    {&#xD;&#xA;        stringstream out;&#xD;&#xA;        out << ""{"" << this->m_state[0] << "","" << this->m_state[1] << ""} "";&#xD;&#xA;        return out.str();&#xD;&#xA;    }&#xD;&#xA;    };";;added 226 characters in body
41601168;16874913;2443583;5;b0116d1d-3e7f-4fb2-8057-2b103596baa4;2013-06-03 16:44:31.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;<strike>That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.</strike>&#xD;&#xA;&#xD;&#xA;**UPDATE**&#xD;&#xA;&#xD;&#xA;I got rid of the int*, and used array<int,2> for my state. Now, I can't reconstruct the path successfully.&#xD;&#xA;&#xD;&#xA;To test, I started at {0,0} and could find {4,4}, but the path, according to the getPath method was {4,4}, {3,6}, {3,6}, {3,6} ... and I watched it gracefully dive into an infinite loop :D. I then added that counter, to make sure my loop don't go too far. Is there something wrong with my parent pointers, or my getPath function? Thanks for all you support. :D&#xD;&#xA;    &#xD;&#xA;    //Search class&#xD;&#xA;    class SearchNode&#xD;&#xA;    {&#xD;&#xA;    public:&#xD;&#xA;    //Variables&#xD;&#xA;    SearchNode *m_parent;&#xD;&#xA;    array<int,2> m_state; //I don't understand typedef's yet, will use them when I'm clearer with them :)&#xD;&#xA;&#xD;&#xA;    //Normal Constructor&#xD;&#xA;    SearchNode(array<int,2>& state_, SearchNode *parent_=nullptr) :&#xD;&#xA;    m_state(state_),&#xD;&#xA;    m_parent(parent_)&#xD;&#xA;    {}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method to get Next reachable states. Returns instances of SearchNode.&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i=0; i<8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (m_state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (m_state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x>-1) and (x<9) and (y<9) and (y>-1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                array<int,2> childState = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    void getPath()&#xD;&#xA;    {&#xD;&#xA;        cout<<""\\nPath: "";&#xD;&#xA;        cout<<  this->print();&#xD;&#xA;        SearchNode current = *this;&#xD;&#xA;        unsigned int counter = 1;&#xD;&#xA;        while((current.m_parent!=nullptr) and counter< 10)&#xD;&#xA;        {&#xD;&#xA;            counter++;&#xD;&#xA;            cout<< (current.m_parent)->print();&#xD;&#xA;            current = *(current.m_parent);&#xD;&#xA;        }&#xD;&#xA;        cout << (current.m_parent)->print();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string print()&#xD;&#xA;    {&#xD;&#xA;        stringstream out;&#xD;&#xA;        out << ""{"" << this->m_state[0] << "","" << this->m_state[1] << ""} "";&#xD;&#xA;        return out.str();&#xD;&#xA;    }&#xD;&#xA;    };";;added 11 characters in body
41601878;16874913;2443583;5;9308337f-a3e6-420e-b5bb-44ccb2c3ffc2;2013-06-03 17:00:35.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;<strike>That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to http://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.</strike>&#xD;&#xA;&#xD;&#xA;**UPDATE**&#xD;&#xA;&#xD;&#xA;I got rid of the int*, and used array<int,2> for my state. I could now successfully search the graph (therefore the states are ok) and find the shortest path, but I couldn't seem to reconstruct the path.&#xD;&#xA;&#xD;&#xA;To test, I started at {0,0} and could find {4,4}, but the path, according to the getPath method was {4,4}, {3,6}, {3,6}, {3,6} ... (infinite loop of {3,6}). Is there something wrong with my parent pointers, or my getPath function? Thanks for your support in advance.&#xD;&#xA;    &#xD;&#xA;    //Search class&#xD;&#xA;    class SearchNode&#xD;&#xA;    {&#xD;&#xA;    public:&#xD;&#xA;    //Variables&#xD;&#xA;    SearchNode *m_parent;&#xD;&#xA;    array<int,2> m_state; //I don't understand typedef's yet, will use them when I'm clearer with them :)&#xD;&#xA;&#xD;&#xA;    //Normal Constructor&#xD;&#xA;    SearchNode(array<int,2>& state_, SearchNode *parent_=nullptr) :&#xD;&#xA;    m_state(state_),&#xD;&#xA;    m_parent(parent_)&#xD;&#xA;    {}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method to get Next reachable states. Returns instances of SearchNode.&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i=0; i<8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (m_state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (m_state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x>-1) and (x<9) and (y<9) and (y>-1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                array<int,2> childState = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    void getPath()&#xD;&#xA;    {&#xD;&#xA;        cout<<""\\nPath: "";&#xD;&#xA;        cout<<  this->print();&#xD;&#xA;        SearchNode current = *this;&#xD;&#xA;        unsigned int counter = 1;&#xD;&#xA;        while((current.m_parent!=nullptr) and counter< 10)&#xD;&#xA;        {&#xD;&#xA;            counter++;&#xD;&#xA;            cout<< (current.m_parent)->print();&#xD;&#xA;            current = *(current.m_parent);&#xD;&#xA;        }&#xD;&#xA;        cout << (current.m_parent)->print();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string print()&#xD;&#xA;    {&#xD;&#xA;        stringstream out;&#xD;&#xA;        out << ""{"" << this->m_state[0] << "","" << this->m_state[1] << ""} "";&#xD;&#xA;        return out.str();&#xD;&#xA;    }&#xD;&#xA;    };";;deleted 27 characters in body
146932299;16874913;-1;5;81931bec-6843-455e-b1a3-2cc24f0aa9d2;2017-05-23 12:05:25.0;"I'm a complete beginner in c++ and everything has been going on well until now. I'm new to the idea of pointers (I'm from python), and I have this weird error. &#xD;&#xA;&#xD;&#xA;So basically, I created this ""SearchNode"" class, and found below is one of it's methods ""getChildren"" which should return a vector of other SearchNode instances, representing the possible cells to which a Knight (chessboard) could travel from it's current state. (BFS)&#xD;&#xA;&#xD;&#xA;<strike>That said, when I finish pushing into my vector, all the elements suddenly point to 1st element only. Could someone help me out here?&#xD;&#xA;&#xD;&#xA;PS: it's a similar problem to https://stackoverflow.com/questions/3027857/c-push-back-doesnt-work-as-it-is-supposed ... but unlike Angela (who's was writing her own compiler), I'm a total beginner in c++. Your help with be greatly appreciated.</strike>&#xD;&#xA;&#xD;&#xA;**UPDATE**&#xD;&#xA;&#xD;&#xA;I got rid of the int*, and used array<int,2> for my state. I could now successfully search the graph (therefore the states are ok) and find the shortest path, but I couldn't seem to reconstruct the path.&#xD;&#xA;&#xD;&#xA;To test, I started at {0,0} and could find {4,4}, but the path, according to the getPath method was {4,4}, {3,6}, {3,6}, {3,6} ... (infinite loop of {3,6}). Is there something wrong with my parent pointers, or my getPath function? Thanks for your support in advance.&#xD;&#xA;    &#xD;&#xA;    //Search class&#xD;&#xA;    class SearchNode&#xD;&#xA;    {&#xD;&#xA;    public:&#xD;&#xA;    //Variables&#xD;&#xA;    SearchNode *m_parent;&#xD;&#xA;    array<int,2> m_state; //I don't understand typedef's yet, will use them when I'm clearer with them :)&#xD;&#xA;&#xD;&#xA;    //Normal Constructor&#xD;&#xA;    SearchNode(array<int,2>& state_, SearchNode *parent_=nullptr) :&#xD;&#xA;    m_state(state_),&#xD;&#xA;    m_parent(parent_)&#xD;&#xA;    {}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method to get Next reachable states. Returns instances of SearchNode.&#xD;&#xA;    vector<SearchNode> getChildren()&#xD;&#xA;    {&#xD;&#xA;        int legalMoves[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};&#xD;&#xA;&#xD;&#xA;        vector<SearchNode> children;&#xD;&#xA;        children.reserve(8);&#xD;&#xA;        for(int i=0; i<8; i++)&#xD;&#xA;        {&#xD;&#xA;            int x = (m_state[0] + legalMoves[i][0]);&#xD;&#xA;            int y = (m_state[1] + legalMoves[i][1]);&#xD;&#xA;            if( (x>-1) and (x<9) and (y<9) and (y>-1)) // Within the bounds of the board&#xD;&#xA;            {&#xD;&#xA;                array<int,2> childState = {x,y};&#xD;&#xA;                SearchNode childNode = SearchNode(childState,this);&#xD;&#xA;                children.push_back(childNode);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return children;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    void getPath()&#xD;&#xA;    {&#xD;&#xA;        cout<<""\\nPath: "";&#xD;&#xA;        cout<<  this->print();&#xD;&#xA;        SearchNode current = *this;&#xD;&#xA;        unsigned int counter = 1;&#xD;&#xA;        while((current.m_parent!=nullptr) and counter< 10)&#xD;&#xA;        {&#xD;&#xA;            counter++;&#xD;&#xA;            cout<< (current.m_parent)->print();&#xD;&#xA;            current = *(current.m_parent);&#xD;&#xA;        }&#xD;&#xA;        cout << (current.m_parent)->print();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    string print()&#xD;&#xA;    {&#xD;&#xA;        stringstream out;&#xD;&#xA;        out << ""{"" << this->m_state[0] << "","" << this->m_state[1] << ""} "";&#xD;&#xA;        return out.str();&#xD;&#xA;    }&#xD;&#xA;    };";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

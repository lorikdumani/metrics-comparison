Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
37185523;15313200;1673391;2;4bb80cfe-99c6-4521-a7b3-96111df18122;2013-03-09 16:40:12.0;"> Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: &#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;&#xD;&#xA;    function b() {&#xD;&#xA;        a = 10;&#xD;&#xA;        var a = 20;&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a); &#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference: [*JavaScript Variable Scope:*][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm";;
37185869;15313200;1673391;5;57af8809-410a-4a1b-be11-336123798d0b;2013-03-09 16:53:20.0;"> Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: (*read comment*)&#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;&#xD;&#xA;    function b() {&#xD;&#xA;        a = 10; //undefined&#xD;&#xA;        var a = 20;&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a); &#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference:  &#xD;&#xA;(1) [*JavaScript Variable Scope:*][1]  &#xD;&#xA;(2)            [*A Dangerous Example of Javascript Hoisting*][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm&#xD;&#xA;  [2]: http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/";;added 28 characters in body
37186120;15313200;1673391;5;a26f6284-11ae-4919-8181-b14b79104fc6;2013-03-09 17:01:53.0;">(1) JavaScript does not have block statement scope; rather, it will be local to the code that the block resides within.     &#xD;&#xA;&#xD;&#xA;>(2) Javascript's declaration of variables in a function scope, meaning that variables declared in a function are available anywhere in that function, even before they are assigned a value.&#xD;&#xA; &#xD;&#xA;>(3) Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: (*read comment*)&#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;&#xD;&#xA;    function b() {&#xD;&#xA;        a = 10; //undefined&#xD;&#xA;        var a = 20;&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a); &#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference:  &#xD;&#xA;(1) [*JavaScript Variable Scope:*][1]  &#xD;&#xA;(2)            [*A Dangerous Example of Javascript Hoisting*][2]  &#xD;&#xA;(3) [*Variable scope*][3]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm&#xD;&#xA;  [2]: http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#Variable_Scope";;added 28 characters in body
37186618;15313200;1673391;5;83f077e7-e150-4fb6-ba2f-41e0b568c0e7;2013-03-09 17:20:25.0;">(1) JavaScript does not have block statement scope; rather, it will be local to the code that the block resides within.     &#xD;&#xA;&#xD;&#xA;>(2) Javascript's declaration of variables in a function scope, meaning that ***variables declared in a function are available anywhere in that function, even before they are assigned a value***.&#xD;&#xA; &#xD;&#xA;>(3) Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: (*read comment*)&#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;              //global a &#xD;&#xA;    function b() {&#xD;&#xA;        a = 10; //undefined   local a&#xD;&#xA;        var a = 20;         //local a&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a);              //global a &#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference:  &#xD;&#xA;(1) [*JavaScript Variable Scope:*][1]  &#xD;&#xA;(2)            [*A Dangerous Example of Javascript Hoisting*][2]  &#xD;&#xA;(3) [*Variable scope*][3]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm&#xD;&#xA;  [2]: http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#Variable_Scope";;added 83 characters in body
37188369;15313200;1673391;5;169153ac-bc2f-4393-ab07-a50a506df8b6;2013-03-09 18:19:40.0;">(1) JavaScript does not have block statement scope; rather, it will be local to the code that the block resides within.     &#xD;&#xA;&#xD;&#xA;>(2) Javascript's declaration of variables in a function scope, meaning that ***variables declared in a function are available anywhere in that function, even before they are assigned a value***.&#xD;&#xA; &#xD;&#xA;>(3) Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: (*read comment*)&#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;          //global a = 1&#xD;&#xA;    function b() {&#xD;&#xA;        a = 10;         //local a Undefined&#xD;&#xA;        var a = 20;     //local a = 20&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a);           //global a  = 1&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference:  &#xD;&#xA;(1) [*JavaScript Variable Scope:*][1]  &#xD;&#xA;(2)            [*A Dangerous Example of Javascript Hoisting*][2]  &#xD;&#xA;(3) [*Variable scope*][3]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm&#xD;&#xA;  [2]: http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#Variable_Scope";;added 7 characters in body
37192303;15313200;1673391;5;fc829b10-31c9-4346-aedc-6e4baf043bd5;2013-03-09 20:35:56.0;">(1) JavaScript does not have block statement scope; rather, it will be local to the code that the block resides within.     &#xD;&#xA;&#xD;&#xA;>(2) Javascript's declaration of variables in a function scope, meaning that ***variables declared in a function are available anywhere in that function, even before they are assigned a value***.&#xD;&#xA; &#xD;&#xA;>(3) Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: (*read comment*)&#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;          //global a = 1&#xD;&#xA;    function b() {&#xD;&#xA;        a = 10;         //local a Undefined&#xD;&#xA;        var a = 20;     //local a = 20&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a);           //global a  = 1&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference:  &#xD;&#xA;(1) [*JavaScript Variable Scope:*][1]  &#xD;&#xA;(2)            [*A Dangerous Example of Javascript Hoisting*][2]  &#xD;&#xA;(3) [*Variable scope*][3]&#xD;&#xA;&#xD;&#xA;So in your code: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    var a = 1;          //global a = 1  &#xD;&#xA;    function b() {&#xD;&#xA;        a = 10;         //local a Undefined&#xD;&#xA;        return;&#xD;&#xA;        function a() {} //local &#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a);           //global a = 1  &#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm&#xD;&#xA;  [2]: http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#Variable_Scope";;added 240 characters in body
37524997;15313200;1673391;5;d461e106-9119-4e89-9c9d-9174895cfae9;2013-03-15 15:21:31.0;">(1) JavaScript does not have block statement scope; rather, it will be local to the code that the block resides within.     &#xD;&#xA;&#xD;&#xA;>(2) Javascript's declaration of variables in a function scope, meaning that ***variables declared in a function are available anywhere in that function, even before they are assigned a value***.&#xD;&#xA; &#xD;&#xA;>(3) Within the body of a function, a local variable takes precedence over a global variable with the same name. **If you declare a local variable or function parameter with the same name as a global variable, you *effectively hide the global variable***.&#xD;&#xA;&#xD;&#xA;you code is same as: (*read comment*)&#xD;&#xA;&#xD;&#xA;    <script>&#xD;&#xA;    var a = 1;          //global a = 1&#xD;&#xA;    function b() {&#xD;&#xA;        a = 10;         &#xD;&#xA;        var a = 20;     //local a = 20&#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a);           //global a  = 1&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;reference:  &#xD;&#xA;(1) [*JavaScript Variable Scope:*][1]  &#xD;&#xA;(2)            [*A Dangerous Example of Javascript Hoisting*][2]  &#xD;&#xA;(3) [*Variable scope*][3]&#xD;&#xA;&#xD;&#xA;So in your code: &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    var a = 1;          //global a = 1  &#xD;&#xA;    function b() {&#xD;&#xA;        a = 10;         &#xD;&#xA;        return;&#xD;&#xA;        function a() {} //local &#xD;&#xA;    }&#xD;&#xA;    b();&#xD;&#xA;    alert(a);           //global a = 1  &#xD;&#xA;&#xD;&#xA;  [1]: http://docstore.mik.ua/orelly/webprog/jscript/ch04_03.htm&#xD;&#xA;  [2]: http://thecomputersarewinning.com/post/a-dangerous-example-of-javascript-hoisting/&#xD;&#xA;  [3]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Values,_variables,_and_literals#Variable_Scope";;deleted 38 characters in body

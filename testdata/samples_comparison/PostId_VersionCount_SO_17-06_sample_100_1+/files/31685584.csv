Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
96144927;31685584;1346207;2;c5bf7d5f-eac2-42f3-a16c-c6722caa2e4e;2015-07-28 19:37:57.0;"Consider this code fragment:&#xD;&#xA;&#xD;&#xA;    } catch (\\Exception $e1) {&#xD;&#xA;        try {&#xD;&#xA;            $pdo->rollback();&#xD;&#xA;            throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;        } catch (\\PDOException $e2) {&#xD;&#xA;            throw new \\DomainException(""Failed even more"", 0, $e1); // $e2 is lost!&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (catch PDOException). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed. So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.";;
96145892;31685584;1346207;5;7b1ab8aa-59e4-49dd-83a4-708e83c1ade2;2015-07-28 19:52:47.0;"Consider this code fragment:&#xD;&#xA;&#xD;&#xA;    } catch (\\Exception $e1) {&#xD;&#xA;        try {&#xD;&#xA;            $pdo->rollback();&#xD;&#xA;            throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;        } catch (\\PDOException $e2) {&#xD;&#xA;            throw new \\DomainException(""Failed even more"", 0, $e1); // $e2 is lost!&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (the inner `catch (PDOException $e2)`). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed ($e2 in this case). So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.";;added 37 characters in body
96146620;31685584;1346207;5;be6f50c6-b368-4023-bad1-541eed0ae014;2015-07-28 20:03:34.0;"Consider this code fragment:&#xD;&#xA;&#xD;&#xA;    /**&#xD;&#xA;     * @throws \\DomainException&#xD;&#xA;     */&#xD;&#xA;    public function doFoo()&#xD;&#xA;    {&#xD;&#xA;        try {&#xD;&#xA;            // Do a unit of work with in a transaction.&#xD;&#xA;&#xD;&#xA;        } catch (\\Exception $e1) {&#xD;&#xA;            try {&#xD;&#xA;                $this->pdo->rollback();&#xD;&#xA;                throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;            } catch (\\PDOException $e2) {&#xD;&#xA;                // $e2 is lost!&#xD;&#xA;                throw new \\DomainException(""Failed even more"", 0, $e1);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (the inner `catch (PDOException $e2)`). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed ($e2 in this case). So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.";;added 223 characters in body
96147506;31685584;1346207;5;ec940555-a99a-4123-8914-d8a4b822a21e;2015-07-28 20:18:42.0;"Consider this exemplary code fragment:&#xD;&#xA;&#xD;&#xA;    /**&#xD;&#xA;     * @throws \\DomainException&#xD;&#xA;     */&#xD;&#xA;    public function doFoo()&#xD;&#xA;    {&#xD;&#xA;        try {&#xD;&#xA;            // Do a unit of work with in a transaction.&#xD;&#xA;&#xD;&#xA;        } catch (\\Exception $e1) {&#xD;&#xA;            try {&#xD;&#xA;                $this->pdo->rollback();&#xD;&#xA;                throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;            } catch (\\PDOException $e2) {&#xD;&#xA;                // $e2 is lost!&#xD;&#xA;                throw new \\DomainException(""Failed even more"", 0, $e1);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (the inner `catch (PDOException $e2)`). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed ($e2 in this case). So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.&#xD;&#xA;&#xD;&#xA;Edit: PDO is just an exemplary use case. I could be any other API as well where I might be interested in the stack trace of both exceptions.";;added 154 characters in body
96147599;31685584;171318;5;20d1ae18-1cc5-4395-98d5-1be8789f32b4;2015-07-28 20:20:21.0;"Consider this exemplary code fragment:&#xD;&#xA;&#xD;&#xA;    /**&#xD;&#xA;     * @throws \\DomainException&#xD;&#xA;     */&#xD;&#xA;    public function doFoo()&#xD;&#xA;    {&#xD;&#xA;        try {&#xD;&#xA;            // Do a unit of work with in a transaction.&#xD;&#xA;&#xD;&#xA;        } catch (\\DomainException $e1) {&#xD;&#xA;            try {&#xD;&#xA;                $this->pdo->rollback();&#xD;&#xA;                throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;            } catch (\\PDOException $e2) {&#xD;&#xA;                // $e2 is lost!&#xD;&#xA;                throw new \\DomainException(""Failed even more"", 0, $e1);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (the inner `catch (PDOException $e2)`). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed ($e2 in this case). So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.&#xD;&#xA;&#xD;&#xA;Edit: PDO is just an exemplary use case. I could be any other API as well where I might be interested in the stack trace of both exceptions.";;added 6 characters in body
96148057;31685584;1346207;5;236a3ade-22ec-481c-9471-17866418adfa;2015-07-28 20:27:38.0;"Consider this exemplary code fragment:&#xD;&#xA;&#xD;&#xA;    /**&#xD;&#xA;     * @throws \\DomainException&#xD;&#xA;     */&#xD;&#xA;    public function doFoo()&#xD;&#xA;    {&#xD;&#xA;        try {&#xD;&#xA;            // Do a unit of work with in a transaction.&#xD;&#xA;            // This code could throw a SomeOtherException.&#xD;&#xA;            // In this case the transaction should be rolled back&#xD;&#xA;            // and a \\DomainException should be thrown.&#xD;&#xA;&#xD;&#xA;        } catch (SomeOtherException $e1) {&#xD;&#xA;            try {&#xD;&#xA;                $this->pdo->rollback();&#xD;&#xA;                throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;            } catch (\\PDOException $e2) {&#xD;&#xA;                // $e2 is lost!&#xD;&#xA;                throw new \\DomainException(""Failed even more"", 0, $e1);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The immutable contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (the inner `catch (PDOException $e2)`). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed ($e2 in this case). So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.&#xD;&#xA;&#xD;&#xA;Edit: PDO is just an exemplary use case. I could be any other API as well where I might be interested in the stack trace of both exceptions.&#xD;&#xA;&#xD;&#xA;Edit2: Consider this as an implementation of an interface which can't be changed.";;added 281 characters in body
96149399;31685584;1346207;5;24549f89-526a-4b70-9848-1892c291204c;2015-07-28 20:49:40.0;"Consider this exemplary code fragment:&#xD;&#xA;&#xD;&#xA;    /**&#xD;&#xA;     * @throws \\DomainException&#xD;&#xA;     */&#xD;&#xA;    public function doFoo()&#xD;&#xA;    {&#xD;&#xA;        try {&#xD;&#xA;            // Do a unit of work with in a transaction.&#xD;&#xA;            // This code could throw a SomeOtherException.&#xD;&#xA;            // In this case the transaction should be rolled back&#xD;&#xA;            // and a \\DomainException should be thrown.&#xD;&#xA;&#xD;&#xA;        } catch (SomeOtherException $e1) {&#xD;&#xA;            try {&#xD;&#xA;                $this->pdo->rollback();&#xD;&#xA;                throw new \\DomainException(""Failed"", 0, $e1);&#xD;&#xA;&#xD;&#xA;            } catch (\\PDOException $e2) {&#xD;&#xA;                // $e2 is lost!&#xD;&#xA;                throw new \\DomainException(""Failed even more"", 0, $e1);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The immutable contract allows only to throw a `DomainException`.&#xD;&#xA;I'm interested in the second catch block (the inner `catch (PDOException $e2)`). I could either use $e1 or $e2 as the previous exception, but not both.&#xD;&#xA;&#xD;&#xA;I don't like that one exception got swallowed ($e2 in this case). So how could I throw the complete error informations, i.e. a \\DomainException which includes $e1 and $e2? I was thinking about adding $e1 to the root of $e2 and using $e2 as previous, but PHP's `Exception` is immutable.&#xD;&#xA;&#xD;&#xA;Edit: PDO is just an exemplary use case. I could be any other API as well where I might be interested in the stack trace of both exceptions.&#xD;&#xA;&#xD;&#xA;Edit2: Consider this as an implementation of an interface which can't be changed.&#xD;&#xA;&#xD;&#xA;Edit3: Java's [`Throwable.addSupressed()`](http://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#addSuppressed-java.lang.Throwable-) would fit here perfectly. This might help to understand the use case.";;"added 218 characters in body; edited title"

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
44380285;17892392;1393766;2;162e9c03-6344-4b37-b514-966833815212;2013-07-26 23:04:42.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA; - `\\\\G` means last match, or in case of first usage start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) &#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data=""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array=data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),"");&#xD;&#xA;	for(String s:array)&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6";;
44380618;17892392;1393766;5;4793f9da-bed0-490e-a34b-10ae6ac938f4;2013-07-26 23:19:05.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA; - `\\\\d` means digit, same as [0-9]&#xD;&#xA; - `\\\\d+` means one or more digits&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it&#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with comas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)`&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),"");&#xD;&#xA;	for(String s : array)&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6";;added 582 characters in body
44380804;17892392;1393766;5;dbbb852f-21b4-46ca-bbfe-6a7fdaddbf8d;2013-07-26 23:26:30.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),"");&#xD;&#xA;	for(String s : array)&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6";;added 582 characters in body
44380962;17892392;1393766;5;30388f20-90ff-40fd-8de5-d687f4eb9763;2013-07-26 23:32:47.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :)&#xD;&#xA;	for(String s : array)&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.";;added 582 characters in body
44381278;17892392;1393766;5;7f6cbedc-fe53-4de1-b9dd-65554f60d804;2013-07-26 23:50:50.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :)&#xD;&#xA;	for(String s : array)&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Also in case you want to use other characters then digits you can also use other set of characters like&#xD;&#xA;&#xD;&#xA; - `\\\\w` which will match alphabetic characters, digits and `_`&#xD;&#xA; - `\\\\S` everything that is not white space&#xD;&#xA; - `[^,]` everything that is not comma&#xD;&#xA; - ... and so on. More info in [Pattern documentation](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)";;added 391 characters in body
44381452;17892392;1393766;5;f090a935-2d7a-45d0-8d31-a849b636be10;2013-07-26 23:57:54.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :)&#xD;&#xA;	for(String s : array){&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Also in case you want to use other characters then digits you can also use other set of characters like&#xD;&#xA;&#xD;&#xA; - `\\\\w` which will match alphabetic characters, digits and `_`&#xD;&#xA; - `\\\\S` everything that is not white space&#xD;&#xA; - `[^,]` everything that is not comma&#xD;&#xA; - ... and so on. More info in [Pattern documentation](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)";;added 1 characters in body
44382238;17892392;1393766;5;0633b09e-5cef-485c-9ffa-25b212ded326;2013-07-27 00:36:31.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :) &#xD;&#xA;	// to reveal magic see explanation below answer&#xD;&#xA;	for(String s : array){&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Also in case you want to use other characters then digits you can also use other set of characters like&#xD;&#xA;&#xD;&#xA; - `\\\\w` which will match alphabetic characters, digits and `_`&#xD;&#xA; - `\\\\S` everything that is not white space&#xD;&#xA; - `[^,]` everything that is not comma&#xD;&#xA; - ... and so on. More info in [Pattern documentation](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)";;added 51 characters in body
44392124;17892392;1393766;5;df0c3281-0762-4e07-ac97-6b1ccf373e7c;2013-07-27 09:53:04.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :) &#xD;&#xA;	// to reveal magic see explanation below answer&#xD;&#xA;	for(String s : array){&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Also in case you want to use other characters then digits you can also use other set of characters like&#xD;&#xA;&#xD;&#xA; - `\\\\w` which will match alphabetic characters, digits and `_`&#xD;&#xA; - `\\\\S` everything that is not white space&#xD;&#xA; - `[^,]` everything that is not comma&#xD;&#xA; - ... and so on. More info in [Pattern documentation](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;By the way, this form will work with split on every 3rd, 5th, 7th, (and other odd numbers) comma, like `split(""(?<=\\\\G\\\\w+,\\\\w+,\\\\w+,\\\\w+,\\\\w+),"")` will split on every 5th comma. &#xD;&#xA;&#xD;&#xA;To split on every 2nd, 4th, 6th, 8th (and rest of even numbers) comma you will need to replace `+` with `{1,maxLengthOfNumber}` like `split(""(?<=\\\\G\\\\w{1,3},\\\\w{1,3},\\\\w{1,3},\\\\w{1,3}),"")` to split on every 4th comma when numbers can have max 3 digits (0, 00, 12, 000, 123, 412, 999).&#xD;&#xA;&#xD;&#xA;To split on every 2nd comma you can use also this regex `split(""(?<!\\\\G\\\\d+),"")` based on my [previous answer](http://stackoverflow.com/a/16486373/1393766)";;added 635 characters in body
44392289;17892392;1393766;5;1acf74c3-229e-4d78-906c-a75a018e720d;2013-07-27 10:01:47.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :) &#xD;&#xA;	// to reveal magic see explanation below answer&#xD;&#xA;	for(String s : array){&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Also in case you want to use other characters then digits you can also use other set of characters like&#xD;&#xA;&#xD;&#xA; - `\\\\w` which will match alphabetic characters, digits and `_`&#xD;&#xA; - `\\\\S` everything that is not white space&#xD;&#xA; - `[^,]` everything that is not comma&#xD;&#xA; - ... and so on. More info in [Pattern documentation](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;By the way, this form will work with split on every 3rd, 5th, 7th, (and other odd numbers) comma, like `split(""(?<=\\\\G\\\\w+,\\\\w+,\\\\w+,\\\\w+,\\\\w+),"")` will split on every 5th comma. &#xD;&#xA;&#xD;&#xA;To split on every 2nd, 4th, 6th, 8th (and rest of even numbers) comma you will need to replace `+` with `{1,maxLengthOfNumber}` like `split(""(?<=\\\\G\\\\w{1,3},\\\\w{1,3},\\\\w{1,3},\\\\w{1,3}),"")` to split on every 4th comma when numbers can have max 3 digits (0, 00, 12, 000, 123, 412, 999).&#xD;&#xA;&#xD;&#xA;To split on every 2nd comma you can also use this regex `split(""(?<!\\\\G\\\\d+),"")` based on my [previous answer](http://stackoverflow.com/a/16486373/1393766)";;edited body
146648769;17892392;-1;5;b19dd167-6444-4973-8a5f-d68525a72022;2017-05-23 11:54:57.0;"You can try to use `split` method with `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` regex&#xD;&#xA;&#xD;&#xA;Demo&#xD;&#xA;&#xD;&#xA;	String data = ""0,0,1,2,4,5,3,4,6"";&#xD;&#xA;	String[] array = data.split(""(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),""); //Magic :) &#xD;&#xA;	// to reveal magic see explanation below answer&#xD;&#xA;	for(String s : array){&#xD;&#xA;		System.out.println(s);&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;output:&#xD;&#xA;&#xD;&#xA;    0,0,1&#xD;&#xA;    2,4,5&#xD;&#xA;    3,4,6&#xD;&#xA;&#xD;&#xA;Explanation&#xD;&#xA;&#xD;&#xA; - `\\\\d` means one digit, same as [0-9], like `0` or `3`&#xD;&#xA; - `\\\\d+` means one or more digits like `1` or `23`&#xD;&#xA; - `\\\\d+,` means one or more digits with comma after it, like `1,` or `234,` &#xD;&#xA; - `\\\\d+,\\\\d+,\\\\d+` will accept three numbers with commas between them like `12,3,456`&#xD;&#xA; - `\\\\G` means last match, or if there is none (in case of first usage) start of the string&#xD;&#xA; - `(?<=...),` is [positive look-behind](http://www.regular-expressions.info/lookaround.html#lookbehind) which will match comma `,` that has also some string described in `(?<=...)` before it&#xD;&#xA; - `(?<=\\\\G\\\\d+,\\\\d+,\\\\d+),` so will try to find comma that has three numbers before it, and these numbers have aether start of the string before it (like `^0,0,1` in your example) or previously matched comma, like `2,4,5` and `3,4,6`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Also in case you want to use other characters then digits you can also use other set of characters like&#xD;&#xA;&#xD;&#xA; - `\\\\w` which will match alphabetic characters, digits and `_`&#xD;&#xA; - `\\\\S` everything that is not white space&#xD;&#xA; - `[^,]` everything that is not comma&#xD;&#xA; - ... and so on. More info in [Pattern documentation](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;By the way, this form will work with split on every 3rd, 5th, 7th, (and other odd numbers) comma, like `split(""(?<=\\\\G\\\\w+,\\\\w+,\\\\w+,\\\\w+,\\\\w+),"")` will split on every 5th comma. &#xD;&#xA;&#xD;&#xA;To split on every 2nd, 4th, 6th, 8th (and rest of even numbers) comma you will need to replace `+` with `{1,maxLengthOfNumber}` like `split(""(?<=\\\\G\\\\w{1,3},\\\\w{1,3},\\\\w{1,3},\\\\w{1,3}),"")` to split on every 4th comma when numbers can have max 3 digits (0, 00, 12, 000, 123, 412, 999).&#xD;&#xA;&#xD;&#xA;To split on every 2nd comma you can also use this regex `split(""(?<!\\\\G\\\\d+),"")` based on my [previous answer](https://stackoverflow.com/a/16486373/1393766)";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

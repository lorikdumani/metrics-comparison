Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
19867566;8805132;221169;2;e6e5f89c-a434-49c0-80c4-33d20821ea48;2012-01-10 14:46:36.0;"imagine one dao class and one service(BO) class . here i need to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;    &#xD;&#xA; &#xD;&#xA;&#xD;&#xA;      @Repository&#xD;&#xA;        class SomeDAO{&#xD;&#xA;          &#xD;&#xA;           &#xD;&#xA;          public void setFwObject(FwObject obj){&#xD;&#xA;              this.fwObject =obj&#xD;&#xA;          }   &#xD;&#xA;          &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        @Service&#xD;&#xA;        class SomeService {&#xD;&#xA;        &#xD;&#xA;             FwObject obj=SomeFactory.getFwObject(SomeService.class);&#xD;&#xA;        	 &#xD;&#xA;             @Autowired&#xD;&#xA;             private SomeDAO  someDao&#xD;&#xA;            &#xD;&#xA;        &#xD;&#xA;        }";;
19867680;8805132;438992;5;3d64face-7364-455e-9df0-1ebb69ff0d4b;2012-01-10 14:49:18.0;"imagine one dao class and one service(BO) class . here i need to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;    class SomeDAO {&#xD;&#xA;        public void setFwObject(FwObject obj) {&#xD;&#xA;            this.fwObject = obj&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;        &#xD;&#xA;    @Service&#xD;&#xA;    class SomeService {&#xD;&#xA;        FwObject obj = SomeFactory.getFwObject(SomeService.class);&#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;&#xD;&#xA;    }&#xD;&#xA;";;deleted 138 characters in body
19867942;8805132;221169;5;ad362c1e-59ec-4a6a-b1a8-d1693fad7292;2012-01-10 14:55:23.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;    class SomeDAO {&#xD;&#xA;        public void setFwObject(FwObject obj) {&#xD;&#xA;            this.fwObject = obj&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;        &#xD;&#xA;    @Service&#xD;&#xA;    class SomeService {&#xD;&#xA;        FwObject obj = SomeFactory.getFwObject(SomeService.class);&#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;&#xD;&#xA;    }&#xD;&#xA;";;deleted 8 characters in body
19938333;8805132;221169;5;683543aa-789e-4f7b-a938-4549542e66d2;2012-01-12 10:18:36.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;    class SomeDAO {&#xD;&#xA;        public void setFwObject(FwObject obj) {&#xD;&#xA;            this.fwObject = obj&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;        &#xD;&#xA;    @Service&#xD;&#xA;    class SomeService {&#xD;&#xA;        FwObject obj = SomeFactory.getFwObject(SomeService.class);&#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwObject , because carefully we have to create new FwObject instance for every request or **every request having own FwObject instance**";;added 177 characters in body
19943764;8805132;221169;5;9812be8c-9829-453c-adb6-b8a01ea994f6;2012-01-12 13:00:59.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA;     class MyAction exdends ActionSupport{&#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeService someService;&#xD;&#xA;		&#xD;&#xA;		FwObject fwObj=null;&#xD;&#xA;		execute(){&#xD;&#xA;		  fwObj=getFrameworkObject(); //build this object using request  and session values &#xD;&#xA;        }     &#xD;&#xA;    }&#xD;&#xA;           &#xD;&#xA;    @Service&#xD;&#xA;    class SomeService {        &#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;			&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;	&#xD;&#xA;	@Repository&#xD;&#xA;    class SomeDAO {&#xD;&#xA;        public void setFwObject(FwObject obj) {&#xD;&#xA;            this.fwObject = obj  //object  will be come from MyAction&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwObject , because carefully we have to create new FwObject instance for every request or **every request having own FwObject instance**";;added 254 characters in body
20131756;8805132;221169;5;9134bb13-c50d-4492-924c-76f6e91b1a67;2012-01-18 11:54:10.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    Class MyAction exdends ActionSupport{&#xD;&#xA;         @Autowired&#xD;&#xA;         private SomeService someService;&#xD;&#xA;                	&#xD;&#xA;         @Autowired&#xD;&#xA;         FwBean fwObj;	&#xD;&#xA;                		&#xD;&#xA;         execute(){&#xD;&#xA;              fwObj.set(fromRequest()); //build this object using request  and session values &#xD;&#xA;         }     &#xD;&#xA;    }   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    @Service&#xD;&#xA;    class SomeService {        &#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;			&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;    	&#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;        class SomeDAO {&#xD;&#xA;          @Autowired&#xD;&#xA;          public void setFwObject(FwObject obj) {&#xD;&#xA;            this.fwObject = obj  //object  will be come from MyAction&#xD;&#xA;         }   &#xD;&#xA;     }&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA; <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;        <web-app  version=""2.5"">&#xD;&#xA;        &#xD;&#xA;        		 &#xD;&#xA;        	 <filter>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>&#xD;&#xA;        	</filter>&#xD;&#xA;        &#xD;&#xA;        	<filter-mapping>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<url-pattern>/*</url-pattern>&#xD;&#xA;        	</filter-mapping>&#xD;&#xA;        &#xD;&#xA;        	<context-param>&#xD;&#xA;        		<param-name>contextConfigLocation</param-name>&#xD;&#xA;        		<param-value>classpath:applicationContext.xml</param-value>&#xD;&#xA;        	</context-param>&#xD;&#xA;        	&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	&#xD;&#xA;        </web-app>&#xD;&#xA;		&#xD;&#xA;     <bean id=""fwBean"" class=""com.sriseshaa.fw.helper.FwBean"" scope=""request"">       &#xD;&#xA;              <aop:scoped-proxy/>&#xD;&#xA;     </bean>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Exception &#xD;&#xA;&#xD;&#xA;    org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.feBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)&#xD;&#xA;    	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5260)&#xD;&#xA;    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1525)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1515)&#xD;&#xA;    	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#xD;&#xA;    	at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;    	at java.lang.Thread.run(Thread.java:619)&#xD;&#xA;    Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.feBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604)&#xD;&#xA;    	at com.sriseshaa.fw.helper.FwBean$$EnhancerByCGLIB$$79187402.toString(<generated>)&#xD;&#xA;    	at com.sriseshaa.fw.helper.dao.AbstractDAO.setFwObject(AbstractDAO.java:86)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#xD;&#xA;    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#xD;&#xA;    	at java.lang.reflect.Method.invoke(Method.java:597)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:582)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:282)&#xD;&#xA;    	... 23 more&#xD;&#xA;    Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)&#xD;&#xA;    	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)&#xD;&#xA;    	... 36 more&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwObject , because carefully we have to create new FwObject instance for every request or **every request having own FwObject instance**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 7878 characters in body
20132494;8805132;221169;5;6d1a920f-2dea-41e4-b9fb-30d879de0111;2012-01-18 12:14:06.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    Class MyAction exdends ActionSupport{&#xD;&#xA;         @Autowired&#xD;&#xA;         private SomeService someService;&#xD;&#xA;                	&#xD;&#xA;         @Autowired&#xD;&#xA;         FwBean fwObj;	&#xD;&#xA;                		&#xD;&#xA;         execute(){&#xD;&#xA;              fwObj.set(fromRequest()); //build this object using request  and session values &#xD;&#xA;         }     &#xD;&#xA;    }   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    @Service&#xD;&#xA;    class SomeService {        &#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;			&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;    	&#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;        class SomeDAO {&#xD;&#xA;          @Autowired&#xD;&#xA;          public void setFwObject(FwObject obj) {&#xD;&#xA;            this.fwObject = obj  //object  will be come from MyAction&#xD;&#xA;         }   &#xD;&#xA;     }&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA; <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;        <web-app  version=""2.5"">&#xD;&#xA;        &#xD;&#xA;        		 &#xD;&#xA;        	 <filter>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>&#xD;&#xA;        	</filter>&#xD;&#xA;        &#xD;&#xA;        	<filter-mapping>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<url-pattern>/*</url-pattern>&#xD;&#xA;        	</filter-mapping>&#xD;&#xA;        &#xD;&#xA;        	<context-param>&#xD;&#xA;        		<param-name>contextConfigLocation</param-name>&#xD;&#xA;        		<param-value>classpath:applicationContext.xml</param-value>&#xD;&#xA;        	</context-param>&#xD;&#xA;        	&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	&#xD;&#xA;        </web-app>&#xD;&#xA;		&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;           xmlns:p=""http://www.springframework.org/schema/p""&#xD;&#xA;           xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;           xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;           xmlns:aop=""http://www.springframework.org/schema/aop""&#xD;&#xA;           xmlns:jdbc=""http://www.springframework.org/schema/jdbc""&#xD;&#xA;           xsi:schemaLocation=""&#xD;&#xA;                http://www.springframework.org/schema/beans&#xD;&#xA;                http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;                http://www.springframework.org/schema/aop&#xD;&#xA;                http://www.springframework.org/schema/aop/spring-aop.xsd&#xD;&#xA;                http://www.springframework.org/schema/tx&#xD;&#xA;                http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/jdbc&#xD;&#xA;                http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/context&#xD;&#xA;                http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;        &#xD;&#xA;        <!-- scans the classpath for annotated components (including @Repostory &#xD;&#xA;        and @Service  that will be auto-registered as Spring beans  -->      &#xD;&#xA;         <bean id=""fwBean"" class=""com.sriseshaa.fw.helper.FwBean"" scope=""request"">&#xD;&#xA;              &#xD;&#xA;              <!-- this next element effects the proxying of the surrounding bean -->&#xD;&#xA;              <aop:scoped-proxy/>&#xD;&#xA;        </bean>&#xD;&#xA;            &#xD;&#xA;        <context:component-scan base-package=""com.sriseshaa"" />&#xD;&#xA;    &#xD;&#xA;        <!-- methods or classes needing to run in a complete transaction will&#xD;&#xA;        be annotated with Transactional -->&#xD;&#xA;        <tx:annotation-driven />&#xD;&#xA;    &#xD;&#xA;     	<!-- Creates a data source that can provide a connection to in-memory embedded database populated &#xD;&#xA;    	with test data&#xD;&#xA;    	see: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch12s08.html   -->&#xD;&#xA;        <bean id=""dataSource""&#xD;&#xA;            class=""org.springframework.jdbc.datasource.DriverManagerDataSource""  >&#xD;&#xA;            <property name=""driverClassName"" value=""com.mysql.jdbc.Driver"" />&#xD;&#xA;            <property name=""url"" value=""jdbc:mysql://localhost/fwtest"" />&#xD;&#xA;            <property name=""username"" value=""root"" />&#xD;&#xA;            <property name=""password"" value="""" />&#xD;&#xA;        </bean>&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- This will ensure that hibernate or jpa exceptions are automatically translated into&#xD;&#xA;             Spring's generic DataAccessException hierarchy for those classes annotated with Repository&#xD;&#xA;             For example see PersonDaoJpa-->&#xD;&#xA;        <bean class=""org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor""/>&#xD;&#xA;        &#xD;&#xA;        <!-- JPA Entity Manager Factory -->&#xD;&#xA;        <bean id=""entityManagerFactory"" &#xD;&#xA;              class=""org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean""&#xD;&#xA;              p:dataSource-ref=""dataSource""&#xD;&#xA;              p:persistenceXmlLocation=""META-INF/persistence.xml"" &#xD;&#xA;        	  p:persistenceUnitName=""springJpaPersistenceUnit"" />          &#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- bean post-processor for JPA annotations -->&#xD;&#xA;        <bean class=""org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"" />&#xD;&#xA;    &#xD;&#xA;     &#xD;&#xA;        <!-- Transaction Config -->&#xD;&#xA;        <bean id=""transactionManager""&#xD;&#xA;              class=""org.springframework.orm.jpa.JpaTransactionManager""&#xD;&#xA;              p:entityManagerFactory-ref=""entityManagerFactory""/>&#xD;&#xA;    &#xD;&#xA;        <!-- use declarative transaction management  -->&#xD;&#xA;        <tx:annotation-driven  transaction-manager=""transactionManager""/>&#xD;&#xA;        &#xD;&#xA;          &#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;     </beans>&#xD;&#xA;&#xD;&#xA;Exception &#xD;&#xA;&#xD;&#xA;    org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)&#xD;&#xA;    	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5260)&#xD;&#xA;    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1525)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1515)&#xD;&#xA;    	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#xD;&#xA;    	at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;    	at java.lang.Thread.run(Thread.java:619)&#xD;&#xA;    Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604)&#xD;&#xA;    	at com.sriseshaa.fw.helper.FwBean$$EnhancerByCGLIB$$79187402.toString(<generated>)&#xD;&#xA;    	at com.sriseshaa.fw.helper.dao.AbstractDAO.setFwObject(AbstractDAO.java:86)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#xD;&#xA;    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#xD;&#xA;    	at java.lang.reflect.Method.invoke(Method.java:597)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:582)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:282)&#xD;&#xA;    	... 23 more&#xD;&#xA;    Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)&#xD;&#xA;    	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)&#xD;&#xA;    	... 36 more&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwObject , because carefully we have to create new FwObject instance for every request or **every request having own FwObject instance**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;edited body
20133658;8805132;221169;5;513c4d9e-dcbc-4e12-a16e-36fe76ef6873;2012-01-18 12:53:11.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    Class MyAction exdends ActionSupport{&#xD;&#xA;         @Autowired&#xD;&#xA;         private SomeService someService;&#xD;&#xA;                	&#xD;&#xA;         @Autowired&#xD;&#xA;         FwBean fwObj;	&#xD;&#xA;                		&#xD;&#xA;         execute(){&#xD;&#xA;              fwObj.set(fromRequest()); //build this object using request  and session values &#xD;&#xA;         }     &#xD;&#xA;    }   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    @Service&#xD;&#xA;    class PersonServiceImpl {        &#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;			&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;    	&#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;        class PersonDAO {&#xD;&#xA;          @Autowired&#xD;&#xA;          public void setFwBean(FwBean obj) {&#xD;&#xA;            this.fwObject = obj  //object  will be come from MyAction&#xD;&#xA;         }   &#xD;&#xA;     }&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA; <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;        <web-app  version=""2.5"">&#xD;&#xA;        &#xD;&#xA;        		 &#xD;&#xA;        	 <filter>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>&#xD;&#xA;        	</filter>&#xD;&#xA;        &#xD;&#xA;        	<filter-mapping>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<url-pattern>/*</url-pattern>&#xD;&#xA;        	</filter-mapping>&#xD;&#xA;        &#xD;&#xA;        	<context-param>&#xD;&#xA;        		<param-name>contextConfigLocation</param-name>&#xD;&#xA;        		<param-value>classpath:applicationContext.xml</param-value>&#xD;&#xA;        	</context-param>&#xD;&#xA;        	&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	&#xD;&#xA;        </web-app>&#xD;&#xA;		&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;           xmlns:p=""http://www.springframework.org/schema/p""&#xD;&#xA;           xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;           xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;           xmlns:aop=""http://www.springframework.org/schema/aop""&#xD;&#xA;           xmlns:jdbc=""http://www.springframework.org/schema/jdbc""&#xD;&#xA;           xsi:schemaLocation=""&#xD;&#xA;                http://www.springframework.org/schema/beans&#xD;&#xA;                http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;                http://www.springframework.org/schema/aop&#xD;&#xA;                http://www.springframework.org/schema/aop/spring-aop.xsd&#xD;&#xA;                http://www.springframework.org/schema/tx&#xD;&#xA;                http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/jdbc&#xD;&#xA;                http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/context&#xD;&#xA;                http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;        &#xD;&#xA;        <!-- scans the classpath for annotated components (including @Repostory &#xD;&#xA;        and @Service  that will be auto-registered as Spring beans  -->      &#xD;&#xA;         <bean id=""fwBean"" class=""com.sriseshaa.fw.helper.FwBean"" scope=""request"">&#xD;&#xA;              &#xD;&#xA;              <!-- this next element effects the proxying of the surrounding bean -->&#xD;&#xA;              <aop:scoped-proxy/>&#xD;&#xA;        </bean>&#xD;&#xA;            &#xD;&#xA;        <context:component-scan base-package=""com.sriseshaa"" />&#xD;&#xA;    &#xD;&#xA;        <!-- methods or classes needing to run in a complete transaction will&#xD;&#xA;        be annotated with Transactional -->&#xD;&#xA;        <tx:annotation-driven />&#xD;&#xA;    &#xD;&#xA;     	<!-- Creates a data source that can provide a connection to in-memory embedded database populated &#xD;&#xA;    	with test data&#xD;&#xA;    	see: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch12s08.html   -->&#xD;&#xA;        <bean id=""dataSource""&#xD;&#xA;            class=""org.springframework.jdbc.datasource.DriverManagerDataSource""  >&#xD;&#xA;            <property name=""driverClassName"" value=""com.mysql.jdbc.Driver"" />&#xD;&#xA;            <property name=""url"" value=""jdbc:mysql://localhost/fwtest"" />&#xD;&#xA;            <property name=""username"" value=""root"" />&#xD;&#xA;            <property name=""password"" value="""" />&#xD;&#xA;        </bean>&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- This will ensure that hibernate or jpa exceptions are automatically translated into&#xD;&#xA;             Spring's generic DataAccessException hierarchy for those classes annotated with Repository&#xD;&#xA;             For example see PersonDaoJpa-->&#xD;&#xA;        <bean class=""org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor""/>&#xD;&#xA;        &#xD;&#xA;        <!-- JPA Entity Manager Factory -->&#xD;&#xA;        <bean id=""entityManagerFactory"" &#xD;&#xA;              class=""org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean""&#xD;&#xA;              p:dataSource-ref=""dataSource""&#xD;&#xA;              p:persistenceXmlLocation=""META-INF/persistence.xml"" &#xD;&#xA;        	  p:persistenceUnitName=""springJpaPersistenceUnit"" />          &#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- bean post-processor for JPA annotations -->&#xD;&#xA;        <bean class=""org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"" />&#xD;&#xA;    &#xD;&#xA;     &#xD;&#xA;        <!-- Transaction Config -->&#xD;&#xA;        <bean id=""transactionManager""&#xD;&#xA;              class=""org.springframework.orm.jpa.JpaTransactionManager""&#xD;&#xA;              p:entityManagerFactory-ref=""entityManagerFactory""/>&#xD;&#xA;    &#xD;&#xA;        <!-- use declarative transaction management  -->&#xD;&#xA;        <tx:annotation-driven  transaction-manager=""transactionManager""/>&#xD;&#xA;        &#xD;&#xA;          &#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;     </beans>&#xD;&#xA;&#xD;&#xA;Exception &#xD;&#xA;&#xD;&#xA;    org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)&#xD;&#xA;    	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5260)&#xD;&#xA;    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1525)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1515)&#xD;&#xA;    	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#xD;&#xA;    	at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;    	at java.lang.Thread.run(Thread.java:619)&#xD;&#xA;    Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604)&#xD;&#xA;    	at com.sriseshaa.fw.helper.FwBean$$EnhancerByCGLIB$$79187402.toString(<generated>)&#xD;&#xA;    	at com.sriseshaa.fw.helper.dao.AbstractDAO.setFwObject(AbstractDAO.java:86)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#xD;&#xA;    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#xD;&#xA;    	at java.lang.reflect.Method.invoke(Method.java:597)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:582)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:282)&#xD;&#xA;    	... 23 more&#xD;&#xA;    Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)&#xD;&#xA;    	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)&#xD;&#xA;    	... 36 more&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwObject , because carefully we have to create new FwObject instance for every request or **every request having own FwObject instance**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;deleted 2 characters in body
20136204;8805132;515922;5;e2bb73b1-2849-43c2-9f06-0383be26536f;2012-01-18 14:03:20.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    Class MyAction exdends ActionSupport{&#xD;&#xA;         @Autowired&#xD;&#xA;         private SomeService someService;&#xD;&#xA;                	&#xD;&#xA;         @Autowired&#xD;&#xA;         FwBean fwObj;	&#xD;&#xA;                		&#xD;&#xA;         execute(){&#xD;&#xA;              fwObj.set(fromRequest()); //build this object using request  and session values &#xD;&#xA;         }     &#xD;&#xA;    }   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    @Service&#xD;&#xA;    class PersonServiceImpl {        &#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;			&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;    	&#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;        class PersonDAO {&#xD;&#xA;          @Autowired&#xD;&#xA;          public void setFwBean(FwBean obj) {&#xD;&#xA;            this.fwObject = obj  //object  will be come from MyAction&#xD;&#xA;         }   &#xD;&#xA;     }&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA; <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;        <web-app  version=""2.5"">&#xD;&#xA;        &#xD;&#xA;        		 &#xD;&#xA;        	 <filter>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>&#xD;&#xA;        	</filter>&#xD;&#xA;        &#xD;&#xA;        	<filter-mapping>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<url-pattern>/*</url-pattern>&#xD;&#xA;        	</filter-mapping>&#xD;&#xA;        &#xD;&#xA;        	<context-param>&#xD;&#xA;        		<param-name>contextConfigLocation</param-name>&#xD;&#xA;        		<param-value>classpath:applicationContext.xml</param-value>&#xD;&#xA;        	</context-param>&#xD;&#xA;        	&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	&#xD;&#xA;        </web-app>&#xD;&#xA;		&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;           xmlns:p=""http://www.springframework.org/schema/p""&#xD;&#xA;           xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;           xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;           xmlns:aop=""http://www.springframework.org/schema/aop""&#xD;&#xA;           xmlns:jdbc=""http://www.springframework.org/schema/jdbc""&#xD;&#xA;           xsi:schemaLocation=""&#xD;&#xA;                http://www.springframework.org/schema/beans&#xD;&#xA;                http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;                http://www.springframework.org/schema/aop&#xD;&#xA;                http://www.springframework.org/schema/aop/spring-aop.xsd&#xD;&#xA;                http://www.springframework.org/schema/tx&#xD;&#xA;                http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/jdbc&#xD;&#xA;                http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/context&#xD;&#xA;                http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;        &#xD;&#xA;        <!-- scans the classpath for annotated components (including @Repostory &#xD;&#xA;        and @Service  that will be auto-registered as Spring beans  -->      &#xD;&#xA;         <bean id=""fwBean"" class=""com.sriseshaa.fw.helper.FwBean"" scope=""request"">&#xD;&#xA;              &#xD;&#xA;              <!-- this next element effects the proxying of the surrounding bean -->&#xD;&#xA;              <aop:scoped-proxy/>&#xD;&#xA;        </bean>&#xD;&#xA;            &#xD;&#xA;        <context:component-scan base-package=""com.sriseshaa"" />&#xD;&#xA;    &#xD;&#xA;        <!-- methods or classes needing to run in a complete transaction will&#xD;&#xA;        be annotated with Transactional -->&#xD;&#xA;        <tx:annotation-driven />&#xD;&#xA;    &#xD;&#xA;     	<!-- Creates a data source that can provide a connection to in-memory embedded database populated &#xD;&#xA;    	with test data&#xD;&#xA;    	see: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch12s08.html   -->&#xD;&#xA;        <bean id=""dataSource""&#xD;&#xA;            class=""org.springframework.jdbc.datasource.DriverManagerDataSource""  >&#xD;&#xA;            <property name=""driverClassName"" value=""com.mysql.jdbc.Driver"" />&#xD;&#xA;            <property name=""url"" value=""jdbc:mysql://localhost/fwtest"" />&#xD;&#xA;            <property name=""username"" value=""root"" />&#xD;&#xA;            <property name=""password"" value="""" />&#xD;&#xA;        </bean>&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- This will ensure that hibernate or jpa exceptions are automatically translated into&#xD;&#xA;             Spring's generic DataAccessException hierarchy for those classes annotated with Repository&#xD;&#xA;             For example see PersonDaoJpa-->&#xD;&#xA;        <bean class=""org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor""/>&#xD;&#xA;        &#xD;&#xA;        <!-- JPA Entity Manager Factory -->&#xD;&#xA;        <bean id=""entityManagerFactory"" &#xD;&#xA;              class=""org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean""&#xD;&#xA;              p:dataSource-ref=""dataSource""&#xD;&#xA;              p:persistenceXmlLocation=""META-INF/persistence.xml"" &#xD;&#xA;        	  p:persistenceUnitName=""springJpaPersistenceUnit"" />          &#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- bean post-processor for JPA annotations -->&#xD;&#xA;        <bean class=""org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"" />&#xD;&#xA;    &#xD;&#xA;     &#xD;&#xA;        <!-- Transaction Config -->&#xD;&#xA;        <bean id=""transactionManager""&#xD;&#xA;              class=""org.springframework.orm.jpa.JpaTransactionManager""&#xD;&#xA;              p:entityManagerFactory-ref=""entityManagerFactory""/>&#xD;&#xA;    &#xD;&#xA;        <!-- use declarative transaction management  -->&#xD;&#xA;        <tx:annotation-driven  transaction-manager=""transactionManager""/>&#xD;&#xA;        &#xD;&#xA;          &#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;     </beans>&#xD;&#xA;&#xD;&#xA;Exception &#xD;&#xA;&#xD;&#xA;    org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)&#xD;&#xA;    	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5260)&#xD;&#xA;    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1525)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1515)&#xD;&#xA;    	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#xD;&#xA;    	at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;    	at java.lang.Thread.run(Thread.java:619)&#xD;&#xA;    Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604)&#xD;&#xA;    	at com.sriseshaa.fw.helper.FwBean$$EnhancerByCGLIB$$79187402.toString(<generated>)&#xD;&#xA;    	at com.sriseshaa.fw.helper.dao.AbstractDAO.setFwObject(AbstractDAO.java:86)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#xD;&#xA;    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#xD;&#xA;    	at java.lang.reflect.Method.invoke(Method.java:597)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:582)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:282)&#xD;&#xA;    	... 23 more&#xD;&#xA;    Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)&#xD;&#xA;    	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)&#xD;&#xA;    	... 36 more&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwBean, because carefully we have to create new FwBean instance for every request or **every request having own FwBean instance**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;Question correction to reflect what the questioner wants
20163803;8805132;221169;5;369d49c2-1442-4c9b-b6b0-0ba9e0835766;2012-01-19 07:23:35.0;"imagine one dao class and one service(BO) class . how to automatically inject FwObject  to setFwObject method , because FwObject having user related information and these piece of code should be written  inside framework &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    Class MyAction exdends ActionSupport{&#xD;&#xA;         @Autowired&#xD;&#xA;         private SomeService someService;&#xD;&#xA;                	&#xD;&#xA;         @Autowired&#xD;&#xA;         FwBean fwObj;	&#xD;&#xA;                		&#xD;&#xA;         execute(){&#xD;&#xA;              fwObj.set(fromRequest()); //build this object using request  and session values &#xD;&#xA;         }     &#xD;&#xA;    }   &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;    @Service&#xD;&#xA;    class PersonServiceImpl {        &#xD;&#xA;        @Autowired&#xD;&#xA;        private SomeDAO someDao;			&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;    	&#xD;&#xA;&#xD;&#xA;    @Repository&#xD;&#xA;        class PersonDAO {&#xD;&#xA;          @Autowired&#xD;&#xA;          public void setFwBean(FwBean obj) {&#xD;&#xA;            System.out.println(obj);&#xD;&#xA;            this.fwObject = obj  //object  will be come from MyAction&#xD;&#xA;         }   &#xD;&#xA;     }&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA; <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;        <web-app  version=""2.5"">&#xD;&#xA;        &#xD;&#xA;        		 &#xD;&#xA;        	 <filter>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>&#xD;&#xA;        	</filter>&#xD;&#xA;        &#xD;&#xA;        	<filter-mapping>&#xD;&#xA;        		<filter-name>struts2</filter-name>&#xD;&#xA;        		<url-pattern>/*</url-pattern>&#xD;&#xA;        	</filter-mapping>&#xD;&#xA;        &#xD;&#xA;        	<context-param>&#xD;&#xA;        		<param-name>contextConfigLocation</param-name>&#xD;&#xA;        		<param-value>classpath:applicationContext.xml</param-value>&#xD;&#xA;        	</context-param>&#xD;&#xA;        	&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	<listener>&#xD;&#xA;        		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>&#xD;&#xA;        	</listener>&#xD;&#xA;        	&#xD;&#xA;        </web-app>&#xD;&#xA;		&#xD;&#xA;&#xD;&#xA;    <?xml version=""1.0"" encoding=""UTF-8""?>&#xD;&#xA;    <beans xmlns=""http://www.springframework.org/schema/beans""&#xD;&#xA;           xmlns:p=""http://www.springframework.org/schema/p""&#xD;&#xA;           xmlns:context=""http://www.springframework.org/schema/context""&#xD;&#xA;           xmlns:tx=""http://www.springframework.org/schema/tx""&#xD;&#xA;           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""&#xD;&#xA;           xmlns:aop=""http://www.springframework.org/schema/aop""&#xD;&#xA;           xmlns:jdbc=""http://www.springframework.org/schema/jdbc""&#xD;&#xA;           xsi:schemaLocation=""&#xD;&#xA;                http://www.springframework.org/schema/beans&#xD;&#xA;                http://www.springframework.org/schema/beans/spring-beans.xsd&#xD;&#xA;                http://www.springframework.org/schema/aop&#xD;&#xA;                http://www.springframework.org/schema/aop/spring-aop.xsd&#xD;&#xA;                http://www.springframework.org/schema/tx&#xD;&#xA;                http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/jdbc&#xD;&#xA;                http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd&#xD;&#xA;                http://www.springframework.org/schema/context&#xD;&#xA;                http://www.springframework.org/schema/context/spring-context-3.0.xsd"">&#xD;&#xA;        &#xD;&#xA;        <!-- scans the classpath for annotated components (including @Repostory &#xD;&#xA;        and @Service  that will be auto-registered as Spring beans  -->      &#xD;&#xA;         <bean id=""fwBean"" class=""com.sriseshaa.fw.helper.FwBean"" scope=""request"">&#xD;&#xA;              &#xD;&#xA;              <!-- this next element effects the proxying of the surrounding bean -->&#xD;&#xA;              <aop:scoped-proxy/>&#xD;&#xA;        </bean>&#xD;&#xA;            &#xD;&#xA;        <context:component-scan base-package=""com.sriseshaa"" />&#xD;&#xA;    &#xD;&#xA;        <!-- methods or classes needing to run in a complete transaction will&#xD;&#xA;        be annotated with Transactional -->&#xD;&#xA;        <tx:annotation-driven />&#xD;&#xA;    &#xD;&#xA;     	<!-- Creates a data source that can provide a connection to in-memory embedded database populated &#xD;&#xA;    	with test data&#xD;&#xA;    	see: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch12s08.html   -->&#xD;&#xA;        <bean id=""dataSource""&#xD;&#xA;            class=""org.springframework.jdbc.datasource.DriverManagerDataSource""  >&#xD;&#xA;            <property name=""driverClassName"" value=""com.mysql.jdbc.Driver"" />&#xD;&#xA;            <property name=""url"" value=""jdbc:mysql://localhost/fwtest"" />&#xD;&#xA;            <property name=""username"" value=""root"" />&#xD;&#xA;            <property name=""password"" value="""" />&#xD;&#xA;        </bean>&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- This will ensure that hibernate or jpa exceptions are automatically translated into&#xD;&#xA;             Spring's generic DataAccessException hierarchy for those classes annotated with Repository&#xD;&#xA;             For example see PersonDaoJpa-->&#xD;&#xA;        <bean class=""org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor""/>&#xD;&#xA;        &#xD;&#xA;        <!-- JPA Entity Manager Factory -->&#xD;&#xA;        <bean id=""entityManagerFactory"" &#xD;&#xA;              class=""org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean""&#xD;&#xA;              p:dataSource-ref=""dataSource""&#xD;&#xA;              p:persistenceXmlLocation=""META-INF/persistence.xml"" &#xD;&#xA;        	  p:persistenceUnitName=""springJpaPersistenceUnit"" />          &#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        <!-- bean post-processor for JPA annotations -->&#xD;&#xA;        <bean class=""org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"" />&#xD;&#xA;    &#xD;&#xA;     &#xD;&#xA;        <!-- Transaction Config -->&#xD;&#xA;        <bean id=""transactionManager""&#xD;&#xA;              class=""org.springframework.orm.jpa.JpaTransactionManager""&#xD;&#xA;              p:entityManagerFactory-ref=""entityManagerFactory""/>&#xD;&#xA;    &#xD;&#xA;        <!-- use declarative transaction management  -->&#xD;&#xA;        <tx:annotation-driven  transaction-manager=""transactionManager""/>&#xD;&#xA;        &#xD;&#xA;          &#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;     </beans>&#xD;&#xA;&#xD;&#xA;Exception &#xD;&#xA;&#xD;&#xA;    org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'personDao': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:285)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1074)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)&#xD;&#xA;    	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)&#xD;&#xA;    	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)&#xD;&#xA;    	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4765)&#xD;&#xA;    	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5260)&#xD;&#xA;    	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1525)&#xD;&#xA;    	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1515)&#xD;&#xA;    	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&#xD;&#xA;    	at java.util.concurrent.FutureTask.run(FutureTask.java:138)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#xD;&#xA;    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#xD;&#xA;    	at java.lang.Thread.run(Thread.java:619)&#xD;&#xA;    Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.fwBean': Scope 'request' is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:339)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)&#xD;&#xA;    	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:33)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.getTarget(Cglib2AopProxy.java:653)&#xD;&#xA;    	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:604)&#xD;&#xA;    	at com.sriseshaa.fw.helper.FwBean$$EnhancerByCGLIB$$79187402.toString(<generated>)&#xD;&#xA;    	at com.sriseshaa.fw.helper.dao.AbstractDAO.setFwObject(AbstractDAO.java:86)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#xD;&#xA;    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#xD;&#xA;    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#xD;&#xA;    	at java.lang.reflect.Method.invoke(Method.java:597)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:582)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:84)&#xD;&#xA;    	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:282)&#xD;&#xA;    	... 23 more&#xD;&#xA;    Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive this message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In this case, use RequestContextListener or RequestContextFilter to expose the current request.&#xD;&#xA;    	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:131)&#xD;&#xA;    	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:40)&#xD;&#xA;    	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)&#xD;&#xA;    	... 36 more&#xD;&#xA;&#xD;&#xA;how to set **request level scope** for FwBean, because carefully we have to create new FwBean instance for every request or **every request having own FwBean instance**&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 38 characters in body

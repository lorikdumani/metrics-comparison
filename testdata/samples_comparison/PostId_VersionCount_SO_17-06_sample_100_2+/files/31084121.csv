Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
93784488;31084121;3738598;2;3428adef-5a40-4aee-bb74-8f7e974367fe;2015-06-27 01:04:33.0;"    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseAdrressJSONList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;&#xD;&#xA;                    JSONObject resultIndexes = results.getJSONObject(0);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultIndexes != null) {&#xD;&#xA;                        JSONArray addressComponenents = resultIndexes.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;                            address = new Address(Locale.getDefault());&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponenentIndexes = addressComponenents.getJSONObject(x);&#xD;&#xA;                            if (addressComponenentIndexes != null) {&#xD;&#xA;                                JSONArray types = addressComponenentIndexes.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponenentIndexes.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                            if (address.getSubAdminArea() != null &&&#xD;&#xA;                                    address.getAdminArea() != null &&&#xD;&#xA;                                    address.getCountryName() != null) {&#xD;&#xA;                                result.add(address);&#xD;&#xA;                                return result;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseAdrressJSONList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls as I need to read up on the that subject. &#xD;&#xA;";;
93784858;31084121;3738598;5;3bc4a48e-747e-48c7-ad7a-0328ca56d7da;2015-06-27 01:23:24.0;"    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseAdrressJSONList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;&#xD;&#xA;                    JSONObject resultIndexes = results.getJSONObject(0);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultIndexes != null) {&#xD;&#xA;                        JSONArray addressComponenents = resultIndexes.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;                            address = new Address(Locale.getDefault());&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponenentIndexes = addressComponenents.getJSONObject(x);&#xD;&#xA;                            if (addressComponenentIndexes != null) {&#xD;&#xA;                                JSONArray types = addressComponenentIndexes.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponenentIndexes.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                            if (address.getSubAdminArea() != null &&&#xD;&#xA;                                    address.getAdminArea() != null &&&#xD;&#xA;                                    address.getCountryName() != null) {&#xD;&#xA;                                result.add(address);&#xD;&#xA;                                return result;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseAdrressJSONList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;";;added 159 characters in body
93784993;31084121;3738598;5;a7d0f547-1a0b-4764-bba3-8e869c3ebe24;2015-06-27 01:30:06.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseAdrressJSONList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;&#xD;&#xA;                    JSONObject resultIndexes = results.getJSONObject(0);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultIndexes != null) {&#xD;&#xA;                        JSONArray addressComponenents = resultIndexes.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;                            address = new Address(Locale.getDefault());&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponenentIndexes = addressComponenents.getJSONObject(x);&#xD;&#xA;                            if (addressComponenentIndexes != null) {&#xD;&#xA;                                JSONArray types = addressComponenentIndexes.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponenentIndexes.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                            if (address.getSubAdminArea() != null &&&#xD;&#xA;                                    address.getAdminArea() != null &&&#xD;&#xA;                                    address.getCountryName() != null) {&#xD;&#xA;                                result.add(address);&#xD;&#xA;                                return result;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseAdrressJSONList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;";;added 119 characters in body
93789327;31084121;3738598;5;b0c9c72c-1bdb-4ec0-a23b-5a4e28e941b8;2015-06-27 05:01:54.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseAdrressJSONList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultIndexes = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultIndexes != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultIndexes.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;                                address = new Address(Locale.getDefault());&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentIndexes = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentIndexes != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentIndexes.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentIndexes.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;";;added 298 characters in body
93790363;31084121;3738598;5;e8efc886-ba5e-4a5e-93d1-01f1b69efcbd;2015-06-27 05:46:17.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseAdrressJSONList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultIndexes = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultIndexes != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultIndexes.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentIndexes = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentIndexes != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentIndexes.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentIndexes.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;";;deleted 75 characters in body
93819124;31084121;3738598;5;b6c8e25d-7027-4da8-ab90-9de298637ad2;2015-06-27 16:05:38.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.e(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultIndexes = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultIndexes != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultIndexes.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentIndexes = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentIndexes != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentIndexes.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentIndexes.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;";;edited body
93819310;31084121;3738598;5;5f6ac341-9b45-46a6-a10d-18b68bd37dc5;2015-06-27 16:11:47.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String resultTye = ""&result_type=administrative_area_level_2"";&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultItems != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentItems = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentItems != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;";;edited body
93820085;31084121;3738598;5;6d608a41-f49c-4a52-bd42-6fbecd5bc759;2015-06-27 16:33:00.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String resultTye = ""&result_type=administrative_area_level_2"";&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultItems != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentItems = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentItems != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does is show how to parse the JSON file returned, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][3] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: http://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [4]: http://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;edited body
93820481;31084121;3738598;5;4b8c55a9-718e-4c36-8271-25d238caff35;2015-06-27 16:43:04.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String resultTye = ""&result_type=administrative_area_level_2"";&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultItems != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentItems = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentItems != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does is show how to parse the JSON file returned, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][4] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: http://stackoverflow.com/questions/23638067/geocoder-getfromlocation-function-throws-timed-out-waiting-for-server-response?rq=1&#xD;&#xA;  [4]: http://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [5]: http://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;added 136 characters in body
93828338;31084121;3738598;5;0d6119aa-26e4-421b-a7a5-2393c1623300;2015-06-27 20:16:52.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String resultTye = ""&result_type=administrative_area_level_2"";&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords; // + resultTye;&#xD;&#xA;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;        InputStream stream = null;&#xD;&#xA;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        try {&#xD;&#xA;&#xD;&#xA;            HttpPost httppost = new HttpPost(getUrl);&#xD;&#xA;            HttpClient client = new DefaultHttpClient();&#xD;&#xA;            HttpResponse response;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            response = client.execute(httppost);&#xD;&#xA;&#xD;&#xA;            statusCode = response.getStatusLine().getStatusCode();&#xD;&#xA;&#xD;&#xA;            HttpEntity entity = response.getEntity();&#xD;&#xA;            stream = entity.getContent();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (ClientProtocolException e) {&#xD;&#xA;        } catch (IOException e) {&#xD;&#xA;        } finally {&#xD;&#xA;            try {&#xD;&#xA;                if (br != null) {&#xD;&#xA;                    br.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        JSONObject location;&#xD;&#xA;        String location_string;&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpStatus.SC_OK);&#xD;&#xA;        if (statusCode == HttpStatus.SC_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                    for(int i = 0; i < results.length(); ++i) {&#xD;&#xA;                        address = new Address(Locale.getDefault());&#xD;&#xA;                        JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                        //get the addressComponents array&#xD;&#xA;                        if (resultItems != null) {&#xD;&#xA;                            JSONArray addressComponenents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                            //iterates through the address components&#xD;&#xA;                            for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                                JSONObject addressComponenentItems = addressComponenents.getJSONObject(x);&#xD;&#xA;                                if (addressComponenentItems != null) {&#xD;&#xA;                                    JSONArray types = addressComponenentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                    //get the address data&#xD;&#xA;                                    addressData = addressComponenentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                    //get and iterate through the types array&#xD;&#xA;                                    if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                        if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                            address.setSubAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                            address.setAdminArea(addressData);&#xD;&#xA;                                        } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                            address.setCountryName(addressData);&#xD;&#xA;                                        }&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        if (address.getSubAdminArea() != null &&&#xD;&#xA;                                address.getAdminArea() != null &&&#xD;&#xA;                                address.getCountryName() != null) {&#xD;&#xA;                            result.add(address);&#xD;&#xA;                            return result;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does (that is not already posted on this site) is show how to parse the JSON file returned for an address, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][4] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: http://stackoverflow.com/questions/23638067/geocoder-getfromlocation-function-throws-timed-out-waiting-for-server-response?rq=1&#xD;&#xA;  [4]: http://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [5]: http://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;added 57 characters in body
96466297;31084121;3738598;5;172bfc86-390a-4de6-bb6e-44f9a64cf957;2015-08-02 00:07:11.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords;&#xD;&#xA;        URL url = null;&#xD;&#xA;&#xD;&#xA;        HttpURLConnection urlConnection = null;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = new StringBuilder();&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        try {&#xD;&#xA;            url = new URL(getUrl);&#xD;&#xA;&#xD;&#xA;            urlConnection = (HttpURLConnection) url.openConnection();&#xD;&#xA;            // set the connection timeout to 10 seconds and the read timeout to 120 seconds&#xD;&#xA;            urlConnection.setConnectTimeout(10 * 1000);&#xD;&#xA;            urlConnection.setReadTimeout(120 * 1000);&#xD;&#xA;            urlConnection.connect();&#xD;&#xA;&#xD;&#xA;            InputStream stream = new BufferedInputStream(urlConnection.getInputStream());&#xD;&#xA;&#xD;&#xA;            statusCode = urlConnection.getResponseCode();&#xD;&#xA;&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (MalformedURLException e) {&#xD;&#xA;            e.printStackTrace();&#xD;&#xA;        } catch (IOException ex) {&#xD;&#xA;            ex.printStackTrace();&#xD;&#xA;        } finally {&#xD;&#xA;            //close buffered reader and under lying stream&#xD;&#xA;            if (br != null) {&#xD;&#xA;                try {&#xD;&#xA;                    br.close();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    e.printStackTrace();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (urlConnection != null) {&#xD;&#xA;                urlConnection.disconnect();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpURLConnection.HTTP_OK);&#xD;&#xA;&#xD;&#xA;        //create json object from result string and then parse it&#xD;&#xA;        if (statusCode == HttpURLConnection.HTTP_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                for (int i = 0; i < results.length(); ++i) {&#xD;&#xA;                    address = new Address(Locale.getDefault());&#xD;&#xA;                    JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultItems != null) {&#xD;&#xA;                        JSONArray addressComponenents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponenents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponenentItems = addressComponenents.getJSONObject(x);&#xD;&#xA;                            if (addressComponenentItems != null) {&#xD;&#xA;                                JSONArray types = addressComponenentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponenentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    if (address.getSubAdminArea() != null &&&#xD;&#xA;                            address.getAdminArea() != null &&&#xD;&#xA;                            address.getCountryName() != null) {&#xD;&#xA;                        result.add(address);&#xD;&#xA;                        return result;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does (that is not already posted on this site) is show how to parse the JSON file returned for an address, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][4] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: http://stackoverflow.com/questions/23638067/geocoder-getfromlocation-function-throws-timed-out-waiting-for-server-response?rq=1&#xD;&#xA;  [4]: http://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [5]: http://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;added 212 characters in body
96498825;31084121;3738598;5;cda495b2-21c2-4b54-ae75-22a74a8ec2db;2015-08-02 18:58:45.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    //Method may return null&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords;&#xD;&#xA;        URL url = null;&#xD;&#xA;&#xD;&#xA;        HttpURLConnection urlConnection = null;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = null;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        try {&#xD;&#xA;            url = new URL(getUrl);&#xD;&#xA;&#xD;&#xA;            urlConnection = (HttpURLConnection) url.openConnection();&#xD;&#xA;            // set the connection timeout to 10 seconds and the read timeout to 120 seconds&#xD;&#xA;            urlConnection.setConnectTimeout(10 * 1000);&#xD;&#xA;            urlConnection.setReadTimeout(120 * 1000);&#xD;&#xA;            urlConnection.connect();&#xD;&#xA;&#xD;&#xA;            InputStream stream = new BufferedInputStream(urlConnection.getInputStream());&#xD;&#xA;&#xD;&#xA;            statusCode = urlConnection.getResponseCode();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (MalformedURLException e) {&#xD;&#xA;            e.printStackTrace();&#xD;&#xA;        } catch (IOException ex) {&#xD;&#xA;            ex.printStackTrace();&#xD;&#xA;        } finally {&#xD;&#xA;            //close buffered reader and under lying stream&#xD;&#xA;            if (br != null) {&#xD;&#xA;                try {&#xD;&#xA;                    br.close();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    e.printStackTrace();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (urlConnection != null) {&#xD;&#xA;                urlConnection.disconnect();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpURLConnection.HTTP_OK);&#xD;&#xA;&#xD;&#xA;        //create json object from result string and then parse it&#xD;&#xA;        if (statusCode == HttpURLConnection.HTTP_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                for (int i = 0; i < results.length(); ++i) {&#xD;&#xA;                    address = new Address(Locale.getDefault());&#xD;&#xA;                    JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultItems != null) {&#xD;&#xA;                        JSONArray addressComponents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponentItems = addressComponents.getJSONObject(x);&#xD;&#xA;                            if (addressComponentItems != null) {&#xD;&#xA;                                JSONArray types = addressComponentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    if (address.getSubAdminArea() != null &&&#xD;&#xA;                            address.getAdminArea() != null &&&#xD;&#xA;                            address.getCountryName() != null) {&#xD;&#xA;                        result.add(address);&#xD;&#xA;                        return result;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's pretty slow, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does (that is not already posted on this site) is show how to parse the JSON file returned for an address, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][4] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: http://stackoverflow.com/questions/23638067/geocoder-getfromlocation-function-throws-timed-out-waiting-for-server-response?rq=1&#xD;&#xA;  [4]: http://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [5]: http://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;deleted 1 character in body
97537849;31084121;3738598;5;1ffcd5c2-0462-4eab-94fe-274382e1f913;2015-08-16 22:42:20.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    //Method may return null&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords;&#xD;&#xA;        URL url = null;&#xD;&#xA;&#xD;&#xA;        HttpURLConnection urlConnection = null;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = null;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        try {&#xD;&#xA;            url = new URL(getUrl);&#xD;&#xA;&#xD;&#xA;            urlConnection = (HttpURLConnection) url.openConnection();&#xD;&#xA;            // set the connection timeout to 10 seconds and the read timeout to 120 seconds&#xD;&#xA;            urlConnection.setConnectTimeout(10 * 1000);&#xD;&#xA;            urlConnection.setReadTimeout(120 * 1000);&#xD;&#xA;            urlConnection.connect();&#xD;&#xA;&#xD;&#xA;            InputStream stream = new BufferedInputStream(urlConnection.getInputStream());&#xD;&#xA;&#xD;&#xA;            statusCode = urlConnection.getResponseCode();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (MalformedURLException e) {&#xD;&#xA;            e.printStackTrace();&#xD;&#xA;        } catch (IOException ex) {&#xD;&#xA;            ex.printStackTrace();&#xD;&#xA;        } finally {&#xD;&#xA;            //close buffered reader and under lying stream&#xD;&#xA;            if (br != null) {&#xD;&#xA;                try {&#xD;&#xA;                    br.close();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    e.printStackTrace();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (urlConnection != null) {&#xD;&#xA;                urlConnection.disconnect();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpURLConnection.HTTP_OK);&#xD;&#xA;&#xD;&#xA;        //create json object from result string and then parse it&#xD;&#xA;        if (statusCode == HttpURLConnection.HTTP_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                for (int i = 0; i < results.length(); ++i) {&#xD;&#xA;                    address = new Address(Locale.getDefault());&#xD;&#xA;                    JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultItems != null) {&#xD;&#xA;                        JSONArray addressComponents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponentItems = addressComponents.getJSONObject(x);&#xD;&#xA;                            if (addressComponentItems != null) {&#xD;&#xA;                                JSONArray types = addressComponentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    if (address.getSubAdminArea() != null &&&#xD;&#xA;                            address.getAdminArea() != null &&&#xD;&#xA;                            address.getCountryName() != null) {&#xD;&#xA;                        result.add(address);&#xD;&#xA;                        return result;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's a little slower, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does (that is not already posted on this site) is show how to parse the JSON file returned for an address, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][4] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: http://stackoverflow.com/questions/23638067/geocoder-getfromlocation-function-throws-timed-out-waiting-for-server-response?rq=1&#xD;&#xA;  [4]: http://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [5]: http://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;added 4 characters in body
147596491;31084121;-1;5;fc4d5b74-6b70-4850-a676-48eebd029ef9;2017-05-23 12:30:13.0;"Call Google Reverse Geocoder API and parse the JSON result for an Address containing the county, state and country.&#xD;&#xA;&#xD;&#xA;    public class MyGeocoder {&#xD;&#xA;&#xD;&#xA;    //Method will contact the Google Geocoder API and return a JSONObject containing&#xD;&#xA;    //a list of Address data&#xD;&#xA;    //https://developers.google.com/maps/documentation/geocoding/&#xD;&#xA;    //Method may return null&#xD;&#xA;    public static List<Address> getLocationInfo(double latitude, double longitude) {&#xD;&#xA;&#xD;&#xA;        String coords = (float) latitude + "","" + (float) longitude;&#xD;&#xA;        String getUrl = ""https://maps.googleapis.com/maps/api/geocode/json?latlng="" + coords;&#xD;&#xA;        URL url = null;&#xD;&#xA;&#xD;&#xA;        HttpURLConnection urlConnection = null;&#xD;&#xA;        BufferedReader br = null;&#xD;&#xA;&#xD;&#xA;        StringBuilder stringBuilder = null;&#xD;&#xA;        int statusCode = 0;&#xD;&#xA;&#xD;&#xA;        try {&#xD;&#xA;            url = new URL(getUrl);&#xD;&#xA;&#xD;&#xA;            urlConnection = (HttpURLConnection) url.openConnection();&#xD;&#xA;            // set the connection timeout to 10 seconds and the read timeout to 120 seconds&#xD;&#xA;            urlConnection.setConnectTimeout(10 * 1000);&#xD;&#xA;            urlConnection.setReadTimeout(120 * 1000);&#xD;&#xA;            urlConnection.connect();&#xD;&#xA;&#xD;&#xA;            InputStream stream = new BufferedInputStream(urlConnection.getInputStream());&#xD;&#xA;&#xD;&#xA;            statusCode = urlConnection.getResponseCode();&#xD;&#xA;&#xD;&#xA;            InputStreamReader streamReader = new InputStreamReader(stream);&#xD;&#xA;            br = new BufferedReader(streamReader);&#xD;&#xA;&#xD;&#xA;            String line = """";&#xD;&#xA;            stringBuilder = new StringBuilder();&#xD;&#xA;&#xD;&#xA;            while ((line = br.readLine()) != null) {&#xD;&#xA;                stringBuilder.append(line);&#xD;&#xA;            }&#xD;&#xA;        } catch (MalformedURLException e) {&#xD;&#xA;            e.printStackTrace();&#xD;&#xA;        } catch (IOException ex) {&#xD;&#xA;            ex.printStackTrace();&#xD;&#xA;        } finally {&#xD;&#xA;            //close buffered reader and under lying stream&#xD;&#xA;            if (br != null) {&#xD;&#xA;                try {&#xD;&#xA;                    br.close();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    e.printStackTrace();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (urlConnection != null) {&#xD;&#xA;                urlConnection.disconnect();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""statusCode = "" + statusCode + "" HTTPStatus.SC_OK = "" + HttpURLConnection.HTTP_OK);&#xD;&#xA;&#xD;&#xA;        //create json object from result string and then parse it&#xD;&#xA;        if (statusCode == HttpURLConnection.HTTP_OK) {&#xD;&#xA;            JSONObject jsonObject = null;&#xD;&#xA;            try {&#xD;&#xA;                jsonObject = new JSONObject(stringBuilder.toString());&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                // TODO Auto-generated catch block&#xD;&#xA;                Log.e(""MyGeocoder"", ""JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return parseJSONAddressList(jsonObject);&#xD;&#xA;        } else {&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //Method will parse JSONObject and return a List<Address> containing one Address.&#xD;&#xA;    //The Address will only contain data for county, state and country.&#xD;&#xA;    public static List<Address> parseJSONAddressList(JSONObject jsonObject) {&#xD;&#xA;&#xD;&#xA;        Log.d(""MyGeocoder"", ""In parseJSONAddressList"");&#xD;&#xA;&#xD;&#xA;        String addressData;&#xD;&#xA;        Address address = null;&#xD;&#xA;&#xD;&#xA;        List<Address> result = new ArrayList<Address>();&#xD;&#xA;&#xD;&#xA;        if (jsonObject != null) {&#xD;&#xA;            try {&#xD;&#xA;                //get and iterate through the results array&#xD;&#xA;                JSONArray results = jsonObject.getJSONArray(""results"");&#xD;&#xA;                for (int i = 0; i < results.length(); ++i) {&#xD;&#xA;                    address = new Address(Locale.getDefault());&#xD;&#xA;                    JSONObject resultItems = results.getJSONObject(i);&#xD;&#xA;                    //get the addressComponents array&#xD;&#xA;                    if (resultItems != null) {&#xD;&#xA;                        JSONArray addressComponents = resultItems.getJSONArray(""address_components"");&#xD;&#xA;&#xD;&#xA;                        //iterates through the address components&#xD;&#xA;                        for (int x = 0; x < addressComponents.length(); x++) {&#xD;&#xA;&#xD;&#xA;                            JSONObject addressComponentItems = addressComponents.getJSONObject(x);&#xD;&#xA;                            if (addressComponentItems != null) {&#xD;&#xA;                                JSONArray types = addressComponentItems.getJSONArray(""types"");&#xD;&#xA;&#xD;&#xA;                                //get the address data&#xD;&#xA;                                addressData = addressComponentItems.getString(""long_name"");&#xD;&#xA;&#xD;&#xA;                                //get and iterate through the types array&#xD;&#xA;                                if (types.getString(0) != null) {&#xD;&#xA;&#xD;&#xA;                                    if (types.getString(0).equals(""administrative_area_level_2"")) {&#xD;&#xA;                                        address.setSubAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""administrative_area_level_1"")) {&#xD;&#xA;                                        address.setAdminArea(addressData);&#xD;&#xA;                                    } else if (types.getString(0).equals(""country"")) {&#xD;&#xA;                                        address.setCountryName(addressData);&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    if (address.getSubAdminArea() != null &&&#xD;&#xA;                            address.getAdminArea() != null &&&#xD;&#xA;                            address.getCountryName() != null) {&#xD;&#xA;                        result.add(address);&#xD;&#xA;                        return result;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            } catch (JSONException e) {&#xD;&#xA;                Log.e(""MyGeocoder"", ""parseJSONAddressList JSONException e = "" + e.getMessage());&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Again this works but it's a little slower, and it doesn't cover the situation when the GeoCoder Service not Available and a phone reboot is required.  Also I'm not sure how well written the networking calls are, as I need to read up on the that subject. I'm sure there's a better way to parse the JSON for the address as I've read that Google will change the names of the parameters in the JSON from time to time.&#xD;&#xA;&#xD;&#xA;*******************************************************************************&#xD;&#xA;Edit&#xD;&#xA;I've received some feed back that this solution is not helpful because it is not production ready, and that the solution advocates circumventing the built in Geocoder and using the web API.  I think the only thing this solution does (that is not already posted on this site) is show how to parse the JSON file returned for an address, as I couldn't find any examples on how to do that.  Here's a result of some of the other questions most of them have no solution or use this approach.&#xD;&#xA;&#xD;&#xA;[Issue 5935-gmaps-api-issue][1]&#xD;&#xA;&#xD;&#xA;[Issue 6708-gmaps-api-issue][2]&#xD;&#xA;&#xD;&#xA;[geocoder.getFromLocation function throws “Timed out waiting for server response” exception][3] The solution is not for reverse geocoding&#xD;&#xA;&#xD;&#xA;[Service not available while calling geoCoder.getFromLocation()][4] doesn't show how to parse the result&#xD;&#xA;&#xD;&#xA;[Android Geocoder getFromLocationName always returns null][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=5935&q=Geocoder%20Service%20not%20Available&colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal&#xD;&#xA;  [2]: https://code.google.com/p/gmaps-api-issues/issues/detail?id=6708&#xD;&#xA;  [3]: https://stackoverflow.com/questions/23638067/geocoder-getfromlocation-function-throws-timed-out-waiting-for-server-response?rq=1&#xD;&#xA;  [4]: https://stackoverflow.com/questions/15110528/service-not-available-while-calling-geocoder-getfromlocation?lq=1&#xD;&#xA;  [5]: https://stackoverflow.com/questions/15182853/android-geocoder-getfromlocationname-always-returns-null";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

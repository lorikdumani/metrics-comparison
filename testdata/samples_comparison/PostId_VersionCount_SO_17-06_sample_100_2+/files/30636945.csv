Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
92031466;30636945;4145420;2;259c0532-8a78-485d-86a3-386853c290e3;2015-06-04 06:52:57.0;"Here is the guide : &#xD;&#xA;&#xD;&#xA;https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;And answer of your question is :&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices]; &#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;
92031810;30636945;4145420;5;72e8335f-6eea-4d92-a880-0e6f462a0fa2;2015-06-04 06:58:39.0;"Here is the guide : &#xD;&#xA;&#xD;&#xA;> https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;And answer of your question is :&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices]; ";;deleted 100 characters in body
92091105;30636945;4145420;5;1b1ace6d-cfaa-4ce7-be38-dc206c1bc554;2015-06-04 19:27:03.0;"Here is solution for iOS (Thank you Larme) :&#xD;&#xA;&#xD;&#xA;    NSArray *connectedAccessories = [[EAAccessoryManager sharedAccessoryManager] connectedAccessories]; &#xD;&#xA;&#xD;&#xA;documentation :&#xD;&#xA;&#xD;&#xA;https://developer.apple.com/library/prerelease/ios/documentation/ExternalAccessory/Reference/EAAccessoryManager_class/index.html#//apple_ref/occ/instp/EAAccessoryManager/connectedAccessories&#xD;&#xA;&#xD;&#xA;Also if someone needs, this is documentation for Mac : &#xD;&#xA;&#xD;&#xA;> https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;and code snippet for Mac&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices];";;added 387 characters in body
92152128;30636945;4145420;5;4936ba8b-fba2-439a-ade2-ea4c3882fee5;2015-06-05 13:44:40.0;"Here is solution for iOS (Thank you Larme) :&#xD;&#xA;&#xD;&#xA;    NSArray *connectedAccessories = [[EAAccessoryManager sharedAccessoryManager] connectedAccessories]; &#xD;&#xA;&#xD;&#xA;documentation :&#xD;&#xA;&#xD;&#xA;https://developer.apple.com/library/prerelease/ios/documentation/ExternalAccessory/Reference/EAAccessoryManager_class/index.html#//apple_ref/occ/instp/EAAccessoryManager/connectedAccessories&#xD;&#xA;&#xD;&#xA;Also if someone needs, this is documentation for Mac : &#xD;&#xA;&#xD;&#xA;> https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;and code snippet for Mac&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices];&#xD;&#xA;&#xD;&#xA;For alan478's BLE question :&#xD;&#xA;&#xD;&#xA;The Core Bluetooth framework provides the classes needed for your iOS and Mac apps to communicate with devices that are equipped with Bluetooth low energy wireless technology. You can take a look this tutorial :&#xD;&#xA;&#xD;&#xA;http://www.raywenderlich.com/52080/introduction-core-bluetooth-building-heart-rate-monitor&#xD;&#xA;&#xD;&#xA;and BLE code snippet is :&#xD;&#xA;&#xD;&#xA;    // In this case you need to tell UUID for serching specific device&#xD;&#xA;    CBUUID *hrate = [CBUUID UUIDWithString:@""1800""];&#xD;&#xA;    &#xD;&#xA;    // Create a dictionary for passing down to the scan with service method&#xD;&#xA;    NSDictionary *scanOptions = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:NO] forKey:CBCentralManagerScanOptionAllowDuplicatesKey];&#xD;&#xA;    &#xD;&#xA;    // Tell the central manager (cm) to scan for the heart rate service&#xD;&#xA;    [cm scanForPeripheralsWithServices:[NSArray arrayWithObject:hrate] options:scanOptions]";;added 904 characters in body
92688039;30636945;4145420;5;3d8d6276-42b3-418a-9bf6-85947973681b;2015-06-12 13:37:43.0;"Here is solution for iOS (Thank you Larme) :&#xD;&#xA;&#xD;&#xA;    NSArray *connectedAccessories = [[EAAccessoryManager sharedAccessoryManager] connectedAccessories]; &#xD;&#xA;&#xD;&#xA;documentation :&#xD;&#xA;&#xD;&#xA;https://developer.apple.com/library/prerelease/ios/documentation/ExternalAccessory/Reference/EAAccessoryManager_class/index.html#//apple_ref/occ/instp/EAAccessoryManager/connectedAccessories&#xD;&#xA;&#xD;&#xA;Also if someone needs, this is documentation for Mac : &#xD;&#xA;&#xD;&#xA;> https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;and code snippet for Mac&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices];&#xD;&#xA;&#xD;&#xA;For alan478's BLE question :&#xD;&#xA;&#xD;&#xA;The Core Bluetooth framework provides the classes needed for your iOS and Mac apps to communicate with devices that are equipped with Bluetooth low energy wireless technology. You can take a look this tutorial :&#xD;&#xA;&#xD;&#xA;http://www.raywenderlich.com/52080/introduction-core-bluetooth-building-heart-rate-monitor&#xD;&#xA;&#xD;&#xA;and BLE code snippet is :&#xD;&#xA;&#xD;&#xA;    // In this case you need to tell UUID for serching specific device&#xD;&#xA;    CBUUID *hrate = [CBUUID UUIDWithString:@""1800""];&#xD;&#xA;    &#xD;&#xA;    // Create a dictionary for passing down to the scan with service method&#xD;&#xA;    NSDictionary *scanOptions = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:NO] forKey:CBCentralManagerScanOptionAllowDuplicatesKey];&#xD;&#xA;    &#xD;&#xA;    // Tell the central manager (cm) to scan for the heart rate service&#xD;&#xA;    [cm scanForPeripheralsWithServices:[NSArray arrayWithObject:hrate] options:scanOptions]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;please read this document on developer.apple.com :&#xD;&#xA;&#xD;&#xA; https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/BestPracticesForInteractingWithARemotePeripheralDevice/BestPracticesForInteractingWithARemotePeripheralDevice.html&#xD;&#xA;&#xD;&#xA;here is an interesting paragraph for you :&#xD;&#xA;&#xD;&#xA;Explore a Peripheral’s Data Wisely&#xD;&#xA;A peripheral device may have many more services and characteristics than you may be interested in when you are developing an app to fulfill a specific use case. Discovering all of a peripheral’s services and associated characteristics can negatively affect battery life and your app’s performance. Therefore, you should look for and discover only the services and associated characteristics your app needs.&#xD;&#xA;&#xD;&#xA;For example, imagine that you are connected to a peripheral device that has many services available, but your app needs access to only two of them. You can look for and discover these two services only, by passing in an array of their service UUIDs (represented by CBUUID objects) to the discoverServices: method of the CBPeripheral class, like this:&#xD;&#xA;&#xD;&#xA;    [peripheral discoverServices:@[firstServiceUUID, secondServiceUUID]];&#xD;&#xA;&#xD;&#xA;After you have discovered the two services you are interested in, you can similarly look for and discover only the characteristics of these services that you are interested in. Again, simply pass in an array of the UUIDs that identify the characteristics you want to discover (for each service) to the discoverCharacteristics:forService: method of the CBPeripheral class.&#xD;&#xA;&#xD;&#xA;";;added 1585 characters in body
92688473;30636945;4145420;5;364c529b-2e65-454b-8b63-cf19723fc264;2015-06-12 13:43:43.0;"Here is solution for iOS (Thank you Larme) :&#xD;&#xA;&#xD;&#xA;    NSArray *connectedAccessories = [[EAAccessoryManager sharedAccessoryManager] connectedAccessories]; &#xD;&#xA;&#xD;&#xA;documentation :&#xD;&#xA;&#xD;&#xA;https://developer.apple.com/library/prerelease/ios/documentation/ExternalAccessory/Reference/EAAccessoryManager_class/index.html#//apple_ref/occ/instp/EAAccessoryManager/connectedAccessories&#xD;&#xA;&#xD;&#xA;Also if someone needs, this is documentation for Mac : &#xD;&#xA;&#xD;&#xA;> https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;and code snippet for Mac&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices];&#xD;&#xA;&#xD;&#xA;For alan478's BLE question :&#xD;&#xA;&#xD;&#xA;The Core Bluetooth framework provides the classes needed for your iOS and Mac apps to communicate with devices that are equipped with Bluetooth low energy wireless technology. You can take a look this tutorial :&#xD;&#xA;&#xD;&#xA;http://www.raywenderlich.com/52080/introduction-core-bluetooth-building-heart-rate-monitor&#xD;&#xA;&#xD;&#xA;and BLE code snippet is :&#xD;&#xA;&#xD;&#xA;    // In this case you need to tell UUID for serching specific device&#xD;&#xA;    CBUUID *hrate = [CBUUID UUIDWithString:@""1800""];&#xD;&#xA;    &#xD;&#xA;    // Create a dictionary for passing down to the scan with service method&#xD;&#xA;    NSDictionary *scanOptions = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:NO] forKey:CBCentralManagerScanOptionAllowDuplicatesKey];&#xD;&#xA;    &#xD;&#xA;    // Tell the central manager (cm) to scan for the heart rate service&#xD;&#xA;    [cm scanForPeripheralsWithServices:[NSArray arrayWithObject:hrate] options:scanOptions]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Please read this document on developer.apple.com :**&#xD;&#xA;&#xD;&#xA; https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/BestPracticesForInteractingWithARemotePeripheralDevice/BestPracticesForInteractingWithARemotePeripheralDevice.html&#xD;&#xA;&#xD;&#xA;**here is an interesting paragraph for you :**&#xD;&#xA;&#xD;&#xA;Explore a Peripheral’s Data Wisely&#xD;&#xA;A peripheral device may have many more services and characteristics than you may be interested in when you are developing an app to fulfill a specific use case. Discovering all of a peripheral’s services and associated characteristics can negatively affect battery life and your app’s performance. Therefore, you should look for and discover only the services and associated characteristics your app needs.&#xD;&#xA;&#xD;&#xA;For example, imagine that you are connected to a peripheral device that has many services available, but your app needs access to only two of them. You can look for and discover these two services only, by passing in an array of their service UUIDs (represented by CBUUID objects) to the discoverServices: method of the CBPeripheral class, like this:&#xD;&#xA;&#xD;&#xA;    [peripheral discoverServices:@[firstServiceUUID, secondServiceUUID]];&#xD;&#xA;&#xD;&#xA;After you have discovered the two services you are interested in, you can similarly look for and discover only the characteristics of these services that you are interested in. Again, simply pass in an array of the UUIDs that identify the characteristics you want to discover (for each service) to the discoverCharacteristics:forService: method of the CBPeripheral class.&#xD;&#xA;&#xD;&#xA;**Also there is this comment :**&#xD;&#xA;&#xD;&#xA;""think Apple forbids this thing. We can only get list of Devices with specific CBUUID. so if you want to list all the devices(same as the Bluetooth settings does natively) then It is not possible. Please correct me if i am wrong. –  Mrug Mar 11 at 13:24""&#xD;&#xA;&#xD;&#xA;under this question :&#xD;&#xA;&#xD;&#xA;http://stackoverflow.com/q/10178293/4145420";;added 1585 characters in body
146414457;30636945;-1;5;aa1b6016-41d3-4984-b39d-0d82f04f04f9;2017-05-23 11:46:24.0;"Here is solution for iOS (Thank you Larme) :&#xD;&#xA;&#xD;&#xA;    NSArray *connectedAccessories = [[EAAccessoryManager sharedAccessoryManager] connectedAccessories]; &#xD;&#xA;&#xD;&#xA;documentation :&#xD;&#xA;&#xD;&#xA;https://developer.apple.com/library/prerelease/ios/documentation/ExternalAccessory/Reference/EAAccessoryManager_class/index.html#//apple_ref/occ/instp/EAAccessoryManager/connectedAccessories&#xD;&#xA;&#xD;&#xA;Also if someone needs, this is documentation for Mac : &#xD;&#xA;&#xD;&#xA;> https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/Bluetooth/BT_Intro/BT_Intro.html&#xD;&#xA;&#xD;&#xA;and code snippet for Mac&#xD;&#xA;&#xD;&#xA;    NSArray *devices = [IOBluetoothDevice pairedDevices];&#xD;&#xA;&#xD;&#xA;For alan478's BLE question :&#xD;&#xA;&#xD;&#xA;The Core Bluetooth framework provides the classes needed for your iOS and Mac apps to communicate with devices that are equipped with Bluetooth low energy wireless technology. You can take a look this tutorial :&#xD;&#xA;&#xD;&#xA;http://www.raywenderlich.com/52080/introduction-core-bluetooth-building-heart-rate-monitor&#xD;&#xA;&#xD;&#xA;and BLE code snippet is :&#xD;&#xA;&#xD;&#xA;    // In this case you need to tell UUID for serching specific device&#xD;&#xA;    CBUUID *hrate = [CBUUID UUIDWithString:@""1800""];&#xD;&#xA;    &#xD;&#xA;    // Create a dictionary for passing down to the scan with service method&#xD;&#xA;    NSDictionary *scanOptions = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:NO] forKey:CBCentralManagerScanOptionAllowDuplicatesKey];&#xD;&#xA;    &#xD;&#xA;    // Tell the central manager (cm) to scan for the heart rate service&#xD;&#xA;    [cm scanForPeripheralsWithServices:[NSArray arrayWithObject:hrate] options:scanOptions]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Please read this document on developer.apple.com :**&#xD;&#xA;&#xD;&#xA; https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/BestPracticesForInteractingWithARemotePeripheralDevice/BestPracticesForInteractingWithARemotePeripheralDevice.html&#xD;&#xA;&#xD;&#xA;**here is an interesting paragraph for you :**&#xD;&#xA;&#xD;&#xA;Explore a Peripheral’s Data Wisely&#xD;&#xA;A peripheral device may have many more services and characteristics than you may be interested in when you are developing an app to fulfill a specific use case. Discovering all of a peripheral’s services and associated characteristics can negatively affect battery life and your app’s performance. Therefore, you should look for and discover only the services and associated characteristics your app needs.&#xD;&#xA;&#xD;&#xA;For example, imagine that you are connected to a peripheral device that has many services available, but your app needs access to only two of them. You can look for and discover these two services only, by passing in an array of their service UUIDs (represented by CBUUID objects) to the discoverServices: method of the CBPeripheral class, like this:&#xD;&#xA;&#xD;&#xA;    [peripheral discoverServices:@[firstServiceUUID, secondServiceUUID]];&#xD;&#xA;&#xD;&#xA;After you have discovered the two services you are interested in, you can similarly look for and discover only the characteristics of these services that you are interested in. Again, simply pass in an array of the UUIDs that identify the characteristics you want to discover (for each service) to the discoverCharacteristics:forService: method of the CBPeripheral class.&#xD;&#xA;&#xD;&#xA;**Also there is this comment :**&#xD;&#xA;&#xD;&#xA;""think Apple forbids this thing. We can only get list of Devices with specific CBUUID. so if you want to list all the devices(same as the Bluetooth settings does natively) then It is not possible. Please correct me if i am wrong. –  Mrug Mar 11 at 13:24""&#xD;&#xA;&#xD;&#xA;under this question :&#xD;&#xA;&#xD;&#xA;https://stackoverflow.com/q/10178293/4145420";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

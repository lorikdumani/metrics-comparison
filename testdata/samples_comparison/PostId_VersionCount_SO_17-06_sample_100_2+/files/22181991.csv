Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
59542018;22181991;2700593;2;e5c4ee7b-7c94-4b8f-bf2b-796d70ecee27;2014-03-04 20:12:42.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;
59542888;22181991;2700593;5;c889aedb-632b-412e-b9e0-166e1d8f0d04;2014-03-04 20:24:26.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 43 characters in body
59543313;22181991;2700593;5;d4c9abc2-88b7-4a79-9fa7-acdfcd72397d;2014-03-04 20:29:48.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;EDIT: Pardon the code if its messy but I could't edit the code as this was a run-time error after quite a long run-time so was afraid wouldn't be able to recreate it. The Exception message is not correct and just a reminder for myself. The code after the exception is code i forgot to comment out.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 43 characters in body
59543738;22181991;2700593;5;10c3a673-9c02-44da-9f23-d501424f31ae;2014-03-04 20:35:27.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;EDIT: Pardon the code if it's messy but I couldn't edit it as this was a run-time error after quite a long run-time so was afraid wouldn't be able to recreate it. The Exception message is not correct and just a reminder for myself. The code after the exception is code I forgot to comment out before starting this particular run.&#xD;&#xA;&#xD;&#xA;EDIT 2: I am building and running in **Release Mode**.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 58 characters in body
59544386;22181991;2700593;5;e138062d-4fd3-4c4a-978c-a25799c12a69;2014-03-04 20:43:49.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;`UpdateBalance_PositionOpenned()` is not being called in a loop, but is being called as part of a more complex event driven procedure that runs on the ticks of a timer (order of milliseconds)&#xD;&#xA;&#xD;&#xA;EDIT: Pardon the code if it's messy but I couldn't edit it as this was a run-time error after quite a long run-time so was afraid wouldn't be able to recreate it. The Exception message is not correct and just a reminder for myself. The code after the exception is code I forgot to comment out before starting this particular run.&#xD;&#xA;&#xD;&#xA;EDIT 2: I am building and running in **Release Mode**.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 195 characters in body
59544903;22181991;2700593;5;159a3c31-ef08-4600-9758-8e4ea94eb84f;2014-03-04 20:50:51.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;`UpdateBalance_PositionOpenned()` is not being called in a loop, but is being called as part of a more complex event driven procedure that runs on the ticks of a timer (order of milliseconds)&#xD;&#xA;&#xD;&#xA;EDIT: Pardon the code if it's messy but I couldn't edit it as this was a run-time error after quite a long run-time so was afraid wouldn't be able to recreate it. The Exception message is not correct and just a reminder for myself. The code after the exception is code I forgot to comment out before starting this particular run.&#xD;&#xA;&#xD;&#xA;EDIT 2: I am building and running in **Release Mode**.&#xD;&#xA;&#xD;&#xA;EDIT 3: Pardon my ignorance, but it would seem that I am in fact running in a multi-threaded environment since this code is being called as part of a more complex object method that gets executed on the ticks (Events) of a timer. Would it possible to ask the timer to wait until all code inside its event handler has finished before it can tick again?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 195 characters in body
59547144;22181991;2700593;5;08dfebfa-83d7-4bf5-9f38-bbd5cb4d1d0f;2014-03-04 21:22:55.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;`UpdateBalance_PositionOpenned()` is not being called in a loop, but is being called as part of a more complex event driven procedure that runs on the ticks of a timer (order of milliseconds)&#xD;&#xA;&#xD;&#xA;**EDIT:** Pardon the code if it's messy but I couldn't edit it as this was a run-time error after quite a long run-time so was afraid wouldn't be able to recreate it. The Exception message is not correct and just a reminder for myself. The code after the exception is code I forgot to comment out before starting this particular run.&#xD;&#xA;&#xD;&#xA;**EDIT 2:** I am building and running in **Release Mode**.&#xD;&#xA;&#xD;&#xA;**EDIT 3:** Pardon my ignorance, but it would seem that I am in fact running in a multi-threaded environment since this code is being called as part of a more complex object method that gets executed on the ticks (Events) of a timer. Would it possible to ask the timer to wait until all code inside its event handler has finished before it can tick again?&#xD;&#xA;&#xD;&#xA;**EDIT 4:** Since this has been established to be a multi-threading issue; I will try to give wider context to arrive at an optimized solution.&#xD;&#xA;&#xD;&#xA;I have a `Timer` object, which executes the following on every tick:&#xD;&#xA;&#xD;&#xA; 1. Run a background worker to read data from file&#xD;&#xA; 2. When background worker finishes reading data from file, raise an&#xD;&#xA;    Event&#xD;&#xA; 3. In the event handler, run object code that calls the method below&#xD;&#xA;    (in the image) and other multiple routines, including GUI updates.&#xD;&#xA;&#xD;&#xA;I suppose this problem can be avoided by using the timer Tick events to read the from file but changing this will break other parts of my code.&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 622 characters in body
59548760;22181991;2700593;5;8b1ed83d-a142-459e-a027-0b8cc0471a3a;2014-03-04 21:47:29.0;"Would anyone care to explain to me how the value of `this.oBalance.QouteBalance` is evaluated to be true for being less than zero when it clearly isn't? Please see image below.&#xD;&#xA;&#xD;&#xA;Am I missing something fundamental when it comes to comparing doubles in C#??&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;	public double QouteBalance { get; set; }&#xD;&#xA;&#xD;&#xA;`UpdateBalance_PositionOpenned()` is not being called in a loop, but is being called as part of a more complex event driven procedure that runs on the ticks of a timer (order of milliseconds)&#xD;&#xA;&#xD;&#xA;**EDIT:** Pardon the code if it's messy but I couldn't edit it as this was a run-time error after quite a long run-time so was afraid wouldn't be able to recreate it. The Exception message is not correct and just a reminder for myself. The code after the exception is code I forgot to comment out before starting this particular run.&#xD;&#xA;&#xD;&#xA;**EDIT 2:** I am building and running in **Release Mode**.&#xD;&#xA;&#xD;&#xA;**EDIT 3:** Pardon my ignorance, but it would seem that I am in fact running in a multi-threaded environment since this code is being called as part of a more complex object method that gets executed on the ticks (Events) of a timer. Would it possible to ask the timer to wait until all code inside its event handler has finished before it can tick again?&#xD;&#xA;&#xD;&#xA;**EDIT 4:** Since this has been established to be a multi-threading issue; I will try to give wider context to arrive at an optimized solution.&#xD;&#xA;&#xD;&#xA;I have a `Timer` object, which executes the following on every tick:&#xD;&#xA;&#xD;&#xA; 1. Run a background worker to read data from file&#xD;&#xA; 2. When background worker finishes reading data from file, raise an&#xD;&#xA;    Event&#xD;&#xA; 3. In the event handler, run object code that calls the method below&#xD;&#xA;    (in the image) and other multiple routines, including GUI updates.&#xD;&#xA;&#xD;&#xA;I suppose this problem can be avoided by using the timer Tick events to read the from file but changing this will break other parts of my code.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/Ufw3f.jpg";;added 2 characters in body

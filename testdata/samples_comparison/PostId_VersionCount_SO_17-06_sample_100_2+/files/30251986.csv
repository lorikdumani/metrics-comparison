Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
90517921;30251986;2659313;2;926cf8b8-9e89-4cb8-8259-63665a4720f7;2015-05-15 05:19:26.0;"    sample s= (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample s= (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.";;
90518144;30251986;2659313;5;5e2306f9-427c-4bf0-9c12-bec6e063b4e7;2015-05-15 05:24:39.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.";;added 53 characters in body
90518510;30251986;2659313;5;682e95b7-7065-468a-9a80-8c87e0a7a4a0;2015-05-15 05:32:30.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.&#xD;&#xA;&#xD;&#xA;> can i initiate an object of a class through a statement?&#xD;&#xA;&#xD;&#xA;Yes, use `sample c(10, 20)`&#xD;&#xA;&#xD;&#xA;In C++11 onwards, I believe a syntax like `sample c = {10, 20}` is possible, but I don't know further details.";;added 91 characters in body
90519018;30251986;2659313;5;876d64c9-7f02-4d1a-88f0-a94dae9dd88c;2015-05-15 05:42:28.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.&#xD;&#xA;&#xD;&#xA;> can i initiate an object of a class through a statement?&#xD;&#xA;&#xD;&#xA;Yes, use `sample c(10, 20)`&#xD;&#xA;&#xD;&#xA;In C++11 onwards, a syntax like `sample c = {10, 20}` is possible using [`std::initializer_list`][1] as constructor argument.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://en.cppreference.com/w/cpp/utility/initializer_list";;added 95 characters in body
90519317;30251986;2659313;5;addf1fe1-5496-49ec-9513-9ab6c4cea3db;2015-05-15 05:48:16.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.&#xD;&#xA;&#xD;&#xA;> can i initiate an object of a class through a statement?&#xD;&#xA;&#xD;&#xA;Yes, use `sample c(10, 20)`&#xD;&#xA;&#xD;&#xA;In C++11 onwards, a syntax like `sample c = {10, 20}` is possible using [`std::initializer_list`][1] as constructor argument.&#xD;&#xA;&#xD;&#xA;	sample(std::initializer_list<int> l) : a(0), b(0) {&#xD;&#xA;		if(l.size() > 2U) { /* throw */ }&#xD;&#xA;		int i = 0;&#xD;&#xA;		for(int x : l) {&#xD;&#xA;			if(i == 0) a = x;&#xD;&#xA;			else if(i == 1) b = x;&#xD;&#xA;			++i;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;    ...&#xD;&#xA;    sample c = {10,20};&#xD;&#xA;&#xD;&#xA;[Live demo here][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://en.cppreference.com/w/cpp/utility/initializer_list&#xD;&#xA;  [2]: http://ideone.com/dKx6Y3";;added 242 characters in body
90519599;30251986;2659313;5;05ed5ca8-bd5d-487b-b21a-3af76e849756;2015-05-15 05:54:24.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.&#xD;&#xA;&#xD;&#xA;> can i initiate an object of a class through a statement?&#xD;&#xA;&#xD;&#xA;Yes, use `sample c(10, 20)`&#xD;&#xA;&#xD;&#xA;In C++11 onwards, a syntax like `sample c = {10, 20}` is possible using [`std::initializer_list`][1] as constructor argument.&#xD;&#xA;&#xD;&#xA;	sample(std::initializer_list<int> l) : a(0), b(0) {&#xD;&#xA;		if(l.size() > 2U) { /* throw */ }&#xD;&#xA;		int i = 0;&#xD;&#xA;		for(int x : l) {&#xD;&#xA;			if(i == 0) { a = x; b = x; }&#xD;&#xA;			else if(i == 1) b = x;&#xD;&#xA;			++i;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;    ...&#xD;&#xA;    sample c = {10,20};&#xD;&#xA;&#xD;&#xA;[Live demo here][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://en.cppreference.com/w/cpp/utility/initializer_list&#xD;&#xA;  [2]: http://ideone.com/dKx6Y3";;added 11 characters in body
90526758;30251986;2659313;5;eefd9c52-bff6-4498-a912-067a7e76d6dc;2015-05-15 07:53:17.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.&#xD;&#xA;&#xD;&#xA;> can i initiate an object of a class through a statement?&#xD;&#xA;&#xD;&#xA;Yes, use `sample c(10, 20)`&#xD;&#xA;&#xD;&#xA;In C++11 onwards, a syntax like `sample c = {10, 20}` is possible using [`std::initializer_list`][1] as constructor argument.&#xD;&#xA;&#xD;&#xA;	sample(std::initializer_list<int> l) : a(0), b(0) {&#xD;&#xA;		if(l.size() > 2U) { /* throw */ }&#xD;&#xA;		int i = 0;&#xD;&#xA;		for(int x : l) {&#xD;&#xA;			if(i == 0) { a = x; b = x; }&#xD;&#xA;			else if(i == 1) b = x;&#xD;&#xA;			++i;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;    ...&#xD;&#xA;    sample c = {10,20};&#xD;&#xA;&#xD;&#xA;[Live demo here][2]&#xD;&#xA;___&#xD;&#xA;**EDIT:**<BR> From kind comment of [Matt McNabb][3], because type `sample` in your case is an aggregate, you don't even need to implement the `initializer_list` constructor. It will works as-is if `sample c = {10,20};` is used.&#xD;&#xA;&#xD;&#xA;[Live demo here][4]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://en.cppreference.com/w/cpp/utility/initializer_list&#xD;&#xA;  [2]: http://ideone.com/dKx6Y3&#xD;&#xA;  [3]: http://stackoverflow.com/users/1505939/matt-mcnabb&#xD;&#xA;  [4]: http://ideone.com/iwx6Ix";;added 349 characters in body
90528989;30251986;2659313;8;beff6559-0500-4dda-9251-49822a5f9e8d;2015-05-15 08:29:07.0;"    sample c = 10,20;&#xD;&#xA;&#xD;&#xA;This will not compiled. Note that `,` here is not operator but a declaration separator and expects something like `sample c = 10, d = 20`&#xD;&#xA;&#xD;&#xA;    sample c = (10,20);&#xD;&#xA;&#xD;&#xA;`,` operator will be executed and 10 and 20 will be evaluated respectively with later as result. The statment is equivalent to sample `s(20);`&#xD;&#xA;&#xD;&#xA;> Would the above program work?&#xD;&#xA;&#xD;&#xA;It will not compile.&#xD;&#xA;&#xD;&#xA;`sample c = (10,20)` will compile and run but would not call the constructor with 2 arguments as you might expect.&#xD;&#xA;&#xD;&#xA;> can i initiate an object of a class through a statement?&#xD;&#xA;&#xD;&#xA;Yes, use `sample c(10, 20)`&#xD;&#xA;&#xD;&#xA;In C++11 onwards, a syntax like `sample c = {10, 20}` is possible using [`std::initializer_list`][1] as constructor argument.&#xD;&#xA;&#xD;&#xA;	sample(std::initializer_list<int> l) : a(0), b(0) {&#xD;&#xA;		if(l.size() > 2U) { /* throw */ }&#xD;&#xA;		int i = 0;&#xD;&#xA;		for(int x : l) {&#xD;&#xA;			if(i == 0) { a = x; b = x; }&#xD;&#xA;			else if(i == 1) b = x;&#xD;&#xA;			++i;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;    ...&#xD;&#xA;    sample c = {10,20};&#xD;&#xA;&#xD;&#xA;[Live demo here][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://en.cppreference.com/w/cpp/utility/initializer_list&#xD;&#xA;  [2]: http://ideone.com/dKx6Y3";;Rollback to [05ed5ca8-bd5d-487b-b21a-3af76e849756]

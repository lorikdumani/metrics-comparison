Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
42174194;17110114;2444320;2;5c992c2d-2ede-4a5c-8a7f-2a71be4bb567;2013-06-14 13:52:18.0;"&#xD;&#xA;&#xD;&#xA;I am working on a WPF application where I have to create some sort of relationship between a treeview and a grid. The idea is to highlight a row with a id equal to the &#xD;&#xA;treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;            foreach (var c in msgField)&#xD;&#xA;            {&#xD;&#xA;                if (c.Id == id)&#xD;&#xA;                {&#xD;&#xA;                    this._displayColor = Brushes.CadetBlue;&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;               DisplayColor = Brushes.White;&#xD;&#xA;            }&#xD;&#xA;        }	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children,  Mode=TwoWay}""  &#xD;&#xA;                      &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?&#xD;&#xA;&#xD;&#xA;Thank you all.";;
42176403;17110114;2444320;5;f9b6efe0-5d4e-4893-84a8-916119cfba4e;2013-06-14 14:34:33.0;"I am working on a WPF application MVVM pattern  where I have to create some sort of relationship between a treeview and a grid. The idea is to highlight a row with a id equal to the &#xD;&#xA;treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;            foreach (var c in msgField)&#xD;&#xA;            {&#xD;&#xA;                if (c.Id == id)&#xD;&#xA;                {&#xD;&#xA;                    this._displayColor = Brushes.CadetBlue;&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;               DisplayColor = Brushes.White;&#xD;&#xA;            }&#xD;&#xA;        }	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children,  Mode=TwoWay}""  &#xD;&#xA;                      &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?&#xD;&#xA;&#xD;&#xA;Thank you all.";;"deleted 2 characters in body; edited tags"
42178528;17110114;2444320;5;f664442d-a392-4906-8566-0fc63870a37e;2013-06-14 15:13:11.0;"I am working on a WPF application MVVM pattern  where I have to create some sort of relationship between a treeview and a grid. The idea is to highlight a row with a id equal to the &#xD;&#xA;treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;            foreach (var c in msgField)&#xD;&#xA;            {&#xD;&#xA;                if (c.Id == id)&#xD;&#xA;                {&#xD;&#xA;                    this._displayColor = Brushes.CadetBlue;&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;               DisplayColor = Brushes.White;&#xD;&#xA;            }&#xD;&#xA;        }	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children,  Mode=TwoWay}""  &#xD;&#xA;                      &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;                <DataGrid.Columns >&#xD;&#xA;                    <DataGridTextColumn Header=""ID"" Binding=""{Binding Id}"" Width=""*""  />      <!--Foreground=""{Binding Path=DisplayColor}-->&#xD;&#xA;&#xD;&#xA;                    <DataGridTextColumn Header=""Code"" Binding=""{Binding Code}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Field Name"" Binding=""{Binding Name}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Position"" Binding=""{Binding Position}"" Width=""*""   />&#xD;&#xA;                    <DataGridTextColumn Header=""Length"" Binding=""{Binding Length}"" Width=""*""  />&#xD;&#xA;	 </DataGrid.Columns>&#xD;&#xA;</DataGrid>	&#xD;&#xA;					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?&#xD;&#xA;&#xD;&#xA;Thank you all.";;xaml update
42180063;17110114;2444320;5;417f40db-6800-4f07-b0bb-e49fec32553f;2013-06-14 15:43:15.0;"I am working on a WPF application MVVM pattern  where I have to create some sort of relationship between a treeview and a grid. The idea is to highlight a row with a id equal to the &#xD;&#xA;treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;             msgField.Where(item =>&#xD;&#xA;                {&#xD;&#xA;                    if (item.Id == id)&#xD;&#xA;                    {&#xD;&#xA;                        DisplayColor = Brushes.CadetBlue;&#xD;&#xA;                    }&#xD;&#xA;                    DisplayColor = Brushes.Black;&#xD;&#xA;                   &#xD;&#xA;                });&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children,  Mode=TwoWay}""  &#xD;&#xA;                      &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;                <DataGrid.Columns >&#xD;&#xA;                    <DataGridTextColumn Header=""ID"" Binding=""{Binding Id}"" Width=""*""  />      <!--Foreground=""{Binding Path=DisplayColor}-->&#xD;&#xA;&#xD;&#xA;                    <DataGridTextColumn Header=""Code"" Binding=""{Binding Code}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Field Name"" Binding=""{Binding Name}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Position"" Binding=""{Binding Position}"" Width=""*""   />&#xD;&#xA;                    <DataGridTextColumn Header=""Length"" Binding=""{Binding Length}"" Width=""*""  />&#xD;&#xA;	 </DataGrid.Columns>&#xD;&#xA;</DataGrid>	&#xD;&#xA;					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?&#xD;&#xA;&#xD;&#xA;Thank you all.";;changed foreach to linq
42183419;17110114;2444320;5;0cfa65aa-486a-44de-8da8-fe9a2640f864;2013-06-14 16:52:54.0;"I am working on a WPF application MVVM pattern  where I have to create some sort of relationship between a treeview and a grid. The idea is to highlight a row with a id equal to the &#xD;&#xA;treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;             if (msgField.Any())&#xD;&#xA;                DisplayColor = msgField.Last().Id == id ? Brushes.CadetBlue : Brushes.Black;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children,  Mode=TwoWay}""  &#xD;&#xA;                      &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;                <DataGrid.Columns >&#xD;&#xA;                    <DataGridTextColumn Header=""ID"" Binding=""{Binding Id}"" Width=""*""  />      <!--Foreground=""{Binding Path=DisplayColor}-->&#xD;&#xA;&#xD;&#xA;                    <DataGridTextColumn Header=""Code"" Binding=""{Binding Code}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Field Name"" Binding=""{Binding Name}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Position"" Binding=""{Binding Position}"" Width=""*""   />&#xD;&#xA;                    <DataGridTextColumn Header=""Length"" Binding=""{Binding Length}"" Width=""*""  />&#xD;&#xA;	 </DataGrid.Columns>&#xD;&#xA;</DataGrid>	&#xD;&#xA;					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?&#xD;&#xA;&#xD;&#xA;Thank you all.";;linq update
42197667;17110114;2444320;5;326c784a-16c4-4b35-92f6-34710ffea4c0;2013-06-14 23:56:52.0;"I am working on a WPF application MVVM pattern  where I have to create some sort of relationship between a treeview and a grid. The idea is to highlight a row with a id equal to the &#xD;&#xA;treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;             if (msgField.Any())&#xD;&#xA;                DisplayColor = msgField.Last().Id == id ? Brushes.CadetBlue : Brushes.Black;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children[0].Children,  Mode=TwoWay}""   &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged""&#xD;&#xA;                     SelectedValuePath=""Id"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <DataGrid Name=""Datagrid""    ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField}""&#xD;&#xA;                        AlternatingRowBackground =""{Binding Path=DisplayColor}"" RowBackground=""{Binding Path=DisplayColor}"" Background=""CadetBlue"">&#xD;&#xA;                <DataGrid.Columns >&#xD;&#xA;                    <DataGridTextColumn Header=""ID"" Binding=""{Binding Id}"" Width=""*""  />      <!--Foreground=""{Binding Path=DisplayColor}-->&#xD;&#xA;&#xD;&#xA;                    <DataGridTextColumn Header=""Code"" Binding=""{Binding Code}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Field Name"" Binding=""{Binding Name}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Position"" Binding=""{Binding Position}"" Width=""*""   />&#xD;&#xA;                    <DataGridTextColumn Header=""Length"" Binding=""{Binding Length}"" Width=""*""  />&#xD;&#xA;	 </DataGrid.Columns>&#xD;&#xA;</DataGrid>	&#xD;&#xA;					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?&#xD;&#xA;&#xD;&#xA;Thank you all.";;added 130 characters in body
42197927;17110114;305637;5;66666ca7-80dd-4e50-bd95-2f954d0a35aa;2013-06-15 00:11:28.0;"I am working on a WPF application MVVM pattern  where I have to create some sort of relationship between a `TreeView` and a `Grid`. The idea is to highlight a row with a id equal to the treenode id. &#xD;&#xA;&#xD;&#xA;Display color property&#xD;&#xA;&#xD;&#xA;        public Brush DisplayColor&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _displayColor = value;&#xD;&#xA;                NotifyPropertyChanged(""DisplayColor"");&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            get { return _displayColor; }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;Select TreeNode value.id &#xD;&#xA;	    &#xD;&#xA;		private MessageElementViewModel _selectedMessageElement;&#xD;&#xA;        public MessageElementViewModel SelectedMessageElement&#xD;&#xA;        {&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                if (_selectedMessageElement == value) return;&#xD;&#xA;                this._selectedMessageElement = value;&#xD;&#xA;                SearchGrid(value.Id, messageFields);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return this._selectedMessageElement;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;// search matching Id in the grid&#xD;&#xA;	  &#xD;&#xA;	     public void SearchGrid(int id, ObservableCollection<MessageFieldViewModel> msgField)&#xD;&#xA;        {&#xD;&#xA;             if (msgField.Any())&#xD;&#xA;                DisplayColor = msgField.Last().Id == id ? Brushes.CadetBlue : Brushes.Black;&#xD;&#xA;        }&#xD;&#xA;	&#xD;&#xA;XAML: Call the display color property to highlight a matching id.&#xD;&#xA;DataGrid&#xD;&#xA;        <DataGrid   ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField, Mode=TwoWay}""&#xD;&#xA;                        RowBackground=""{Binding Path=DisplayColor}"">&#xD;&#xA;&#xD;&#xA;TreeView:&#xD;&#xA;&#xD;&#xA;          <TreeView Margin=""644,137,6,6"" Grid.RowSpan=""2"" ItemsSource=""{Binding MessageElements[0].Children[0].Children,  Mode=TwoWay}""   &#xD;&#xA;                      SelectedItemChanged=""TreeView_OnSelectedItemChanged""&#xD;&#xA;                     SelectedValuePath=""Id"">&#xD;&#xA;					  &#xD;&#xA;Code Behind for treeview select item;&#xD;&#xA;&#xD;&#xA;        readonly MainWindowModel _mainWindowModel = new MainWindowModel();&#xD;&#xA;        &#xD;&#xA;        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)&#xD;&#xA;        {&#xD;&#xA;            if (_mainWindowModel != null)&#xD;&#xA;                _mainWindowModel.SelectedMessageElement = (MessageElementViewModel)e.NewValue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <DataGrid Name=""Datagrid""    ItemsSource=""{Binding MessageFields}"" Margin=""4,0,380,6"" Grid.Row=""2"" AutoGenerateColumns=""False""  IsReadOnly=""True""   SelectedValue=""{Binding SelectedMessageField}""&#xD;&#xA;                        AlternatingRowBackground =""{Binding Path=DisplayColor}"" RowBackground=""{Binding Path=DisplayColor}"" Background=""CadetBlue"">&#xD;&#xA;                <DataGrid.Columns >&#xD;&#xA;                    <DataGridTextColumn Header=""ID"" Binding=""{Binding Id}"" Width=""*""  />      <!--Foreground=""{Binding Path=DisplayColor}-->&#xD;&#xA;&#xD;&#xA;                    <DataGridTextColumn Header=""Code"" Binding=""{Binding Code}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Field Name"" Binding=""{Binding Name}"" Width=""*"" />&#xD;&#xA;                    <DataGridTextColumn Header=""Position"" Binding=""{Binding Position}"" Width=""*""   />&#xD;&#xA;                    <DataGridTextColumn Header=""Length"" Binding=""{Binding Length}"" Width=""*""  />&#xD;&#xA;	 </DataGrid.Columns>&#xD;&#xA;</DataGrid>	&#xD;&#xA;					  &#xD;&#xA;Why is my is my display color property is not working for matching Ids?";;deleted 16 characters in body

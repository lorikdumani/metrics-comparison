Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
84010321;28575165;4577858;2;09e1435a-26e7-4d0d-9f93-3fff7f25dc3f;2015-02-18 02:55:22.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before MBean has an ID. Try doing projectDao.save(MBean); first or use cascade annotation on an MBean collection on the Project class....";;
84011771;28575165;4577858;5;d7e10e84-cacb-47e3-b303-868321f858b4;2015-02-18 03:26:24.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before Mean has an ID. Try doing projectDao.save(mean); first or use cascade annotation on a Mean collection on the Project class....&#xD;&#xA;&#xD;&#xA;like so...&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;      Mean mean = new Mean();&#xD;&#xA;        mean.setVariable(variable);&#xD;&#xA;        mean.setBelief(belief);&#xD;&#xA;        **projectDao.save(mean);** //first option&#xD;&#xA;        &#xD;&#xA;        // I can't do this because variable and belief are transient and have no ID yet&#xD;&#xA;        //MeanPK meanPk = new MeanPK(variableId, beliefId);&#xD;&#xA;        //mean.setPk(meanPk);&#xD;&#xA;        &#xD;&#xA;        belief.getMeans().add(mean);&#xD;&#xA;        &#xD;&#xA;        project.getVariables().add(variable);&#xD;&#xA;        project.getBeliefs().add(belief);&#xD;&#xA;        &#xD;&#xA;        projectDao.save(project);&#xD;&#xA;    &#xD;&#xA;    //second option&#xD;&#xA;    &#xD;&#xA;    //or in your method declaration section in your Project class remove &#xD;&#xA;    &#xD;&#xA;    getVariables().add(variable) &&#xD;&#xA;    getBeliefs().add(belief)&#xD;&#xA;    &#xD;&#xA;    //as well as their associated variable declarations and add&#xD;&#xA;    &#xD;&#xA;     @OneToMany(cascade = CascadeType.ALL, mappedBy = ""meanId"") &#xD;&#xA;    //add to variable declarations section&#xD;&#xA;        private Collection<Means> meansCollection;&#xD;&#xA;    //and add the following method under getter/setter section&#xD;&#xA;    &#xD;&#xA;        @XmlTransient&#xD;&#xA;        public Collection<Mean> getMeansCollection() {&#xD;&#xA;            return meansCollection;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    In the Project class constructor do the following initialization of the MeanCollection&#xD;&#xA;    &#xD;&#xA;    meansCollection = new ArrayList();&#xD;&#xA;    &#xD;&#xA;    now your call simply becomes &#xD;&#xA;    &#xD;&#xA;    Mean mean = new Mean();&#xD;&#xA;    mean.setVariable(variable);&#xD;&#xA;    mean.setBelief(belief);&#xD;&#xA;    &#xD;&#xA;    Project project = new Project();&#xD;&#xA;    project.getMeansCollection().add(means);&#xD;&#xA;    projectDao.save(project);&#xD;&#xA;&#xD;&#xA;";;added 1571 characters in body
84011927;28575165;4577858;5;e5857ca2-cbbf-44c3-9b17-c3eeea9fcfff;2015-02-18 03:31:33.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before Mean has an ID. Try doing projectDao.save(mean); first or use cascade annotation on a Mean collection on the Project class....&#xD;&#xA;&#xD;&#xA;like so...&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;      Mean mean = new Mean();&#xD;&#xA;        mean.setVariable(variable);&#xD;&#xA;        mean.setBelief(belief);&#xD;&#xA;        **projectDao.save(mean);** //first option&#xD;&#xA;        &#xD;&#xA;        // I can't do this because variable and belief are transient and have no ID yet&#xD;&#xA;        //MeanPK meanPk = new MeanPK(variableId, beliefId);&#xD;&#xA;        //mean.setPk(meanPk);&#xD;&#xA;        &#xD;&#xA;        belief.getMeans().add(mean);&#xD;&#xA;        &#xD;&#xA;        project.getVariables().add(variable);&#xD;&#xA;        project.getBeliefs().add(belief);&#xD;&#xA;        &#xD;&#xA;        projectDao.save(project);&#xD;&#xA;    &#xD;&#xA;    //second option&#xD;&#xA;    &#xD;&#xA;    //or in your method declaration section in your Project class remove &#xD;&#xA;    &#xD;&#xA;    getVariables().add(variable) &&#xD;&#xA;    getBeliefs().add(belief)&#xD;&#xA;    &#xD;&#xA;    //as well as their associated variable declarations and add&#xD;&#xA;    &#xD;&#xA;     @OneToMany(cascade = CascadeType.ALL, mappedBy = ""meanId"") &#xD;&#xA;    //add to variable declarations section&#xD;&#xA;        private Collection<Means> meansCollection;&#xD;&#xA;    //and add the following method under getter/setter section&#xD;&#xA;    &#xD;&#xA;        @XmlTransient&#xD;&#xA;        public Collection<Mean> getMeansCollection() {&#xD;&#xA;            return meansCollection;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    //In the Project class constructor do the following initialization of the MeanCollection&#xD;&#xA;    &#xD;&#xA;    meansCollection = new ArrayList();&#xD;&#xA;    &#xD;&#xA;    //now your call simply becomes &#xD;&#xA;    &#xD;&#xA;    Mean mean = new Mean();&#xD;&#xA;    mean.setVariable(variable);&#xD;&#xA;    mean.setBelief(belief);&#xD;&#xA;    &#xD;&#xA;    Project project = new Project();&#xD;&#xA;    project.getMeansCollection().add(means);&#xD;&#xA;    projectDao.save(project);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //4 spaces&#xD;&#xA;&#xD;&#xA;";;added 1571 characters in body
84012098;28575165;4577858;5;7f763410-4e6b-4cf3-ae39-63daa51563f2;2015-02-18 03:37:04.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before Mean has an ID. Try doing projectDao.save(mean); first or use cascade annotation on a Mean collection on the Project class....&#xD;&#xA;&#xD;&#xA;like so...&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;      Mean mean = new Mean();&#xD;&#xA;        mean.setVariable(variable);&#xD;&#xA;        mean.setBelief(belief);&#xD;&#xA;        **projectDao.save(mean);** //first option&#xD;&#xA;        &#xD;&#xA;        // I can't do this because variable and belief are transient and have no ID yet&#xD;&#xA;        //MeanPK meanPk = new MeanPK(variableId, beliefId);&#xD;&#xA;        //mean.setPk(meanPk);&#xD;&#xA;        &#xD;&#xA;        belief.getMeans().add(mean);&#xD;&#xA;        &#xD;&#xA;        project.getVariables().add(variable);&#xD;&#xA;        project.getBeliefs().add(belief);&#xD;&#xA;        &#xD;&#xA;        projectDao.save(project);&#xD;&#xA;    &#xD;&#xA;    //second option&#xD;&#xA;    &#xD;&#xA;    //or in your method declaration section in your Project class remove &#xD;&#xA;    &#xD;&#xA;    getVariables().add(variable) &&#xD;&#xA;    getBeliefs().add(belief)&#xD;&#xA;    &#xD;&#xA;    //as well as their associated variable declarations and add&#xD;&#xA;    // mappedBy foreign key constraint meanId&#xD;&#xA;     @OneToMany(cascade = CascadeType.ALL, mappedBy = ""meanId"") &#xD;&#xA;    //add to variable declarations section&#xD;&#xA;        private Collection<Means> meansCollection;&#xD;&#xA;    //and add the following method under getter/setter section&#xD;&#xA;    &#xD;&#xA;        @XmlTransient&#xD;&#xA;        public Collection<Mean> getMeansCollection() {&#xD;&#xA;            return meansCollection;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    //In the Project class constructor do the following initialization of the MeanCollection&#xD;&#xA;    &#xD;&#xA;    meansCollection = new ArrayList();&#xD;&#xA;    &#xD;&#xA;    //now your call simply becomes &#xD;&#xA;    &#xD;&#xA;    Mean mean = new Mean();&#xD;&#xA;    mean.setVariable(variable);&#xD;&#xA;    mean.setBelief(belief);&#xD;&#xA;    &#xD;&#xA;    Project project = new Project();&#xD;&#xA;    project.getMeansCollection().add(means);&#xD;&#xA;    projectDao.save(project);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    //4 spaces&#xD;&#xA;&#xD;&#xA;    ";;added 1571 characters in body
84012455;28575165;4577858;5;ef0e2c78-c0f5-4bd6-84e4-b23757cabedd;2015-02-18 03:47:45.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before Mean has an ID. Try doing projectDao.save(mean); first or use cascade annotation on a Mean collection on the Project class....&#xD;&#xA;&#xD;&#xA;like so...&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;      Mean mean = new Mean();&#xD;&#xA;        mean.setVariable(variable);&#xD;&#xA;        mean.setBelief(belief);&#xD;&#xA;        **projectDao.save(mean);** //first option&#xD;&#xA;        &#xD;&#xA;        // I can't do this because variable and belief are transient and have no ID yet&#xD;&#xA;        //MeanPK meanPk = new MeanPK(variableId, beliefId);&#xD;&#xA;        //mean.setPk(meanPk);&#xD;&#xA;        &#xD;&#xA;        belief.getMeans().add(mean);&#xD;&#xA;        &#xD;&#xA;        project.getVariables().add(variable);&#xD;&#xA;        project.getBeliefs().add(belief);&#xD;&#xA;        &#xD;&#xA;        projectDao.save(project);&#xD;&#xA;    &#xD;&#xA;    //second option&#xD;&#xA;    &#xD;&#xA;    //or in your method declaration section in your Project class remove &#xD;&#xA;    &#xD;&#xA;    getVariables().add(variable) &&#xD;&#xA;    getBeliefs().add(belief)&#xD;&#xA;    &#xD;&#xA;    //as well as their associated variable declarations and add&#xD;&#xA;    // mappedBy foreign key constraint meanId&#xD;&#xA;     @OneToMany(cascade = CascadeType.ALL, mappedBy = ""meanId"") &#xD;&#xA;    //add to variable declarations section&#xD;&#xA;        private Collection<Means> meansCollection;&#xD;&#xA;    //and add the following method under getter/setter section&#xD;&#xA;    &#xD;&#xA;        @XmlTransient&#xD;&#xA;        public Collection<Mean> getMeansCollection() {&#xD;&#xA;            return meansCollection;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    //In the Project class constructor do the following initialization of the MeanCollection&#xD;&#xA;    &#xD;&#xA;    meansCollection = new ArrayList();&#xD;&#xA;    &#xD;&#xA;    //now your call simply becomes &#xD;&#xA;    &#xD;&#xA;    Mean mean = new Mean();&#xD;&#xA;    mean.setVariable(variable);&#xD;&#xA;    mean.setBelief(belief);&#xD;&#xA;    &#xD;&#xA;    Project project = new Project();&#xD;&#xA;    project.getMeansCollection().add(means);&#xD;&#xA;    projectDao.save(project);&#xD;&#xA;&#xD;&#xA;    //Also in your MeanPK class add&#xD;&#xA;    @OneToOne(cascade = CascadeType.ALL)&#xD;&#xA;    &#xD;&#xA;    //4 spaces&#xD;&#xA;&#xD;&#xA;    ";;added 83 characters in body
84012783;28575165;4577858;5;7753ac13-aa34-4021-9037-2240daf3e5a8;2015-02-18 03:57:45.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before Mean has an ID. Try doing projectDao.save(mean); first or use cascade annotation on a Mean collection on the Project class....&#xD;&#xA;&#xD;&#xA;like so...&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;      Mean mean = new Mean();&#xD;&#xA;        mean.setVariable(variable);&#xD;&#xA;        mean.setBelief(belief);&#xD;&#xA;        **projectDao.save(mean);** //first option&#xD;&#xA;        &#xD;&#xA;        // I can't do this because variable and belief are transient and have no ID yet&#xD;&#xA;        //MeanPK meanPk = new MeanPK(variableId, beliefId);&#xD;&#xA;        //mean.setPk(meanPk);&#xD;&#xA;        &#xD;&#xA;        belief.getMeans().add(mean);&#xD;&#xA;        &#xD;&#xA;        project.getVariables().add(variable);&#xD;&#xA;        project.getBeliefs().add(belief);&#xD;&#xA;        &#xD;&#xA;        projectDao.save(project);&#xD;&#xA;    &#xD;&#xA;    //second option&#xD;&#xA;    &#xD;&#xA;    //or in your method declaration section in your Project class remove &#xD;&#xA;    &#xD;&#xA;    getVariables().add(variable) &&#xD;&#xA;    getBeliefs().add(belief)&#xD;&#xA;    &#xD;&#xA;    //as well as their associated variable declarations and add&#xD;&#xA;    // mappedBy foreign key constraint meanId&#xD;&#xA;     @OneToMany(cascade = CascadeType.ALL, mappedBy = ""meanId"") &#xD;&#xA;    //add to variable declarations section&#xD;&#xA;        private Collection<Means> meansCollection;&#xD;&#xA;    //and add the following method under getter/setter section&#xD;&#xA;    &#xD;&#xA;        @XmlTransient&#xD;&#xA;        public Collection<Mean> getMeansCollection() {&#xD;&#xA;            return meansCollection;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    //In the Project class constructor do the following initialization of the MeanCollection&#xD;&#xA;    &#xD;&#xA;    meansCollection = new ArrayList();&#xD;&#xA;    &#xD;&#xA;    //now your call simply becomes &#xD;&#xA;    &#xD;&#xA;    Mean mean = new Mean();&#xD;&#xA;    mean.setVariable(variable);&#xD;&#xA;    mean.setBelief(belief);&#xD;&#xA;    &#xD;&#xA;    Project project = new Project();&#xD;&#xA;    project.getMeansCollection().add(means);&#xD;&#xA;    projectDao.save(project);&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;    //4 spaces&#xD;&#xA;&#xD;&#xA;    ";;added 83 characters in body
84013155;28575165;4577858;5;841824e5-6612-4da0-8099-a93357d55aa4;2015-02-18 04:09:11.0;"look into using cascading annotation on your entity classes... The save operation will try to save project before Mean has an ID. Try doing projectDao.save(mean); first or use cascade annotation on a Mean collection on the Project class....&#xD;&#xA;&#xD;&#xA;like so...&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;      Mean mean = new Mean();&#xD;&#xA;        mean.setVariable(variable);&#xD;&#xA;        mean.setBelief(belief);&#xD;&#xA;        **projectDao.save(mean);** //first option&#xD;&#xA;        &#xD;&#xA;        // I can't do this because variable and belief are transient and have no ID yet&#xD;&#xA;        //MeanPK meanPk = new MeanPK(variableId, beliefId);&#xD;&#xA;        //mean.setPk(meanPk);&#xD;&#xA;        &#xD;&#xA;        belief.getMeans().add(mean);&#xD;&#xA;        &#xD;&#xA;        project.getVariables().add(variable);&#xD;&#xA;        project.getBeliefs().add(belief);&#xD;&#xA;        &#xD;&#xA;        projectDao.save(project);&#xD;&#xA;    &#xD;&#xA;    //second option&#xD;&#xA;    &#xD;&#xA;    //or in your method declaration section in your Project class remove &#xD;&#xA;    &#xD;&#xA;    getVariables().add(variable) &&#xD;&#xA;    getBeliefs().add(belief)&#xD;&#xA;    &#xD;&#xA;    //as well as their associated variable declarations and add&#xD;&#xA;    // mappedBy foreign key constraint meanId&#xD;&#xA;     @OneToMany(cascade = CascadeType.ALL, mappedBy = ""meanId"") &#xD;&#xA;    //add to variable declarations section&#xD;&#xA;        private Collection<Means> meansCollection;&#xD;&#xA;    //and add the following method under getter/setter section&#xD;&#xA;    &#xD;&#xA;        @XmlTransient&#xD;&#xA;        public Collection<Mean> getMeansCollection() {&#xD;&#xA;            return meansCollection;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    //In the Project class constructor do the following initialization of the MeanCollection&#xD;&#xA;    &#xD;&#xA;    meansCollection = new ArrayList();&#xD;&#xA;    &#xD;&#xA;    //now your call simply becomes &#xD;&#xA;    &#xD;&#xA;    Mean mean = new Mean();&#xD;&#xA;    mean.setVariable(variable);&#xD;&#xA;    mean.setBelief(belief);&#xD;&#xA;    &#xD;&#xA;    Project project = new Project();&#xD;&#xA;    project.getMeansCollection().add(means);&#xD;&#xA;    projectDao.save(project);&#xD;&#xA;&#xD;&#xA;    // Also it looks like you should be using @JoinColumns for the variable_id &              &#xD;&#xA;    // belief_id fields where each variable is actually a class variable       &#xD;&#xA;    // representation and not an Integer. In this case you will have mean_id as   &#xD;&#xA;    // the single primary key and class Variable & Belief each as a @JoinColumn  &#xD;&#xA;    // foreign key constraint&#xD;&#xA;        &#xD;&#xA;    //4 spaces&#xD;&#xA;&#xD;&#xA;    ";;added 375 characters in body

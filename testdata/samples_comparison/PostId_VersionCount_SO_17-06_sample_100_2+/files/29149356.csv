Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
86216664;29149356;3885376;2;049abaae-016c-405c-845e-f55cc9d15c10;2015-03-19 15:56:30.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists.&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1**, the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`.&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?";;
86217392;29149356;3885376;5;e50d186f-c555-4877-854c-96680d96f024;2015-03-19 16:04:19.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists.&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`.&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Windows 7";;added 15 characters in body
86217939;29149356;3885376;5;23df80af-5357-4370-96e7-0cdb96c6eca2;2015-03-19 16:11:17.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists. (absolute path = project path + specified path)&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`. (absolute path = submodule path + specified path)&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Java 7&#xD;&#xA;* Windows 7";;added 10 characters in body
86229735;29149356;3885376;5;ddcfaa6b-b8ee-40d5-92f5-5f58222acc93;2015-03-19 18:55:59.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists. (absolute path = project path + specified path)&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`. (absolute path = submodule path + specified path)&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` in `B\\B1\\` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Java 7&#xD;&#xA;* Windows 7";;added 11 characters in body
86240063;29149356;3885376;5;4f41ae9e-9e07-452b-943a-72b7df95ea82;2015-03-19 21:45:10.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists. (absolute path = project path + specified path)&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`. (absolute path = submodule path + specified path)&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` in `B\\B1\\` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Java 7&#xD;&#xA;* Windows 7&#xD;&#xA;&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;It seems to be related to **maven-filtering 1.2**:&#xD;&#xA;&#xD;&#xA;* http://maven.40175.n5.nabble.com/Apache-Maven-Assembly-Plugin-Version-2-4-1-Released-td5801647.html&#xD;&#xA;* https://jira.codehaus.org/browse/MASSEMBLY-686&#xD;&#xA;* https://jira.codehaus.org/browse/MSHARED-161&#xD;&#xA;* http://jira.codehaus.org/browse/MWAR-301";;added 316 characters in body
86266652;29149356;3885376;5;72e252ea-7b59-45cd-b2f5-8c64b1061f9b;2015-03-20 08:37:51.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists. (absolute path = project path + specified path)&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`. (absolute path = submodule path + specified path)&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` in `B\\B1\\` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Java 7&#xD;&#xA;* Windows 7&#xD;&#xA;&#xD;&#xA;-------------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Update 1:**&#xD;&#xA;&#xD;&#xA;It seems to be related to **maven-filtering 1.2** that was introduced in 2.4.1:&#xD;&#xA;&#xD;&#xA;* http://maven.40175.n5.nabble.com/Apache-Maven-Assembly-Plugin-Version-2-4-1-Released-td5801647.html&#xD;&#xA;* https://jira.codehaus.org/browse/MASSEMBLY-686&#xD;&#xA;* https://jira.codehaus.org/browse/MSHARED-161&#xD;&#xA;* http://jira.codehaus.org/browse/MWAR-301&#xD;&#xA;* http://mail-archives.apache.org/mod_mbox/maven-announce/201211.mbox/%3C1791127681.01353276825400.JavaMail.Dennis@Dennis-Dator%3E&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Update 2:**&#xD;&#xA;&#xD;&#xA;The problem is in **2.4** (older - 2.3 and newer versions - 2.4.1 work properly = using the same approach) and my code contains an workaround to work for this. So, probably the best solution will be to really change the code manually because 2.4 introduced the problems.";;added 477 characters in body
86269252;29149356;3885376;5;51f6fbbc-2872-4f10-b6d9-c41f9434d268;2015-03-20 09:19:39.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists. (absolute path = project path + specified path)&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`. (absolute path = submodule path + specified path)&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` in `B\\B1\\` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Java 7&#xD;&#xA;* Windows 7&#xD;&#xA;&#xD;&#xA;-------------&#xD;&#xA;&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;It seems to be related to **maven-filtering 1.2** that was introduced in 2.4.1:&#xD;&#xA;&#xD;&#xA;* http://maven.40175.n5.nabble.com/Apache-Maven-Assembly-Plugin-Version-2-4-1-Released-td5801647.html&#xD;&#xA;* https://jira.codehaus.org/browse/MASSEMBLY-686&#xD;&#xA;* https://jira.codehaus.org/browse/MSHARED-161&#xD;&#xA;* http://jira.codehaus.org/browse/MWAR-301&#xD;&#xA;* http://mail-archives.apache.org/mod_mbox/maven-announce/201211.mbox/%3C1791127681.01353276825400.JavaMail.Dennis@Dennis-Dator%3E&#xD;&#xA;";;deleted 291 characters in body
86277887;29149356;3885376;5;7e2e1813-b97e-4001-88de-7c0518220f99;2015-03-20 11:27:49.0;"The project has the following structure:&#xD;&#xA;&#xD;&#xA;    M&#xD;&#xA;    +---A&#xD;&#xA;    +---B&#xD;&#xA;    |   +---B1&#xD;&#xA;    |   +---B2&#xD;&#xA;    |&#xD;&#xA;    +---C&#xD;&#xA;    +---D&#xD;&#xA;&#xD;&#xA;Every folder (M,A,B,B1,B2,C,D) contains a **pom.xml** file.&#xD;&#xA;&#xD;&#xA;The pom.xml file from B1 contains the following lines:&#xD;&#xA;&#xD;&#xA;    <configuration>&#xD;&#xA;    	<filters>&#xD;&#xA;    		<filter>B/B1/PATH_TO_FILE_X</filter>&#xD;&#xA;    	</filters>&#xD;&#xA;    </configuration>&#xD;&#xA;&#xD;&#xA;Running&#xD;&#xA;&#xD;&#xA;    mvn clean install -Px -Dy -X&#xD;&#xA;&#xD;&#xA;from the M folder:&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4**, everything works **fine**. It looks for `path\\M\\B\\B1\\PATH_FO_FILE_X` and it exists. (absolute path = project path + specified path)&#xD;&#xA;&#xD;&#xA;* using assembly plugin **2.4.1** (or **2.5.3**), the **file** is **not found**. It looks for `path\\M\\B\\B1\\B\\B1\\PATH_TO_FILE_X` and there is a `java.io.FileNotFoundException`. (absolute path = submodule path + specified path)&#xD;&#xA; &#xD;&#xA;I can manually change every path that cannot be resolved, but it's too risky because some paths can be resolved in a wrong way. If there is `B\\B1\\PATH_TO_ANOTHER_FILE_X` in `B\\B1\\` it could cause problems.&#xD;&#xA;&#xD;&#xA;Is there a generic method to solve this problem (keeping backward compatibility from 2.4 to 2.4.1)?&#xD;&#xA;&#xD;&#xA;**Details:**&#xD;&#xA;&#xD;&#xA;* Maven 3.2.1&#xD;&#xA;* Java 7&#xD;&#xA;* Windows 7&#xD;&#xA;&#xD;&#xA;-------------&#xD;&#xA;&#xD;&#xA;**Update:**&#xD;&#xA;&#xD;&#xA;It seems to be related to **maven-filtering 1.2** that was introduced in 2.4.1:&#xD;&#xA;&#xD;&#xA;* http://maven.40175.n5.nabble.com/Apache-Maven-Assembly-Plugin-Version-2-4-1-Released-td5801647.html&#xD;&#xA;* https://jira.codehaus.org/browse/MASSEMBLY-686&#xD;&#xA;* https://jira.codehaus.org/browse/MSHARED-161&#xD;&#xA;* http://jira.codehaus.org/browse/MWAR-301&#xD;&#xA;* http://mail-archives.apache.org/mod_mbox/maven-announce/201211.mbox/%3C1791127681.01353276825400.JavaMail.Dennis@Dennis-Dator%3E&#xD;&#xA;&#xD;&#xA;The following line from 2.4:&#xD;&#xA;&#xD;&#xA;    <mavenFilteringVersion>1.1</mavenFilteringVersion>&#xD;&#xA;&#xD;&#xA;was replaced by &#xD;&#xA;&#xD;&#xA;    <mavenFilteringVersion>1.2</mavenFilteringVersion>&#xD;&#xA;&#xD;&#xA;in 2.4.1.";;added 179 characters in body

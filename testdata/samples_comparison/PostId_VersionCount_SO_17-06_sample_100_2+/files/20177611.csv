Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
52184222;20177611;989327;2;4852b3c5-5534-4c56-b778-ba72913f9239;2013-11-24 17:34:43.0;"Had the same problem, tried the solution above but though it worked generally, for some reason i was getting permission denial on uri content provider for some images although i had the android.permission.MANAGE_DOCUMENTS permission added propery.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;        //KITKAT&#xD;&#xA;        i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;    startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);";;
59037046;20177611;989327;5;a6a6ab3b-a56b-4d44-ba6a-f553239798e6;2014-02-26 17:11:43.0;"Had the same problem, tried the solution above but though it worked generally, for some reason i was getting permission denial on uri content provider for some images although i had the android.permission.MANAGE_DOCUMENTS permission added propery.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;//KITKAT&#xD;&#xA;&#xD;&#xA;    i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;        startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);&#xD;&#xA;&#xD;&#xA;*EDIT&#xD;&#xA;Additionaly the Android Developer API Guidelines suggest:&#xD;&#xA;&#xD;&#xA;>ACTION_OPEN_DOCUMENT is not intended to be a replacement for ACTION_GET_CONTENT. The one you should use depends on the needs of&#xD;&#xA;> your app:&#xD;&#xA;> &#xD;&#xA;> Use ACTION_GET_CONTENT if you want your app to simply read/import&#xD;&#xA;> data. With this approach, the app imports a copy of the data, such as&#xD;&#xA;> an image file.&#xD;&#xA;&#xD;&#xA;> Use ACTION_OPEN_DOCUMENT if you want your app to have&#xD;&#xA;> long term, persistent access to documents owned by a document&#xD;&#xA;> provider. An example would be a photo-editing app that lets users edit&#xD;&#xA;> images stored in a document provider.";;added 610 characters in body
59038386;20177611;989327;5;fe1fdc4c-a5d3-405c-bdd5-ff8aa9d2f6b4;2014-02-26 17:27:35.0;"Had the same problem, tried the solution above but though it worked generally, for some reason I was getting permission denial on uri content provider for some images although I had the android.permission.MANAGE_DOCUMENTS permission added properly.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;    //KITKAT&#xD;&#xA;&#xD;&#xA;    i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;        startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);&#xD;&#xA;&#xD;&#xA;*EDIT&#xD;&#xA;After update to 4.4.2 ACTION_GET_CONTENT uses the same documents view as ACTION_OPEN_DOCUMENT but you don't have to handle permissions of documents provider as described in Android API docs.&#xD;&#xA;&#xD;&#xA;**The key is NOT to convert the uri to real path, instead use openInputStream from contentResolver to do the work** and you will be able to open an image using any app from the new drawer menu. I tried Google Drive, Images, Downloads, Gallery, Photos, File Manager and even downloading from Dropbox worked.&#xD;&#xA;&#xD;&#xA;Additionaly the Android Developer API Guidelines suggest:&#xD;&#xA;&#xD;&#xA;>ACTION_OPEN_DOCUMENT is not intended to be a replacement for ACTION_GET_CONTENT. The one you should use depends on the needs of&#xD;&#xA;> your app:&#xD;&#xA;> &#xD;&#xA;> Use ACTION_GET_CONTENT if you want your app to simply read/import&#xD;&#xA;> data. With this approach, the app imports a copy of the data, such as&#xD;&#xA;> an image file.&#xD;&#xA;&#xD;&#xA;> Use ACTION_OPEN_DOCUMENT if you want your app to have&#xD;&#xA;> long term, persistent access to documents owned by a document&#xD;&#xA;> provider. An example would be a photo-editing app that lets users edit&#xD;&#xA;> images stored in a document provider.";;added 482 characters in body
59038820;20177611;989327;5;03c595d8-fa9e-45d0-82be-8a07f99ab281;2014-02-26 17:33:10.0;"Had the same problem, tried the solution above but though it worked generally, for some reason I was getting permission denial on uri content provider for some images although I had the android.permission.MANAGE_DOCUMENTS permission added properly.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;    //KITKAT&#xD;&#xA;&#xD;&#xA;    i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;        startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);&#xD;&#xA;&#xD;&#xA;*EDIT&#xD;&#xA;&#xD;&#xA;On KitKat calling ACTION_GET_CONTENT uses the same documents view as ACTION_OPEN_DOCUMENT but you don't have to handle permissions of documents provider as described in Android API docs.&#xD;&#xA;&#xD;&#xA;**The key is NOT to convert the uri to real path, instead use openInputStream from contentResolver to do the work** and you will be able to open an image using any app from the new drawer menu. I tried Google Drive, Images, Downloads, Gallery, Photos, File Manager and even downloading from Dropbox worked.&#xD;&#xA;&#xD;&#xA;Additionaly the Android Developer API Guidelines suggest:&#xD;&#xA;&#xD;&#xA;>ACTION_OPEN_DOCUMENT is not intended to be a replacement for ACTION_GET_CONTENT. The one you should use depends on the needs of&#xD;&#xA;> your app:&#xD;&#xA;> &#xD;&#xA;> Use ACTION_GET_CONTENT if you want your app to simply read/import&#xD;&#xA;> data. With this approach, the app imports a copy of the data, such as&#xD;&#xA;> an image file.&#xD;&#xA;&#xD;&#xA;> Use ACTION_OPEN_DOCUMENT if you want your app to have&#xD;&#xA;> long term, persistent access to documents owned by a document&#xD;&#xA;> provider. An example would be a photo-editing app that lets users edit&#xD;&#xA;> images stored in a document provider.";;added 482 characters in body
59204241;20177611;989327;5;9d92603b-1b16-417b-942a-4f2fa476e880;2014-02-28 11:24:17.0;"Had the same problem, tried the solution above but though it worked generally, for some reason I was getting permission denial on uri content provider for some images although I had the android.permission.MANAGE_DOCUMENTS permission added properly.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;    //KITKAT&#xD;&#xA;&#xD;&#xA;    i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;        startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);&#xD;&#xA;&#xD;&#xA;*EDIT&#xD;&#xA;Solution is use old ACTION_GET_CONTENT for older versions and EXTERNAL_CONTENT_URI for KitKat. Then depending on your app you might want to send your image URI straight to openinputStream to create image (and maybe store it locally) or use the getPath code posted below to get the path, store the path and recreate the image when launching the app (this would create Security Exception when using new Document Provider by ACTION_OPEN_DOCUMENT)&#xD;&#xA;&#xD;&#xA;Additionaly the Android Developer API Guidelines suggest:&#xD;&#xA;&#xD;&#xA;>ACTION_OPEN_DOCUMENT is not intended to be a replacement for ACTION_GET_CONTENT. The one you should use depends on the needs of&#xD;&#xA;> your app:&#xD;&#xA;> &#xD;&#xA;> Use ACTION_GET_CONTENT if you want your app to simply read/import&#xD;&#xA;> data. With this approach, the app imports a copy of the data, such as&#xD;&#xA;> an image file.&#xD;&#xA;&#xD;&#xA;> Use ACTION_OPEN_DOCUMENT if you want your app to have&#xD;&#xA;> long term, persistent access to documents owned by a document&#xD;&#xA;> provider. An example would be a photo-editing app that lets users edit&#xD;&#xA;> images stored in a document provider.";;deleted 55 characters in body
59205227;20177611;989327;5;049ca72d-0d20-4b6d-856f-a9d1cc98d779;2014-02-28 11:36:38.0;"Had the same problem, tried the solution above but though it worked generally, for some reason I was getting permission denial on uri content provider for some images although I had the android.permission.MANAGE_DOCUMENTS permission added properly.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;    //KITKAT&#xD;&#xA;&#xD;&#xA;    i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;        startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);&#xD;&#xA;&#xD;&#xA;*EDIT&#xD;&#xA;ACTION_OPEN_DOCUMENT might require you to persist permissions flags etc and generally often results in Security Exceptions...&#xD;&#xA;&#xD;&#xA;Other solution is to use the ACTION_GET_CONTENT combined with c.getContentResolver().openInputStream(selectedImageURI) which will work both on pre-KK and KK. Kitkat will use new documents view then and this solution will work with all apps like Photos, Gallery, File Explorer, Dropbox, Google Drive etc...) but remember that when using this solution you have to create image in your onActivityResult and store it on SD Card for example. Recreating this image from saved uri on next app launch would throw Security Exception on content resolver even when you add permission flags as described in Google Api docs (thats what happened when I did some testing)&#xD;&#xA;&#xD;&#xA;Additionaly the Android Developer API Guidelines suggest:&#xD;&#xA;&#xD;&#xA;>ACTION_OPEN_DOCUMENT is not intended to be a replacement for ACTION_GET_CONTENT. The one you should use depends on the needs of&#xD;&#xA;> your app:&#xD;&#xA;> &#xD;&#xA;> Use ACTION_GET_CONTENT if you want your app to simply read/import&#xD;&#xA;> data. With this approach, the app imports a copy of the data, such as&#xD;&#xA;> an image file.&#xD;&#xA;&#xD;&#xA;> Use ACTION_OPEN_DOCUMENT if you want your app to have&#xD;&#xA;> long term, persistent access to documents owned by a document&#xD;&#xA;> provider. An example would be a photo-editing app that lets users edit&#xD;&#xA;> images stored in a document provider.";;deleted 55 characters in body
91250361;20177611;1235698;5;7fbf09f1-e7b7-4598-93ed-460f01009030;2015-05-25 10:25:06.0;"Had the same problem, tried the solution above but though it worked generally, for some reason I was getting permission denial on Uri content provider for some images although I had the `android.permission.MANAGE_DOCUMENTS` permission added properly.&#xD;&#xA;&#xD;&#xA;Anyway found other solution which is to force opening image gallery instead of KITKAT documents view with :&#xD;&#xA;&#xD;&#xA;    // KITKAT&#xD;&#xA;&#xD;&#xA;    i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#xD;&#xA;        startActivityForResult(i, CHOOSE_IMAGE_REQUEST);&#xD;&#xA;&#xD;&#xA;and then load the image:&#xD;&#xA;&#xD;&#xA;    Uri selectedImageURI = data.getData();&#xD;&#xA;    input = c.getContentResolver().openInputStream(selectedImageURI);&#xD;&#xA;    			    BitmapFactory.decodeStream(input , null, opts);&#xD;&#xA;&#xD;&#xA;**EDIT**&#xD;&#xA;&#xD;&#xA;`ACTION_OPEN_DOCUMENT` might require you to persist permissions flags etc and generally often results in Security Exceptions...&#xD;&#xA;&#xD;&#xA;Other solution is to use the `ACTION_GET_CONTENT` combined with `c.getContentResolver().openInputStream(selectedImageURI)` which will work both on pre-KK and KK. Kitkat will use new documents view then and this solution will work with all apps like Photos, Gallery, File Explorer, Dropbox, Google Drive etc...) but remember that when using this solution you have to create image in your `onActivityResult()` and store it on SD Card for example. Recreating this image from saved uri on next app launch would throw Security Exception on content resolver even when you add permission flags as described in Google API docs (that's what happened when I did some testing)&#xD;&#xA;&#xD;&#xA;Additionally the Android Developer API Guidelines suggest:&#xD;&#xA;&#xD;&#xA;>ACTION_OPEN_DOCUMENT is not intended to be a replacement for ACTION_GET_CONTENT. The one you should use depends on the needs of&#xD;&#xA;> your app:&#xD;&#xA;> &#xD;&#xA;> Use ACTION_GET_CONTENT if you want your app to simply read/import&#xD;&#xA;> data. With this approach, the app imports a copy of the data, such as&#xD;&#xA;> an image file.&#xD;&#xA;&#xD;&#xA;> Use ACTION_OPEN_DOCUMENT if you want your app to have&#xD;&#xA;> long term, persistent access to documents owned by a document&#xD;&#xA;> provider. An example would be a photo-editing app that lets users edit&#xD;&#xA;> images stored in a document provider.";;added 10 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
45824971;18397076;139985;2;8ef01cf8-3a24-44d5-b36c-894434264a50;2013-08-23 07:18:42.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by Object.toString() is the objects ""identity hashcode"".  It may or may not be related to the object's current address.&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call `System.identityHashcode(obj)`.";;
45825585;18397076;139985;5;a419107e-7402-4d04-8717-5e3fe93515dc;2013-08-23 07:30:40.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the objects ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs do not say how the number is calculated.  It id (deliberately) left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) the object's address, it will be the address at the time when the hashcode was first accessed ... which could be different to its current address, and *will* be different if the GC has moved the object!&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call `System.identityHashcode(obj)`.";;added 307 characters in body
45826220;18397076;139985;5;eb926c45-7cd9-4716-93f2-e29305aebce8;2013-08-23 07:41:19.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) the object's address, it will be the address at the time when the hashcode was first accessed ... which could be different to its current address, and *will* be different if the GC has moved the object!&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call `System.identityHashcode(obj)`.";;added 19 characters in body
45826890;18397076;139985;5;deb606cc-839b-4c50-be0a-642b851f7021;2013-08-23 07:54:07.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) the object's address, it will be the address at the time when the hashcode was first accessed ... which could be different to its current address, and *will* be different if the GC has moved the object!&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call `System.identityHashcode(obj)`.&#xD;&#xA;&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;If you really want an object's current address, you can get it using JNI and a native method (and some abstraction breaking), or by using methods in the `Unsafe` class.  But beware that both of these approaches are non-portable ... and that the object addresses that they give you liable to change.";;added 299 characters in body
69991116;18397076;139985;5;c222e6b1-c1b4-40c1-a2cc-221c85409d23;2014-07-23 22:31:00.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) the object's address, it will be the address at the time when the hashcode was first accessed ... which could be different to its current address, and *will* be different if the GC has moved the object!&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call [`System.identityHashCode(obj)`][1].&#xD;&#xA;&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;If you really want an object's current address, you can get it using JNI and a native method (and some abstraction breaking), or by using methods in the `Unsafe` class.  But beware that both of these approaches are non-portable ... and that the object addresses that they give you liable to change.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#identityHashCode-java.lang.Object-";;added 115 characters in body
73577249;18397076;139985;5;791d8cd9-44aa-4072-a285-fad0f6ac1b3e;2014-09-16 03:28:30.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) an object address, it will be the object's address at the time when the hashcode was first accessed ... which could be different to its current address, and *will* be different if the GC has moved the object!&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call [`System.identityHashCode(obj)`][1].&#xD;&#xA;&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;If you really want an object's current address, you can get it using JNI and a native method (and some abstraction breaking), or by using methods in the `Unsafe` class.  But beware that both of these approaches are non-portable ... and that the object addresses that they give you are liable to ""break"" when the GC runs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#identityHashCode-java.lang.Object-";;added 6 characters in body
102652496;18397076;139985;5;c2ed3423-dd54-4f4e-9eae-56531e7a9daa;2015-10-26 07:48:08.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) an object address, it will be the object's address at the time when the hashcode was first accessed ... which could be different to its current address, and *will* be different if the GC has moved the object!&#xD;&#xA;&#xD;&#xA;  - On a 64bit JVM (with a large enough heap size / not using compressed oops) addresses won't fit into an identity hashcode number&#xD;&#xA; which is returned as an `int`.&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call [`System.identityHashCode(obj)`][1].&#xD;&#xA;&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;If you really want an object's current address, you can get it using JNI and a native method (and some abstraction breaking), or by using methods in the `Unsafe` class.  But beware that both of these approaches are non-portable ... and that the object addresses that they give you are liable to ""break"" when the GC runs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#identityHashCode-java.lang.Object-";;added 168 characters in body
102653599;18397076;139985;5;0c51dfb5-ea71-4eae-8c27-a0c4554ba69c;2015-10-26 08:08:56.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) an object address, it will be the object's address *at the time when the hashcode was first accessed*.  This could be different to its current address, and *will* be different if the GC has moved the object since the first time the object's hashcode was observed.&#xD;&#xA;&#xD;&#xA;  - On a 64bit JVM (with a large enough heap size / not using compressed oops) addresses won't fit into an identity hashcode number&#xD;&#xA; which is returned as an `int`.&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call [`System.identityHashCode(obj)`][1].&#xD;&#xA;&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;If you really want an object's current address, you can get it using JNI and a native method (and some abstraction breaking), or by using methods in the `Unsafe` class.  But beware that both of these approaches are non-portable ... and that the object addresses that they give you are liable to ""break"" when the GC runs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#identityHashCode-java.lang.Object-";;added 55 characters in body
142996138;18397076;139985;5;cf88e153-f593-4abe-a5cd-a5c0560aef5d;2017-04-13 07:22:51.0;"Strictly speaking, you can't print the address of an object in pure Java.  The number that looks like an object address in the String produced by `Object.toString()` is the object's ""identity hashcode"".  It may or may not be related to the object's current address:&#xD;&#xA;&#xD;&#xA;  - The specs *do not say* how the identity hashcode number is calculated.  It is deliberately left unspecified.&#xD;&#xA;&#xD;&#xA;  - Since the number is a hashcode, it *cannot* change.  So even though it is (typically) related to an object address, that will be the object's address *at the time when the hashcode was first accessed*.  This could be different to its current address, and it *will* be different if the GC has moved the object since the first time the object's identity hashcode was observed.&#xD;&#xA;&#xD;&#xA;  - On a 64bit JVM (with a large enough heap size / not using compressed oops) addresses won't fit into an identity hashcode number which is returned as an `int`.&#xD;&#xA;&#xD;&#xA;Anyhow, the way to get this number is to call [`System.identityHashCode(obj)`][1].&#xD;&#xA;&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;If you really want an object's current address, you can get it using JNI and a native method (and some abstraction breaking), or by using methods in the `Unsafe` class.  But beware that both of these approaches are non-portable ... and that the object addresses that they give you are liable to ""break"" when the GC runs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#identityHashCode-java.lang.Object-";;added 23 characters in body

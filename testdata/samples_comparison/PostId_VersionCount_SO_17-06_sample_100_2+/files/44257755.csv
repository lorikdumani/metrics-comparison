Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
148208139;44257755;6634373;2;1dcd7a75-04e3-4df8-bb2c-9615a8bfb3ac;2017-05-30 08:57:44.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes.&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx";;
148208633;44257755;6634373;5;ae40c996-b041-464f-b895-c4584c9fccee;2017-05-30 09:04:19.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes.&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside.&#xD;&#xA;&#xD;&#xA;[There's][2] a good guide to `Dictionary` if it's a new information for you.&#xD;&#xA;&#xD;&#xA;After all, the last created `TextBox` with name `Box*` will be:&#xD;&#xA;&#xD;&#xA;    Public Function LastCreatedBox() As MSForms.TextBox&#xD;&#xA;        Dim Boxes As Collection&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        With Boxes&#xD;&#xA;            If .Count <> 0 Then _&#xD;&#xA;                    Set LastCreatedBox = Boxes(.Count)&#xD;&#xA;        End With&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;I think that now things are clearer to you! Cheers!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx&#xD;&#xA;  [2]: https://excelmacromastery.com/vba-dictionary/";;added 535 characters in body
148209360;44257755;6634373;5;a19690f3-9085-44b5-9455-baaa35e65b44;2017-05-30 09:12:35.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes.&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside.&#xD;&#xA;[There's][2] a good guide to `Dictionary` if it's a new information for you.&#xD;&#xA;&#xD;&#xA;Anyway, no matter what object you choose, if user (or code) is unable to create more of thoose textboxes - you can convert this `Function` above to a `Static Property Get` or just to a `Property` with `Static` collection inside (depends on desired behaviour) so you iterate over all controls only once (e.g. on `UserForm_Initialize` event)! &#xD;&#xA;&#xD;&#xA;After all, the last created `TextBox` with name `Box*` will be:&#xD;&#xA;&#xD;&#xA;    Public Function LastCreatedBox() As MSForms.TextBox&#xD;&#xA;        Dim Boxes As Collection&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        With Boxes&#xD;&#xA;            If .Count <> 0 Then _&#xD;&#xA;                    Set LastCreatedBox = Boxes(.Count)&#xD;&#xA;        End With&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;I think that now things are clearer to you! Cheers!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx&#xD;&#xA;  [2]: https://excelmacromastery.com/vba-dictionary/";;added 535 characters in body
148210063;44257755;6634373;5;1dd0b4be-bc29-4578-badb-eaff0fc8e213;2017-05-30 09:21:12.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes.&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside.&#xD;&#xA;[There's][2] a good guide to `Dictionary` if it's a new information for you.&#xD;&#xA;&#xD;&#xA;Anyway, no matter what object you choose, if user (or code) is unable to create more of thoose textboxes - you can convert this `Function` above to a `Static Property Get` or just to a `Property` with `Static` collection inside (depends on desired behaviour) so you iterate over all controls only once (e.g. on `UserForm_Initialize` event)! &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Property Get Boxes() As Collection&#xD;&#xA;        Static PreservedBoxes As Collection&#xD;&#xA;    &#xD;&#xA;        'There's no loop, but call to PullBoxes to reduce duplicate code in answer&#xD;&#xA;        If PreservedBoxes Is Nothing Then _&#xD;&#xA;                Set PreservedBoxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PreservedBoxes&#xD;&#xA;    End Property&#xD;&#xA;&#xD;&#xA;After all, the last created `TextBox` with name `Box*` will be:&#xD;&#xA;&#xD;&#xA;    Public Function LastCreatedBox() As MSForms.TextBox&#xD;&#xA;        Dim Boxes As Collection&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        With Boxes&#xD;&#xA;            If .Count <> 0 Then _&#xD;&#xA;                    Set LastCreatedBox = Boxes(.Count)&#xD;&#xA;        End With&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;I think that now things are clearer to you! Cheers!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx&#xD;&#xA;  [2]: https://excelmacromastery.com/vba-dictionary/";;added 339 characters in body
148210512;44257755;6634373;5;1d26f723-3c56-4800-b262-bfdb8721c63d;2017-05-30 09:26:53.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes.&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside.&#xD;&#xA;[There's][2] a good guide to `Dictionary` if it's a new information for you.&#xD;&#xA;&#xD;&#xA;Anyway, no matter what object you choose, if user (or code) is unable to create more of thoose textboxes - you can convert this `Function` above to a `Static Property Get` or just to a `Property` with `Static` collection inside (depends on desired behaviour) so you iterate over all controls only once (e.g. on `UserForm_Initialize` event)! &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Property Get Boxes() As Collection&#xD;&#xA;        Static PreservedBoxes As Collection&#xD;&#xA;    &#xD;&#xA;        'There's no loop, but call to PullBoxes to reduce duplicate code in answer&#xD;&#xA;        If PreservedBoxes Is Nothing Then _&#xD;&#xA;                Set PreservedBoxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PreservedBoxes&#xD;&#xA;    End Property&#xD;&#xA;&#xD;&#xA;After all, the last created `TextBox` with name `Box*` will be:&#xD;&#xA;&#xD;&#xA;    Public Function LastCreatedBox() As MSForms.TextBox&#xD;&#xA;        Dim Boxes As Collection&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        With Boxes&#xD;&#xA;            If .Count <> 0 Then _&#xD;&#xA;                    Set LastCreatedBox = Boxes(.Count)&#xD;&#xA;        End With&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;I think that now things are clearer to you! Cheers!&#xD;&#xA;&#xD;&#xA;*Note: All code are definitely a bunch of methods/properties of your form, hence all stuff should be placed inside of form module.*&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx&#xD;&#xA;  [2]: https://excelmacromastery.com/vba-dictionary/";;added 339 characters in body
148211538;44257755;6634373;5;0968338b-1d5d-494f-a6e7-3228357f00e9;2017-05-30 09:37:40.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes (and/or check existance by name in another loop with similar logic).&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside and able to check existance of widget by name properly w/o an error suppression.&#xD;&#xA;[There's][2] a good guide to `Dictionary` if it's a new information for you.&#xD;&#xA;&#xD;&#xA;Anyway, no matter what object you choose, if user (or code) is unable to create more of thoose textboxes - you can convert this `Function` above to a `Static Property Get` or just to a `Property` with `Static` collection inside (depends on desired behaviour) so you iterate over all controls only once (e.g. on `UserForm_Initialize` event)! &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Property Get Boxes() As Collection&#xD;&#xA;        Static PreservedBoxes As Collection&#xD;&#xA;    &#xD;&#xA;        'There's no loop, but call to PullBoxes to reduce duplicate code in answer&#xD;&#xA;        If PreservedBoxes Is Nothing Then _&#xD;&#xA;                Set PreservedBoxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PreservedBoxes&#xD;&#xA;    End Property&#xD;&#xA;&#xD;&#xA;After all, the last created `TextBox` with name `Box*` will be:&#xD;&#xA;&#xD;&#xA;    Public Function LastCreatedBox() As MSForms.TextBox&#xD;&#xA;        Dim Boxes As Collection&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        With Boxes&#xD;&#xA;            If .Count <> 0 Then _&#xD;&#xA;                    Set LastCreatedBox = Boxes(.Count)&#xD;&#xA;        End With&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;I think that now things are clearer to you! Cheers!&#xD;&#xA;&#xD;&#xA;*Note: All code are definitely a bunch of methods/properties of your form, hence all stuff should be placed inside of form module.*&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx&#xD;&#xA;  [2]: https://excelmacromastery.com/vba-dictionary/";;added 80 characters in body
148212006;44257755;6634373;5;e34cfede-3b7d-4fb7-8f01-3c06a58a405a;2017-05-30 09:43:11.0;"A [`Controls`][1] collection is a simplified collection of controls (obviously) and share a same order as a placement order of controls.&#xD;&#xA;&#xD;&#xA;First of all, even a creatable collection object lacks methods such as `Exists` or `Contains` , hence you need a function with error handling to checking/pulling widget from a collection.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Function ExistsWidget(ByVal Name As String) As Boolean&#xD;&#xA;        On Error Resume Next&#xD;&#xA;            ExistsWidget = Not Me.Controls(Name) Is Nothing&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;If you really doesnt like *""ask forgiveness not permission""* option you can pull entire ordered collection of your textboxes (and/or check existance by name in another loop with similar logic).&#xD;&#xA;&#xD;&#xA;    Public Function PullBoxes() As Collection&#xD;&#xA;        Dim Control As MSForms.Control&#xD;&#xA;&#xD;&#xA;        Set PullBoxes = New Collection&#xD;&#xA;    &#xD;&#xA;        For Each Control In Me.Controls&#xD;&#xA;            If TypeOf Control Is MSForms.TextBox And _&#xD;&#xA;                    Left(Control.Name, 3) = ""Box"" Then&#xD;&#xA;                    Call PullBoxes.Add(Control)&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;Since names of widgets are unique - you can return a `Dictionary` from that function with (Control.Name, Control) pairs inside and able to check existance of widget by name properly w/o an error suppression.&#xD;&#xA;[There's][2] a good guide to `Dictionary` if it's a new information for you.&#xD;&#xA;&#xD;&#xA;Anyway, no matter what object you choose, if user (or code) is unable to create more of thoose textboxes - you can convert this `Function` above to a `Static Property Get` or just to a `Property Get` with `Static` collection inside, so you iterate over all controls only once (e.g. on `UserForm_Initialize` event)! &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    Public Property Get Boxes() As Collection&#xD;&#xA;        Static PreservedBoxes As Collection&#xD;&#xA;    &#xD;&#xA;        'There's no loop, but call to PullBoxes to reduce duplicate code in answer&#xD;&#xA;        If PreservedBoxes Is Nothing Then _&#xD;&#xA;                Set PreservedBoxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PreservedBoxes&#xD;&#xA;    End Property&#xD;&#xA;&#xD;&#xA;After all, the last created `TextBox` with name `Box*` will be:&#xD;&#xA;&#xD;&#xA;    Public Function LastCreatedBox() As MSForms.TextBox&#xD;&#xA;        Dim Boxes As Collection&#xD;&#xA;    &#xD;&#xA;        Set Boxes = PullBoxes&#xD;&#xA;    &#xD;&#xA;        With Boxes&#xD;&#xA;            If .Count <> 0 Then _&#xD;&#xA;                    Set LastCreatedBox = Boxes(.Count)&#xD;&#xA;        End With&#xD;&#xA;    End Function&#xD;&#xA;&#xD;&#xA;I think that now things are clearer to you! Cheers!&#xD;&#xA;&#xD;&#xA;*Note: All code are definitely a bunch of methods/properties of your form, hence all stuff should be placed inside of form module.*&#xD;&#xA;&#xD;&#xA;  [1]: https://msdn.microsoft.com/en-us/library/aa445317(v=vs.60).aspx&#xD;&#xA;  [2]: https://excelmacromastery.com/vba-dictionary/";;added 80 characters in body

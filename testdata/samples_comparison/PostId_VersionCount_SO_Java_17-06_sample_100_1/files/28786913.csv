Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
84823220;28786913;2310866;2;bfa091c4-0128-4fb4-a23a-64c9dfc674b0;2015-02-28 21:07:38.0;"Method calls always have additional overhead. Accessing a field directly will always be faster. But this does not mean that you should abandon getters and setters all together.&#xD;&#xA;&#xD;&#xA;For example look at this class `Example`:&#xD;&#xA;&#xD;&#xA;    public class Example {&#xD;&#xA;        &#xD;&#xA;        private String text;&#xD;&#xA;&#xD;&#xA;        public String getText() {&#xD;&#xA;            return text;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void setText(String text) {&#xD;&#xA;            this.text = text;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public void doSomething() {&#xD;&#xA;            ...&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Inside `doSomething()` you should work with the field directly. Calling the getters and setters in there would not be the way to go since that would require additional overhead each time you call one.&#xD;&#xA;&#xD;&#xA;If you are using the `Example` class inside another class like below you should use the getter and setter methods:&#xD;&#xA;&#xD;&#xA;    Example instance = new Example();&#xD;&#xA;    instance.setText(""some text"");&#xD;&#xA;    ...&#xD;&#xA;    String text = instance.getText();&#xD;&#xA;&#xD;&#xA;Making the field public and accessing the field directly like `example.text` would be bad.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;**BUT** Any modern device has so much computing power that the overhead generated by a method call is completely negligible. [**The docs**](http://developer.android.com/training/articles/perf-tips.html#GettersSetters) do state that you should avoid using getters and setters in performance critical places, but that rule is from a time when most Android phones had 128 MB RAM. The main reason you should adhere to the rules I explained above is just one thing: **coding style**. &#xD;&#xA;&#xD;&#xA;Your first concern should always be to write clean, readable and maintainable code.&#xD;&#xA;&#xD;&#xA;";;
84823519;28786913;2310866;5;2a94cb76-9cfc-4f9b-9e75-843ea8a678c2;2015-02-28 21:14:36.0;"Just to get the most important part out of the way: You should **NEVER** use static variables in Android unless you know exactly what you are doing. Otherwise you are going to create memory leaks and a whole other slew of problems.&#xD;&#xA;&#xD;&#xA;If you want to pass data to another `Activity` you should use `Intents`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;Method calls always have additional overhead. Accessing a field directly will always be faster. But this does not mean that you should abandon getters and setters all together.&#xD;&#xA;&#xD;&#xA;For example look at this class `Example`:&#xD;&#xA;&#xD;&#xA;    public class Example {&#xD;&#xA;        &#xD;&#xA;        private String text;&#xD;&#xA;&#xD;&#xA;        public String getText() {&#xD;&#xA;            return text;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void setText(String text) {&#xD;&#xA;            this.text = text;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public void doSomething() {&#xD;&#xA;            ...&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Inside `doSomething()` you should work with the field directly. Calling the getters and setters in there would not be the way to go since that would require additional overhead each time you call one.&#xD;&#xA;&#xD;&#xA;If you are using the `Example` class inside another class like below you should use the getter and setter methods:&#xD;&#xA;&#xD;&#xA;    Example instance = new Example();&#xD;&#xA;    instance.setText(""some text"");&#xD;&#xA;    ...&#xD;&#xA;    String text = instance.getText();&#xD;&#xA;&#xD;&#xA;Making the field public and accessing the field directly like `example.text` would be bad.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;**BUT** Any modern device has so much computing power that the overhead generated by a method call is completely negligible. [**The docs**](http://developer.android.com/training/articles/perf-tips.html#GettersSetters) do state that you should avoid using getters and setters in performance critical places, but that rule is from a time when most Android phones had 128 MB RAM. The main reason you should adhere to the rules I explained above is just one thing: **coding style**. &#xD;&#xA;&#xD;&#xA;Your first concern should always be to write clean, readable and maintainable code.&#xD;&#xA;&#xD;&#xA;";;added 318 characters in body
84824017;28786913;2310866;5;97891518-1bc3-4e1f-b42a-b06becf69255;2015-02-28 21:28:40.0;"Just to get the most important part out of the way: You should **NEVER** use static variables in Android unless you know exactly what you are doing. Otherwise you are going to create memory leaks and a whole other slew of problems.&#xD;&#xA;&#xD;&#xA;If you want to pass data to another `Activity` you should use `Intents`.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;Method calls always have additional overhead. Accessing a field directly will always be faster. But this does not mean that you should abandon getters and setters all together.&#xD;&#xA;&#xD;&#xA;For example look at this class `Example`:&#xD;&#xA;&#xD;&#xA;    public class Example {&#xD;&#xA;        &#xD;&#xA;        private String text;&#xD;&#xA;&#xD;&#xA;        public String getText() {&#xD;&#xA;            return text;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void setText(String text) {&#xD;&#xA;            this.text = text;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public void doSomething() {&#xD;&#xA;            ...&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Inside `doSomething()` you should work with the field directly. Calling the getters and setters in there would not be the way to go since that would require additional overhead each time you call one.&#xD;&#xA;&#xD;&#xA;If you are using the `Example` class inside another class like below you should use the getter and setter methods:&#xD;&#xA;&#xD;&#xA;    Example instance = new Example();&#xD;&#xA;    instance.setText(""some text"");&#xD;&#xA;    ...&#xD;&#xA;    String text = instance.getText();&#xD;&#xA;&#xD;&#xA;Making the field public and accessing it directly like `instance.text` would be bad.&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;**BUT** any modern device has so much computing power that the overhead generated by a method call is completely negligible. [**The docs**](http://developer.android.com/training/articles/perf-tips.html#GettersSetters) do state that you should avoid using getters and setters in performance critical places, but that rule is from a time when most Android phones had 128 MB RAM. The main reason you should adhere to the rules I explained above is just one thing: **coding style**. &#xD;&#xA;&#xD;&#xA;Your first concern should always be to write clean, readable and maintainable code.&#xD;&#xA;&#xD;&#xA;";;added 1 character in body

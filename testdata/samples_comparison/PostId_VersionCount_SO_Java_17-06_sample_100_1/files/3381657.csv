Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
7034568;3381657;234901;2;9f841c27-bdac-495b-8e8e-0e18ab4a7f34;2010-08-01 10:32:06.0;"Hope this doesn't spoil your fun or something, but if I were you I'd take this approach..&#xD;&#xA;&#xD;&#xA;Pseudo java:&#xD;&#xA;    &#xD;&#xA;    abstract class Word {&#xD;&#xA;        String word;&#xD;&#xA;        char last();&#xD;&#xA;        char first();         &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    abstract class DynamicDictionary {&#xD;&#xA;        Map<Character,Set<Word>> first_indexed;&#xD;&#xA;        &#xD;&#xA;        Word removeNext(Word word){&#xD;&#xA;            Set<Word> candidates = first_indexed.get(word.last());&#xD;&#xA;            return removeRandom(candidates);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Remove a random word out from the entire dic.&#xD;&#xA;         */&#xD;&#xA;         Word removeRandom();&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Remove and return a random word out from the set provided.&#xD;&#xA;         */&#xD;&#xA;         Word removeRandom(Set<Word> wordset);    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;and then&#xD;&#xA;    &#xD;&#xA;    Word primer = dynamicDictionary.removeRandom();&#xD;&#xA;    List<Word> list = new ArrayList<Word>(500);&#xD;&#xA;    list.add(primer);&#xD;&#xA;    for(int i=0, Word cur = primer;i<499;i++){&#xD;&#xA;        cur = dynamicDictionary.removeNext(cur);&#xD;&#xA;        list.add(cur);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;NOTE: Not intended to be viewed as actual java code, just a way to roughly explain the approach (no error handling, not a good class structure if it were really used, no encupsulation etc. etc.)";;
7034618;3381657;234901;5;f663e6e4-417a-4c5f-b43f-971a9a020393;2010-08-01 10:37:30.0;"Hope this doesn't spoil your fun or something, but if I were you I'd take this approach..&#xD;&#xA;&#xD;&#xA;Pseudo java:&#xD;&#xA;    &#xD;&#xA;    abstract class Word {&#xD;&#xA;        String word;&#xD;&#xA;        char last();&#xD;&#xA;        char first();         &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    abstract class DynamicDictionary {&#xD;&#xA;        Map<Character,Set<Word>> first_indexed;&#xD;&#xA;        &#xD;&#xA;        Word removeNext(Word word){&#xD;&#xA;            Set<Word> candidates = first_indexed.get(word.last());&#xD;&#xA;            return removeRandom(candidates);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Remove a random word out from the entire dic.&#xD;&#xA;         */&#xD;&#xA;         Word removeRandom();&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Remove and return a random word out from the set provided.&#xD;&#xA;         */&#xD;&#xA;         Word removeRandom(Set<Word> wordset);    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;and then&#xD;&#xA;    &#xD;&#xA;    Word primer = dynamicDictionary.removeRandom();&#xD;&#xA;    List<Word> list = new ArrayList<Word>(500);&#xD;&#xA;    list.add(primer);&#xD;&#xA;    for(int i=0, Word cur = primer;i<499;i++){&#xD;&#xA;        cur = dynamicDictionary.removeNext(cur);&#xD;&#xA;        list.add(cur);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;NOTE: Not intended to be viewed as actual java code, just a way to roughly explain the approach (no error handling, not a good class structure if it were really used, no encupsulation etc. etc.)  &#xD;&#xA;&#xD;&#xA;Should I encounter memory issues, maybe I'll do this:&#xD;&#xA;    &#xD;&#xA;    abstract class Word {&#xD;&#xA;        int lineNumber;&#xD;&#xA;        char last();&#xD;&#xA;        char first();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;If that is not sufficient, guess I'll use a binary search on the file or put it in a DB etc.. ";;"added 169 characters in body; added 102 characters in body"

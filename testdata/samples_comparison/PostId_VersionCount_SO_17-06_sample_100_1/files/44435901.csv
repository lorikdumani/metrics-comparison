Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
148908661;44435901;322912;2;7a420603-da3e-47e6-aa85-df16a231fd5f;2017-06-08 12:33:00.0;"You can write a function that works on a generic region at a time. Then you split your data by region into a list and apply your custom function to each list element using `sapply`.&#xD;&#xA;&#xD;&#xA;    bootstrapByRegion <- function(R) {&#xD;&#xA;      R$region<-NULL&#xD;&#xA;      &#xD;&#xA;      max<-nrow(R)-1&#xD;&#xA;      &#xD;&#xA;      iter <- 1000 #the number of iterations&#xD;&#xA;      n <- 1 # the number of rows to be sampled. This needs to increase until “max” &#xD;&#xA;      outp <- rep(NA, iter)&#xD;&#xA;      &#xD;&#xA;      for (i in 1:iter){&#xD;&#xA;        d <- sample(1:nrow(R), size = n, replace=FALSE)&#xD;&#xA;        bootdata <- R[d,]&#xD;&#xA;        x <- colSums(bootdata) #this is not applicable until n>1&#xD;&#xA;        outp[i] <- 1/diversity(x, index = ""simpson"")&#xD;&#xA;      }&#xD;&#xA;      outp&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    xy <- split(df, f = df$region)&#xD;&#xA;    result <- sapply(xy, FUN = bootstrapByRegion) # list element is taken as R";;
148927935;44435901;322912;5;871ea9aa-191d-4830-a268-8ae0ffd80413;2017-06-08 16:08:59.0;"You can write a function that works on a generic region at a time. Then you split your data by region into a list and apply your custom function to each list element using `sapply`.&#xD;&#xA;&#xD;&#xA;    bootstrapByRegion <- function(R) {&#xD;&#xA;      R$region <- NULL&#xD;&#xA;      &#xD;&#xA;      nmax <- nrow(R)-1&#xD;&#xA;      &#xD;&#xA;      iter <- 1000 #the number of iterations&#xD;&#xA;      # pre-allocate the result&#xD;&#xA;      output <- matrix(NA, nrow = nrow(R), ncol = nmax)&#xD;&#xA;      &#xD;&#xA;      for (i in 1:nmax) {&#xD;&#xA;        output[, i] <- replicate(iter, expr = {&#xD;&#xA;          d <- sample(1:nrow(R), size = i, replace=FALSE)&#xD;&#xA;          bootdata <- R[d,]&#xD;&#xA;          x <- colSums(bootdata) #this is not applicable until n>1&#xD;&#xA;          outp <- 1/diversity(x, index = ""simpson"")&#xD;&#xA;          outp&#xD;&#xA;        })&#xD;&#xA;      }&#xD;&#xA;      output&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    xy <- split(df, f = df$region)&#xD;&#xA;    result <- sapply(xy, FUN = bootstrapByRegion) # list element is taken as R";;added 65 characters in body
148929303;44435901;322912;5;3c2264e5-6f07-4b67-aa88-aca627017365;2017-06-08 16:26:11.0;"You can write a function that works on a generic region at a time. Then you split your data by region into a list and apply your custom function to each list element using `sapply`.&#xD;&#xA;&#xD;&#xA;    bootstrapByRegion <- function(R) {&#xD;&#xA;      rgn <- unique(R$region)&#xD;&#xA;      message(sprintf(""Processing %s"", rgn))&#xD;&#xA;      R$region <- NULL&#xD;&#xA;      &#xD;&#xA;      nmax <- nrow(R)-1&#xD;&#xA;      &#xD;&#xA;      if (nmax == 0) stop(sprintf(""Trying to work on one row. No dice. Manually exclude region %s or handle otherwise."", rgn))&#xD;&#xA;      &#xD;&#xA;      iter <- 1000 #the number of iterations&#xD;&#xA;      # pre-allocate the result&#xD;&#xA;      output <- matrix(NA, nrow = iter, ncol = nmax)&#xD;&#xA;    &#xD;&#xA;      for (i in 1:nmax) {&#xD;&#xA;        i <- 1&#xD;&#xA;        output[, i] <- replicate(iter, expr = {&#xD;&#xA;          d <- sample(1:nrow(R), size = i, replace=FALSE)&#xD;&#xA;          bootdata <- R[d, , drop = FALSE]&#xD;&#xA;          x <- colSums(bootdata) #this is not applicable until n>1&#xD;&#xA;          outp <- 1/diversity(x, index = ""simpson"")&#xD;&#xA;          outp&#xD;&#xA;        })&#xD;&#xA;      }&#xD;&#xA;      output&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    xy <- split(df, f = df$region)&#xD;&#xA;    result <- sapply(xy, FUN = bootstrapByRegion) # list element is taken as R&#xD;&#xA;&#xD;&#xA;Since region 3 has only one row, it will not work (because of the `nrow(R)-1`). You can exclude these regions in a number of ways. Here's one.&#xD;&#xA;&#xD;&#xA;    result <- sapply(xy[sapply(xy, nrow) > 1], FUN = bootstrapByRegion)";;added 239 characters in body

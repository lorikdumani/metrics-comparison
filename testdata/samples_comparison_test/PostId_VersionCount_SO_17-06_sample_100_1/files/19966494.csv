Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
51425509;19966494;2970677;2;f3abd6a8-69f2-4d9b-a501-bdb10931078a;2013-11-13 23:20:26.0;"In visual studio I have a program that currently takes 5 pictures everytime you click the button. I want the program to take those 5 pictures then change the Aperture setting and take 1 last pickture. &#xD;&#xA;There isn't really relevant code, so this is for someone who already understands the SDK. &#xD;&#xA;&#xD;&#xA;Thanks!";;
51426723;19966494;2970677;5;b4d96497-415a-4a72-a54a-a46a71dd8c63;2013-11-13 23:48:40.0;"In visual studio I have a program that currently takes 5 pictures everytime you click the button. I want the program to take those 5 pictures then change the Aperture setting and take 1 last picture. &#xD;&#xA;There isn't really relevant code, so this is for someone who already understands the SDK. &#xD;&#xA;&#xD;&#xA;I've already looked around quite a bit for how to handle this, but I'm rather inexperienced with coding in general. &#xD;&#xA;&#xD;&#xA;Thanks!";;added 119 characters in body
51426918;19966494;2970677;5;3df3a77b-8bfb-4cd5-99d8-11804e417fdc;2013-11-13 23:53:53.0;"In visual studio I have a program that currently takes 5 pictures everytime you click the button. I want the program to take those 5 pictures then change the Aperture setting and take 1 last picture. &#xD;&#xA;There isn't really relevant code, so this is for someone who already understands the SDK. &#xD;&#xA;&#xD;&#xA;I've already looked around quite a bit for how to handle this, but I'm rather inexperienced with coding in general. &#xD;&#xA;&#xD;&#xA;Thanks!&#xD;&#xA;&#xD;&#xA;maybe useful code &#xD;&#xA;&#xD;&#xA;    using System;&#xD;&#xA;    using System.Collections.Generic;&#xD;&#xA;    using System.ComponentModel;&#xD;&#xA;    using System.Configuration;&#xD;&#xA;    using System.Data;&#xD;&#xA;    using System.Drawing;&#xD;&#xA;    using System.Linq;&#xD;&#xA;    using System.Text;&#xD;&#xA;    using System.Threading;&#xD;&#xA;    using System.Windows.Forms;&#xD;&#xA;    using EDSDKLib;&#xD;&#xA;&#xD;&#xA;    using CanonCameraAppLib;&#xD;&#xA;    using CanonCameraAppLib.Remote;&#xD;&#xA;&#xD;&#xA;    namespace CanonCameraApp&#xD;&#xA;&#xD;&#xA;    { &#xD;&#xA;    public partial class CanonCameraApp : Form&#xD;&#xA;    {&#xD;&#xA;        public delegate void TakePhotoDelegate(int delay);&#xD;&#xA;&#xD;&#xA;        private CameraAPI api;&#xD;&#xA;        private RemoteServer server;&#xD;&#xA;        private TakePhotoDelegate takePhotoDelegate;        &#xD;&#xA;&#xD;&#xA;        public CanonCameraApp()&#xD;&#xA;        {&#xD;&#xA;            InitializeComponent();&#xD;&#xA;            api = CameraAPI.Instance;&#xD;&#xA;            takePhotoDelegate = new TakePhotoDelegate(takePhotograph);&#xD;&#xA;&#xD;&#xA;            init();            &#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void server_OnTakePhotoCommandEvent(RemoteCommandEventArgs e)&#xD;&#xA;        {&#xD;&#xA;            this.Invoke(takePhotoDelegate, e.Delay);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void init()&#xD;&#xA;        {&#xD;&#xA;            loadCameras();&#xD;&#xA;            registerEvents();&#xD;&#xA;            if (Convert.ToBoolean(ConfigurationManager.AppSettings[""StartServerOnStartup""]))&#xD;&#xA;            {&#xD;&#xA;                startServerListener();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void registerEvents()&#xD;&#xA;        {&#xD;&#xA;            CameraAPI.OnCameraAdded += new CameraAddedEventHandler(api_OnCameraAdded);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void api_OnCameraAdded(CameraAddedEventArgs e)&#xD;&#xA;        {&#xD;&#xA;            scanForCamerasToolStripMenuItem_Click(null, new EventArgs());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void startServerListener()&#xD;&#xA;        {&#xD;&#xA;            server = new RemoteServer(Convert.ToInt32(ConfigurationManager.AppSettings[""ListenPort""]));&#xD;&#xA;            server.OnTakePhotoCommandEvent += new TakePhoto(server_OnTakePhotoCommandEvent);&#xD;&#xA;            new Thread(server.Start).Start();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void loadCameras()&#xD;&#xA;        {&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                cbCameras.DataSource = api.Cameras;&#xD;&#xA;                cbCameras.DisplayMember = ""Name"";&#xD;&#xA;                cbCameras.Enabled = true;&#xD;&#xA;                btnTakePhoto.Enabled = true;&#xD;&#xA;                btnProperties.Enabled = true;&#xD;&#xA;                scanForCamerasToolStripMenuItem.Enabled = false;&#xD;&#xA;                subscribeToEvents();&#xD;&#xA;            }&#xD;&#xA;            catch (CameraNotFoundException)&#xD;&#xA;            {&#xD;&#xA;                MessageBox.Show(""No cameras were detected.  Please make sure that they are plugged in and are turned on."");&#xD;&#xA;                cbCameras.Enabled = false;&#xD;&#xA;                btnTakePhoto.Enabled = false;&#xD;&#xA;                btnProperties.Enabled = false;&#xD;&#xA;                scanForCamerasToolStripMenuItem.Enabled = true;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void subscribeToEvents()&#xD;&#xA;        {&#xD;&#xA;            List<Camera> cameras = getCameraList();&#xD;&#xA;&#xD;&#xA;            foreach (Camera camera in cameras)&#xD;&#xA;            {&#xD;&#xA;                camera.OnNewItemCreated += new CanonCameraAppLib.Events.NewItemCreatedEventHandler(camera_OnNewItemCreated);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        void camera_OnNewItemCreated(Camera sender, CanonCameraAppLib.Events.NewItemCreatedEventArgs e)&#xD;&#xA;        {&#xD;&#xA;            if (chbPreview.Checked)&#xD;&#xA;            {&#xD;&#xA;                PhotoPreview preview = new PhotoPreview(e.Item, true);&#xD;&#xA;                preview.Show();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;      //  private void changeAperature(int value)&#xD;&#xA;        //{&#xD;&#xA;          //  Camera camera = getSelectedCamera();&#xD;&#xA;        &#xD;&#xA;        //    camera.changeAperture(value);&#xD;&#xA;        //}&#xD;&#xA;        private void takePhotograph(int delay)&#xD;&#xA;        {&#xD;&#xA;            Camera camera = getSelectedCamera();&#xD;&#xA;&#xD;&#xA;            camera.takePhotograph(delay);&#xD;&#xA;        }&#xD;&#xA;            &#xD;&#xA;&#xD;&#xA;        private Camera getSelectedCamera()&#xD;&#xA;        {&#xD;&#xA;            return (Camera)cbCameras.SelectedItem;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private List<Camera> getCameraList()&#xD;&#xA;        {&#xD;&#xA;            List<Camera> cameras = new List<Camera>(cbCameras.Items.Count);&#xD;&#xA;&#xD;&#xA;            foreach (object camera in cbCameras.Items)&#xD;&#xA;            {&#xD;&#xA;                cameras.Add((Camera)camera);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            return cameras;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #region Handled Form Events&#xD;&#xA;&#xD;&#xA;            private void button1_Click(object sender, EventArgs e)&#xD;&#xA;            {&#xD;&#xA;                &#xD;&#xA;                for (int i = 0; i <=4; i++)&#xD;&#xA;                    takePhotograph(Convert.ToInt16(textBox1.Text));&#xD;&#xA;                for (int i = 0; i <= 1; i++) &#xD;&#xA;                    &#xD;&#xA;                    ;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            private void scanForCamerasToolStripMenuItem_Click(object sender, EventArgs e)&#xD;&#xA;            {&#xD;&#xA;                loadCameras();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            private void quitToolStripMenuItem_Click(object sender, EventArgs e)&#xD;&#xA;            {&#xD;&#xA;                quit();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            private void CanonCameraApp_FormClosing(object sender, FormClosingEventArgs e)&#xD;&#xA;            {&#xD;&#xA;                quit();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            private void aboutToolStripMenuItem_Click(object sender, EventArgs e)&#xD;&#xA;            {&#xD;&#xA;                new About().ShowDialog(this);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            /// <summary>&#xD;&#xA;            /// Opens the Camera Properties window&#xD;&#xA;            /// </summary>&#xD;&#xA;            private void btnProperties_Click(object sender, EventArgs e)&#xD;&#xA;            {&#xD;&#xA;                new CameraProperties(getSelectedCamera()).Show();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        #endregion&#xD;&#xA;&#xD;&#xA;        private void quit()&#xD;&#xA;        {&#xD;&#xA;            if (server != null)&#xD;&#xA;            {&#xD;&#xA;                server.Stop();&#xD;&#xA;            }&#xD;&#xA;            Application.ExitThread();&#xD;&#xA;            Application.Exit();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This is what the application it self looks like. There are several dll's and other things involved.";;added 119 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
65768327;23825902;2420653;2;457d0895-9e49-42af-bc91-bc41fcc6bce0;2014-05-23 09:43:25.0;"When you create a form using QtDesigner, it stores the details in a `xxx.ui` file which must be added to your project. This is compiled in a precompile step into a `ui_xxx.h` file which you must include in your source files. &#xD;&#xA;&#xD;&#xA;This header file contains a generated class with all the widget and layout code inside and puts it in a namespace called `Ui`.&#xD;&#xA;&#xD;&#xA;You have two options to use this generated class: you can derive from it, or you can have it as a member. You then need to call the class' `setupUi()` function to execute the creation/layout code.&#xD;&#xA;&#xD;&#xA;The advantage of deriving from the generated class is that all child widgets are publicly available.&#xD;&#xA;&#xD;&#xA;For example, if you create a simple widget form in QtDesigner and call it `MyWidget`, with a single `QPushButton` called `pushbutton_2`, you can create the form using the following code:&#xD;&#xA;&#xD;&#xA;    #include ""ui_mywidget.h""&#xD;&#xA;    #include <qwidget.h>&#xD;&#xA;    #include <qapplication.h>&#xD;&#xA;&#xD;&#xA;    class Widget : public Ui::MyWidget{&#xD;&#xA;    public:&#xD;&#xA;         Widget(QWidget *parent = 0):QWidget(parent){&#xD;&#xA;             setupUi(this);&#xD;&#xA;         }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    int main(int argc, char **argv){&#xD;&#xA;        QApplication app(argc, argv);&#xD;&#xA;        Widget w;&#xD;&#xA;        w.show();&#xD;&#xA;&#xD;&#xA;        w.pushbutton_2->setText(""test"");&#xD;&#xA;&#xD;&#xA;        return app.exec();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The reason you can access `pushbutton_2` directly is because it's a public member of `Ui::MyWidget` from which you derived `Widget`. It is also created when you call `setupUi()` from the constructor of `Widget`.";;
65880318;23825902;2420653;5;59dad322-02e7-47fc-848b-1e5c304b485a;2014-05-25 08:54:46.0;"When you create a form using QtDesigner, it stores the details in a `xxx.ui` file which must be added to your project. This is compiled in a precompile step into a `ui_xxx.h` file which you must include in your source files. &#xD;&#xA;&#xD;&#xA;This header file contains a generated class with all the widget and layout code inside and puts it in a namespace called `Ui`.&#xD;&#xA;&#xD;&#xA;You have two options to use this generated class: you can derive from it, or you can have it as a member. You then need to call the class' `setupUi()` function to execute the creation/layout code.&#xD;&#xA;&#xD;&#xA;The advantage of deriving from the generated class is that all child widgets are publicly available.&#xD;&#xA;&#xD;&#xA;For example, if you create a simple widget form in QtDesigner and call it `MyWidget`, with a single `QPushButton` called `pushbutton_2`, you can create the form using the following code:&#xD;&#xA;&#xD;&#xA;    #include ""ui_mywidget.h""&#xD;&#xA;    #include <qwidget.h>&#xD;&#xA;    #include <qapplication.h>&#xD;&#xA;&#xD;&#xA;    class Widget : public QWidget, public Ui::MyWidget{&#xD;&#xA;    public:&#xD;&#xA;         Widget(QWidget *parent = 0):QWidget(parent){&#xD;&#xA;             setupUi(this);&#xD;&#xA;         }&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    int main(int argc, char **argv){&#xD;&#xA;        QApplication app(argc, argv);&#xD;&#xA;        Widget w;&#xD;&#xA;        w.show();&#xD;&#xA;&#xD;&#xA;        w.pushbutton_2->setText(""test"");&#xD;&#xA;&#xD;&#xA;        return app.exec();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The reason you can access `pushbutton_2` directly is because it's a public member of `Ui::MyWidget` from which you derived `Widget`. It is also created when you call `setupUi()` from the constructor of `Widget`.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;EDIT:&#xD;&#xA;Another way of creating a form is to have your generated class a member class in your display widget. You will still need to call `setupUi()` though, in order to create all the form's child widgets and perform layout tasks.&#xD;&#xA;&#xD;&#xA;    class Widget : public QWidget{&#xD;&#xA;    public:&#xD;&#xA;         Widget(QWidget *parent = 0):QWidget(parent){&#xD;&#xA;             ui.setupUi(this);&#xD;&#xA;         }&#xD;&#xA;&#xD;&#xA;    private:&#xD;&#xA;        Ui::MyWidget ui;&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;In this case, you will not be able to access the child widgets directly. The reason is that, although structurely, they might be children of `Widget`, the pointer variables that hold the memory addresses to them, and were used to create them, belong to `ui`, which is a private member of `Widget`. &#xD;&#xA;&#xD;&#xA;You can still access them, however, using the `findChild<>()` function, if you know their object names.";;Added method for alternative structure

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
105700821;34104214;3646408;2;832c263e-568b-4722-81b9-c0ed9f2d1961;2015-12-05 11:16:54.0;"main.py&#xD;&#xA;&#xD;&#xA;    from kivy.base import EventLoop&#xD;&#xA;    from kivy.config import Config&#xD;&#xA;    from kivy.graphics import Color, Line&#xD;&#xA;    from kivy.uix.behaviors import ToggleButtonBehavior&#xD;&#xA;    from kivy.uix.togglebutton import ToggleButton&#xD;&#xA;    from kivy.uix.widget import Widget&#xD;&#xA;    from kivy.utils import get_color_from_hex&#xD;&#xA;    from kivy.uix.boxlayout import BoxLayout&#xD;&#xA;    from kivy.uix.label import Label&#xD;&#xA;    from kivy.uix.popup import Popup&#xD;&#xA;    from kivy.clock import Clock&#xD;&#xA;    CURSOR = (&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '@@@@@@ @@@@ @@@@@@      ',&#xD;&#xA;        '@----@ @--@ @----@      ',&#xD;&#xA;        '@----@ @--@ @----@      ',&#xD;&#xA;        '@@@@@@ @@@@ @@@@@@      ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;    )&#xD;&#xA;    class Update_Location(Widget):&#xD;&#xA;        pass&#xD;&#xA;    &#xD;&#xA;    class CanvasWidget(Widget):&#xD;&#xA;        line_width = 2&#xD;&#xA;    &#xD;&#xA;        def on_touch_down(self, touch):&#xD;&#xA;            if Widget.on_touch_down(self, touch):&#xD;&#xA;               return&#xD;&#xA;    &#xD;&#xA;            with self.canvas:&#xD;&#xA;                touch.ud['current_line'] = Line(&#xD;&#xA;                    points=(touch.x, touch.y),&#xD;&#xA;                    width=self.line_width)&#xD;&#xA;    &#xD;&#xA;        def on_touch_move(self, touch):&#xD;&#xA;            if 'current_line' in touch.ud:&#xD;&#xA;                touch.ud['current_line'].points += (touch.x, touch.y)&#xD;&#xA;    &#xD;&#xA;        def set_color(self, new_color):&#xD;&#xA;            self.last_color = new_color&#xD;&#xA;            self.canvas.add(Color(*new_color))&#xD;&#xA;    &#xD;&#xA;        def set_line_width(self, line_width='Normal'):&#xD;&#xA;            self.line_width = {&#xD;&#xA;                'Thin': 1, 'Normal': 2, 'Thick': 4&#xD;&#xA;            }[line_width]&#xD;&#xA;    &#xD;&#xA;        def clear_canvas(self):&#xD;&#xA;            saved = self.children[:]&#xD;&#xA;            self.clear_widgets()&#xD;&#xA;            self.canvas.clear()&#xD;&#xA;            for widget in saved:&#xD;&#xA;                self.add_widget(widget)&#xD;&#xA;            self.set_color(self.last_color)&#xD;&#xA;        def start_server(self):&#xD;&#xA;            host = '127.0.0.1'&#xD;&#xA;            port = 5000&#xD;&#xA;            notification_text=""Server started on host: ""+host+"" and port: ""+str(port)&#xD;&#xA;            server_start=Popup(title='Notification',content=Label(text=notification_text),size_hint=(.75,.75),auto_dismiss=True)&#xD;&#xA;            server_start.open()&#xD;&#xA;            Clock.schedule_interval(server_start.dismiss, 3)&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    class PaintApp(App):&#xD;&#xA;        def build(self):&#xD;&#xA;            EventLoop.ensure_window()&#xD;&#xA;            if EventLoop.window.__class__.__name__.endswith('Pygame'):&#xD;&#xA;                try:&#xD;&#xA;                    from pygame import mouse&#xD;&#xA;    &#xD;&#xA;                    a, b = pygame_compile_cursor()&#xD;&#xA;                    mouse.set_cursor((24, 24), (9, 9), a, b)&#xD;&#xA;                except:&#xD;&#xA;                    pass&#xD;&#xA;            #boxlayout&#xD;&#xA;            self.layout = BoxLayout(orientation='vertical')&#xD;&#xA;        &#xD;&#xA;            self.canvas_widget = CanvasWidget()&#xD;&#xA;            self.canvas_widget.set_color(&#xD;&#xA;                get_color_from_hex('#2980b9'))&#xD;&#xA;            self.layout.add_widget(self.canvas_widget)&#xD;&#xA;            #self.layout.add_widget(Label(text=""Started Server : False , Connected to Server : False"",color=(1,1,1),size_hint=(1, .1)))&#xD;&#xA;            return self.layout&#xD;&#xA;    &#xD;&#xA;            #return self.canvas_widget&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    class RadioButton(ToggleButton):&#xD;&#xA;        def _do_press(self):&#xD;&#xA;            if self.state == 'normal':&#xD;&#xA;                ToggleButtonBehavior._do_press(self)&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    def pygame_compile_cursor(black='@', white='-'):&#xD;&#xA;        aa, bb = [], []&#xD;&#xA;        a = b = 0&#xD;&#xA;        i = 8&#xD;&#xA;        for s in CURSOR:&#xD;&#xA;            for c in s:&#xD;&#xA;                a <<= 1&#xD;&#xA;                b <<= 1&#xD;&#xA;                i -= 1&#xD;&#xA;                if c == black:&#xD;&#xA;                    a |= 1&#xD;&#xA;                    b |= 1&#xD;&#xA;                elif c == white:&#xD;&#xA;                    b |= 1&#xD;&#xA;    &#xD;&#xA;                if not i:&#xD;&#xA;                    aa.append(a)&#xD;&#xA;                    bb.append(b)&#xD;&#xA;                    a = b = 0&#xD;&#xA;                    i = 8&#xD;&#xA;    &#xD;&#xA;        return tuple(aa), tuple(bb)&#xD;&#xA;    &#xD;&#xA;    if __name__ == '__main__':&#xD;&#xA;        Config.set('graphics', 'width', '960')&#xD;&#xA;        Config.set('graphics', 'height', '540')  # 16:9&#xD;&#xA;        # Config.set('graphics', 'resizable', '0')&#xD;&#xA;        # Config.set('input', 'mouse', 'mouse,disable_multitouch')&#xD;&#xA;    &#xD;&#xA;        from kivy.core.window import Window&#xD;&#xA;        Window.clearcolor = get_color_from_hex('#ffffff')&#xD;&#xA;    &#xD;&#xA;        PaintApp().run()&#xD;&#xA;&#xD;&#xA;server.py&#xD;&#xA;&#xD;&#xA;    import socket&#xD;&#xA;    &#xD;&#xA;    def start_server(host,port):&#xD;&#xA;        s = socket.socket()&#xD;&#xA;        s.bind((host,port))&#xD;&#xA;    &#xD;&#xA;        s.listen(1)&#xD;&#xA;        c, addr = s.accept()&#xD;&#xA;        print ""Connection from: "" + str(addr)&#xD;&#xA;        while True:&#xD;&#xA;            data = c.recv(1024)&#xD;&#xA;            if not data:&#xD;&#xA;                break&#xD;&#xA;            print ""from connected user: "" + str(data)&#xD;&#xA;            data = str(data).upper()&#xD;&#xA;            print ""sending: "" + str(data)&#xD;&#xA;            c.send(data)&#xD;&#xA;        c.close()&#xD;&#xA;    &#xD;&#xA;    if __name__ == '__main__':&#xD;&#xA;        start_server()&#xD;&#xA;&#xD;&#xA;Above is the code for my simple paint application(adopted from kivy blue prints).&#xD;&#xA;&#xD;&#xA;My aim is to start server on one application on localhost and then others connect to it. Those who can connected to it should get their canvas updated with one from the server they connected to. How can I send the data and update canvas. I have created a server in the above code using python's socket library. &#xD;&#xA;  ";;
113207254;34104214;3646408;5;1faa9905-e5cc-4ebe-80a9-931f11c2efb3;2016-03-14 18:57:30.0;"main.py&#xD;&#xA;&#xD;&#xA;    from kivy.base import EventLoop&#xD;&#xA;    from kivy.config import Config&#xD;&#xA;    from kivy.graphics import Color, Line&#xD;&#xA;    from kivy.uix.behaviors import ToggleButtonBehavior&#xD;&#xA;    from kivy.uix.togglebutton import ToggleButton&#xD;&#xA;    from kivy.uix.widget import Widget&#xD;&#xA;    from kivy.utils import get_color_from_hex&#xD;&#xA;    from kivy.uix.boxlayout import BoxLayout&#xD;&#xA;    from kivy.uix.label import Label&#xD;&#xA;    from kivy.uix.popup import Popup&#xD;&#xA;    from kivy.clock import Clock&#xD;&#xA;    CURSOR = (&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '@@@@@@ @@@@ @@@@@@      ',&#xD;&#xA;        '@----@ @--@ @----@      ',&#xD;&#xA;        '@----@ @--@ @----@      ',&#xD;&#xA;        '@@@@@@ @@@@ @@@@@@      ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @--@             ',&#xD;&#xA;        '       @@@@             ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;        '                        ',&#xD;&#xA;    )&#xD;&#xA;    class Update_Location(Widget):&#xD;&#xA;        pass&#xD;&#xA;    &#xD;&#xA;    class CanvasWidget(Widget):&#xD;&#xA;        line_width = 2&#xD;&#xA;    &#xD;&#xA;        def on_touch_down(self, touch):&#xD;&#xA;            if Widget.on_touch_down(self, touch):&#xD;&#xA;               return&#xD;&#xA;    &#xD;&#xA;            with self.canvas:&#xD;&#xA;                touch.ud['current_line'] = Line(&#xD;&#xA;                    points=(touch.x, touch.y),&#xD;&#xA;                    width=self.line_width)&#xD;&#xA;    &#xD;&#xA;        def on_touch_move(self, touch):&#xD;&#xA;            if 'current_line' in touch.ud:&#xD;&#xA;                touch.ud['current_line'].points += (touch.x, touch.y)&#xD;&#xA;    &#xD;&#xA;        def set_color(self, new_color):&#xD;&#xA;            self.last_color = new_color&#xD;&#xA;            self.canvas.add(Color(*new_color))&#xD;&#xA;    &#xD;&#xA;        def set_line_width(self, line_width='Normal'):&#xD;&#xA;            self.line_width = {&#xD;&#xA;                'Thin': 1, 'Normal': 2, 'Thick': 4&#xD;&#xA;            }[line_width]&#xD;&#xA;    &#xD;&#xA;        def clear_canvas(self):&#xD;&#xA;            saved = self.children[:]&#xD;&#xA;            self.clear_widgets()&#xD;&#xA;            self.canvas.clear()&#xD;&#xA;            for widget in saved:&#xD;&#xA;                self.add_widget(widget)&#xD;&#xA;            self.set_color(self.last_color)&#xD;&#xA;        def start_server(self):&#xD;&#xA;            host = '127.0.0.1'&#xD;&#xA;            port = 5000&#xD;&#xA;            notification_text=""Server started on host: ""+host+"" and port: ""+str(port)&#xD;&#xA;            server_start=Popup(title='Notification',content=Label(text=notification_text),size_hint=(.75,.75),auto_dismiss=True)&#xD;&#xA;            server_start.open()&#xD;&#xA;            Clock.schedule_interval(server_start.dismiss, 3)&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    class PaintApp(App):&#xD;&#xA;        def build(self):&#xD;&#xA;            EventLoop.ensure_window()&#xD;&#xA;            if EventLoop.window.__class__.__name__.endswith('Pygame'):&#xD;&#xA;                try:&#xD;&#xA;                    from pygame import mouse&#xD;&#xA;    &#xD;&#xA;                    a, b = pygame_compile_cursor()&#xD;&#xA;                    mouse.set_cursor((24, 24), (9, 9), a, b)&#xD;&#xA;                except:&#xD;&#xA;                    pass&#xD;&#xA;            #boxlayout&#xD;&#xA;            self.layout = BoxLayout(orientation='vertical')&#xD;&#xA;        &#xD;&#xA;            self.canvas_widget = CanvasWidget()&#xD;&#xA;            self.canvas_widget.set_color(&#xD;&#xA;                get_color_from_hex('#2980b9'))&#xD;&#xA;            self.layout.add_widget(self.canvas_widget)&#xD;&#xA;            #self.layout.add_widget(Label(text=""Started Server : False , Connected to Server : False"",color=(1,1,1),size_hint=(1, .1)))&#xD;&#xA;            return self.layout&#xD;&#xA;    &#xD;&#xA;            #return self.canvas_widget&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    class RadioButton(ToggleButton):&#xD;&#xA;        def _do_press(self):&#xD;&#xA;            if self.state == 'normal':&#xD;&#xA;                ToggleButtonBehavior._do_press(self)&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    def pygame_compile_cursor(black='@', white='-'):&#xD;&#xA;        aa, bb = [], []&#xD;&#xA;        a = b = 0&#xD;&#xA;        i = 8&#xD;&#xA;        for s in CURSOR:&#xD;&#xA;            for c in s:&#xD;&#xA;                a <<= 1&#xD;&#xA;                b <<= 1&#xD;&#xA;                i -= 1&#xD;&#xA;                if c == black:&#xD;&#xA;                    a |= 1&#xD;&#xA;                    b |= 1&#xD;&#xA;                elif c == white:&#xD;&#xA;                    b |= 1&#xD;&#xA;    &#xD;&#xA;                if not i:&#xD;&#xA;                    aa.append(a)&#xD;&#xA;                    bb.append(b)&#xD;&#xA;                    a = b = 0&#xD;&#xA;                    i = 8&#xD;&#xA;    &#xD;&#xA;        return tuple(aa), tuple(bb)&#xD;&#xA;    &#xD;&#xA;    if __name__ == '__main__':&#xD;&#xA;        Config.set('graphics', 'width', '960')&#xD;&#xA;        Config.set('graphics', 'height', '540')  # 16:9&#xD;&#xA;        # Config.set('graphics', 'resizable', '0')&#xD;&#xA;        # Config.set('input', 'mouse', 'mouse,disable_multitouch')&#xD;&#xA;    &#xD;&#xA;        from kivy.core.window import Window&#xD;&#xA;        Window.clearcolor = get_color_from_hex('#ffffff')&#xD;&#xA;    &#xD;&#xA;        PaintApp().run()&#xD;&#xA;&#xD;&#xA;server.py&#xD;&#xA;&#xD;&#xA;    import socket&#xD;&#xA;    &#xD;&#xA;    def start_server(host,port):&#xD;&#xA;        s = socket.socket()&#xD;&#xA;        s.bind((host,port))&#xD;&#xA;    &#xD;&#xA;        s.listen(1)&#xD;&#xA;        c, addr = s.accept()&#xD;&#xA;        print ""Connection from: "" + str(addr)&#xD;&#xA;        while True:&#xD;&#xA;            data = c.recv(1024)&#xD;&#xA;            if not data:&#xD;&#xA;                break&#xD;&#xA;            print ""from connected user: "" + str(data)&#xD;&#xA;            data = str(data).upper()&#xD;&#xA;            print ""sending: "" + str(data)&#xD;&#xA;            c.send(data)&#xD;&#xA;        c.close()&#xD;&#xA;    &#xD;&#xA;    if __name__ == '__main__':&#xD;&#xA;        start_server()&#xD;&#xA;&#xD;&#xA;Above is the code for my simple paint application(adopted from kivy blue prints).&#xD;&#xA;&#xD;&#xA;My aim is to start server on one application on localhost and then others connect to it. Those who can connected to it should get their canvas updated with one from the server they connected to. How can I send the data and update canvas. I have created a server in the above code using python's socket library. &#xD;&#xA;  &#xD;&#xA;I don't want to use http requests/threads instead establish connections with sockets and use async.io. ";;added 105 characters in body

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
125421005;39074984;2436175;2;f5afdc84-8e18-4fc7-a077-bf8e20f23aa1;2016-08-22 08:47:21.0;"So, it seems this is actually not possible. I will report here the relevant section from [Eric Postpischil's answer](http://stackoverflow.com/questions/20524491/preprocessor-concatenation-for-include-path/20524959#20524959) (he doesn't seem to be active anymore).&#xD;&#xA;&#xD;&#xA;> The compiler will do macro replacement on an `#include` line (per C&#xD;&#xA;> 2011 [N1570] 6.10.2 4), but the semantics are not fully defined and&#xD;&#xA;> cannot be used to concatenate file path components without additional&#xD;&#xA;> assistance from the C implementation. So about all this allows you to&#xD;&#xA;> do is some simple substitution that provides a complete path, such as:&#xD;&#xA;> &#xD;&#xA;>     #define MyPath ""../../path/to/my/file.h""&#xD;&#xA;>     #include MyPath&#xD;&#xA;&#xD;&#xA;";;
125422244;39074984;2436175;5;fd688556-b8f0-42af-99e5-04419298a548;2016-08-22 09:02:37.0;"It really seems this is not possible. I will report here the relevant section from [Eric Postpischil's answer](http://stackoverflow.com/questions/20524491/preprocessor-concatenation-for-include-path/20524959#20524959) (he doesn't seem to be active anymore).&#xD;&#xA;&#xD;&#xA;> The compiler will do macro replacement on an `#include` line (per C&#xD;&#xA;> 2011 [N1570] 6.10.2 4), but the semantics are not fully defined and&#xD;&#xA;> cannot be used to concatenate file path components without additional&#xD;&#xA;> assistance from the C implementation. So about all this allows you to&#xD;&#xA;> do is some simple substitution that provides a complete path, such as:&#xD;&#xA;> &#xD;&#xA;>     #define MyPath ""../../path/to/my/file.h""&#xD;&#xA;>     #include MyPath&#xD;&#xA;&#xD;&#xA;[Link to documentation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=182).";;Adding link to documentation
125422695;39074984;2436175;5;5647ca3b-1733-4466-944a-be18e2abf60b;2016-08-22 09:08:14.0;"It really seems this is not possible. I will report here the relevant section from [Eric Postpischil's answer](http://stackoverflow.com/questions/20524491/preprocessor-concatenation-for-include-path/20524959#20524959) (he doesn't seem to be active anymore).&#xD;&#xA;&#xD;&#xA;> The compiler will do macro replacement on an `#include` line (per C&#xD;&#xA;> 2011 [N1570] 6.10.2 4), but the semantics are not fully defined and&#xD;&#xA;> cannot be used to concatenate file path components without additional&#xD;&#xA;> assistance from the C implementation. So about all this allows you to&#xD;&#xA;> do is some simple substitution that provides a complete path, such as:&#xD;&#xA;> &#xD;&#xA;>     #define MyPath ""../../path/to/my/file.h""&#xD;&#xA;>     #include MyPath&#xD;&#xA;&#xD;&#xA;[Link to documentation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=182). In particular this section doesn't leave much hope for portable solutions:&#xD;&#xA;&#xD;&#xA;> The  method  by  which  a  sequence  of  preprocessing  tokens between&#xD;&#xA;> a `<` and a `>` preprocessing token pair or a pair of `""` characters&#xD;&#xA;> is combined into a single header name preprocessing token is&#xD;&#xA;> implementation-defined.";;Adding link to documentation
125588657;39074984;2436175;5;ecb0b44f-5d65-47e9-bf07-c2372c121075;2016-08-24 08:21:40.0;"It really seems this is not possible. I will report here the relevant section from [Eric Postpischil's answer](http://stackoverflow.com/questions/20524491/preprocessor-concatenation-for-include-path/20524959#20524959) (he doesn't seem to be active anymore).&#xD;&#xA;&#xD;&#xA;> The compiler will do macro replacement on an `#include` line (per C&#xD;&#xA;> 2011 [N1570] 6.10.2 4), but the semantics are not fully defined and&#xD;&#xA;> cannot be used to concatenate file path components without additional&#xD;&#xA;> assistance from the C implementation. So about all this allows you to&#xD;&#xA;> do is some simple substitution that provides a complete path, such as:&#xD;&#xA;> &#xD;&#xA;>     #define MyPath ""../../path/to/my/file.h""&#xD;&#xA;>     #include MyPath&#xD;&#xA;&#xD;&#xA;[Link to documentation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=182). In particular this section doesn't leave much hope for portable solutions:&#xD;&#xA;&#xD;&#xA;> The  method  by  which  a  sequence  of  preprocessing  tokens between&#xD;&#xA;> a `<` and a `>` preprocessing token pair or a pair of `""` characters&#xD;&#xA;> is combined into a single header name preprocessing token is&#xD;&#xA;> implementation-defined.&#xD;&#xA;&#xD;&#xA;<hr/>&#xD;&#xA;&#xD;&#xA;For completeness, maybe something can be tried using http://stackoverflow.com/a/27830271/2436175. I'll investigate that when I have a moment...";;added 159 characters in body
146280965;39074984;-1;5;bb833eb0-7ce6-40ba-a62a-49937c498071;2017-05-23 10:33:44.0;"It really seems this is not possible. I will report here the relevant section from [Eric Postpischil's answer](https://stackoverflow.com/questions/20524491/preprocessor-concatenation-for-include-path/20524959#20524959) (he doesn't seem to be active anymore).&#xD;&#xA;&#xD;&#xA;> The compiler will do macro replacement on an `#include` line (per C&#xD;&#xA;> 2011 [N1570] 6.10.2 4), but the semantics are not fully defined and&#xD;&#xA;> cannot be used to concatenate file path components without additional&#xD;&#xA;> assistance from the C implementation. So about all this allows you to&#xD;&#xA;> do is some simple substitution that provides a complete path, such as:&#xD;&#xA;> &#xD;&#xA;>     #define MyPath ""../../path/to/my/file.h""&#xD;&#xA;>     #include MyPath&#xD;&#xA;&#xD;&#xA;[Link to documentation](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf#page=182). In particular this section doesn't leave much hope for portable solutions:&#xD;&#xA;&#xD;&#xA;> The  method  by  which  a  sequence  of  preprocessing  tokens between&#xD;&#xA;> a `<` and a `>` preprocessing token pair or a pair of `""` characters&#xD;&#xA;> is combined into a single header name preprocessing token is&#xD;&#xA;> implementation-defined.&#xD;&#xA;&#xD;&#xA;<hr/>&#xD;&#xA;&#xD;&#xA;For completeness, maybe something can be tried using https://stackoverflow.com/a/27830271/2436175. I'll investigate that when I have a moment...";;replaced http://stackoverflow.com/ with https://stackoverflow.com/

Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
1167552;45;39;2;dfe2d243-dd10-4b51-8133-4fd3e3341e0a;2008-08-01 12:56:38;"You can use something like Console.WriteLine() to block the main thread, so other background threads (like timer threads) will still work. You may also use an [AutoResetEvent][1] to block the execution, then (when you need to) you can call Set() method on that AutoResetEvent object to release the main thread. Also ensure that your reference to Timer object doesn't go out of scope and garbage collected.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://msdn.microsoft.com/en-us/library/system.threading.autoresetevent.aspx";;
1167553;45;39;5;cc489583-6805-42cc-b1b2-2c9421f4c25c;2009-03-23 21:15:51;"You can use something like Console.ReadLine() to block the main thread, so other background threads (like timer threads) will still work. You may also use an [AutoResetEvent][1] to block the execution, then (when you need to) you can call Set() method on that AutoResetEvent object to release the main thread. Also ensure that your reference to Timer object doesn't go out of scope and garbage collected.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://msdn.microsoft.com/en-us/library/system.threading.autoresetevent.aspx";;fixed WriteLine to ReadLine
30458638;45;967315;5;aead9c40-bfa6-4039-ab2f-b63ae4884335;2012-10-14 12:20:07;"You can use something like `Console.ReadLine()` to block the main thread, so other background threads (like timer threads) will still work. You may also use an [AutoResetEvent][1] to block the execution, then (when you need to) you can call Set() method on that AutoResetEvent object to release the main thread. Also ensure that your reference to Timer object doesn't go out of scope and garbage collected.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://msdn.microsoft.com/en-us/library/system.threading.autoresetevent.aspx";;added 2 characters in body
